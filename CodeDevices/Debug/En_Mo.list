
En_Mo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007a20  08007a20  00008a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  00009090  2**0
                  CONTENTS
  4 .ARM          00000000  08007a90  08007a90  00009090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a90  08007a90  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a94  08007a94  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007a98  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000090  08007b28  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08007b28  000093b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d81  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350c  00000000  00000000  0001ae3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  0001f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab52  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ad2  00000000  00000000  0003ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911fe  00000000  00000000  000517b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e29b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  000e29f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000e78a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a08 	.word	0x08007a08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08007a08 	.word	0x08007a08

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <Fullpower_session>:


data_sensor value;

void Fullpower_session(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af02      	add	r7, sp, #8
//	dht.temperature = 33.5;
//	dht.humidity = 69.3;

	DHT22_init(&dht, GPIOA, GPIO_PIN_0);
 80010f6:	2201      	movs	r2, #1
 80010f8:	4980      	ldr	r1, [pc, #512]	@ (80012fc <Fullpower_session+0x20c>)
 80010fa:	4881      	ldr	r0, [pc, #516]	@ (8001300 <Fullpower_session+0x210>)
 80010fc:	f004 f95e 	bl	80053bc <DHT22_init>
	MQ135_init(&mq135, &hadc1, ADC_CHANNEL_1);
 8001100:	2201      	movs	r2, #1
 8001102:	4980      	ldr	r1, [pc, #512]	@ (8001304 <Fullpower_session+0x214>)
 8001104:	4880      	ldr	r0, [pc, #512]	@ (8001308 <Fullpower_session+0x218>)
 8001106:	f004 fab7 	bl	8005678 <MQ135_init>
	PM25_init(&pm25, GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_6);
 800110a:	2340      	movs	r3, #64	@ 0x40
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4b7b      	ldr	r3, [pc, #492]	@ (80012fc <Fullpower_session+0x20c>)
 8001110:	2204      	movs	r2, #4
 8001112:	497a      	ldr	r1, [pc, #488]	@ (80012fc <Fullpower_session+0x20c>)
 8001114:	487d      	ldr	r0, [pc, #500]	@ (800130c <Fullpower_session+0x21c>)
 8001116:	f004 fca9 	bl	8005a6c <PM25_init>

	while(1)
	{
		if(conn == NULL || conn->state == CLOSE)
 800111a:	4b7d      	ldr	r3, [pc, #500]	@ (8001310 <Fullpower_session+0x220>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <Fullpower_session+0x3c>
 8001122:	4b7b      	ldr	r3, [pc, #492]	@ (8001310 <Fullpower_session+0x220>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	7a5b      	ldrb	r3, [r3, #9]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <Fullpower_session+0x58>
		{
			conn = Lcp_Connect(_lcp_cl, (point){0x21});
 800112c:	4b79      	ldr	r3, [pc, #484]	@ (8001314 <Fullpower_session+0x224>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2221      	movs	r2, #33	@ 0x21
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fe50 	bl	8005dda <Lcp_Connect>
 800113a:	4603      	mov	r3, r0
 800113c:	4a74      	ldr	r2, [pc, #464]	@ (8001310 <Fullpower_session+0x220>)
 800113e:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 8001140:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001144:	f000 fe70 	bl	8001e28 <HAL_Delay>
		}

		flag_read_SS_done = 0;
 8001148:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <Fullpower_session+0x228>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
		DHT22_getTemperature(&dht);
 800114e:	486c      	ldr	r0, [pc, #432]	@ (8001300 <Fullpower_session+0x210>)
 8001150:	f004 fa6a 	bl	8005628 <DHT22_getTemperature>
		DHT22_getHumidity(&dht);
 8001154:	486a      	ldr	r0, [pc, #424]	@ (8001300 <Fullpower_session+0x210>)
 8001156:	f004 fa7b 	bl	8005650 <DHT22_getHumidity>
		MQ135_getCorrectedCO2PPM(&mq135, dht.temperature, dht.humidity);
 800115a:	4b69      	ldr	r3, [pc, #420]	@ (8001300 <Fullpower_session+0x210>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4a68      	ldr	r2, [pc, #416]	@ (8001300 <Fullpower_session+0x210>)
 8001160:	68d2      	ldr	r2, [r2, #12]
 8001162:	4619      	mov	r1, r3
 8001164:	4868      	ldr	r0, [pc, #416]	@ (8001308 <Fullpower_session+0x218>)
 8001166:	f004 fbd7 	bl	8005918 <MQ135_getCorrectedCO2PPM>
		MQ135_getCOPPM(&mq135);
 800116a:	4867      	ldr	r0, [pc, #412]	@ (8001308 <Fullpower_session+0x218>)
 800116c:	f004 fc44 	bl	80059f8 <MQ135_getCOPPM>
		PM25_getDustDensity(&pm25);
 8001170:	4866      	ldr	r0, [pc, #408]	@ (800130c <Fullpower_session+0x21c>)
 8001172:	f004 fd5d 	bl	8005c30 <PM25_getDustDensity>

//		mq135.CO = (float)(rand() % 100) / 100.0;
//		mq135.Co2 = 150.0 + (rand() % (2500 + 1 - 1500)) / 10.0;
//		pm25.dustDensity = (float)(rand() % 50) / 100.0;

		value.paramBCD.temp1 = (uint8_t)dht.temperature;
 8001176:	4b62      	ldr	r3, [pc, #392]	@ (8001300 <Fullpower_session+0x210>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff98 	bl	80010b0 <__aeabi_f2uiz>
 8001180:	4603      	mov	r3, r0
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b65      	ldr	r3, [pc, #404]	@ (800131c <Fullpower_session+0x22c>)
 8001186:	701a      	strb	r2, [r3, #0]
		value.paramBCD.temp2 = (uint8_t)(dht.temperature * 100.0) % 100;
 8001188:	4b5d      	ldr	r3, [pc, #372]	@ (8001300 <Fullpower_session+0x210>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f943 	bl	8000418 <__aeabi_f2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b62      	ldr	r3, [pc, #392]	@ (8001320 <Fullpower_session+0x230>)
 8001198:	f7ff f996 	bl	80004c8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fc40 	bl	8000a28 <__aeabi_d2uiz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001324 <Fullpower_session+0x234>)
 80011ae:	fba2 1203 	umull	r1, r2, r2, r3
 80011b2:	0952      	lsrs	r2, r2, #5
 80011b4:	2164      	movs	r1, #100	@ 0x64
 80011b6:	fb01 f202 	mul.w	r2, r1, r2
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b57      	ldr	r3, [pc, #348]	@ (800131c <Fullpower_session+0x22c>)
 80011c0:	705a      	strb	r2, [r3, #1]
		value.paramBCD.Humi1 = (uint8_t)dht.humidity;
 80011c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001300 <Fullpower_session+0x210>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff72 	bl	80010b0 <__aeabi_f2uiz>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b52      	ldr	r3, [pc, #328]	@ (800131c <Fullpower_session+0x22c>)
 80011d2:	709a      	strb	r2, [r3, #2]
		value.paramBCD.Humi2 = (uint8_t)(dht.humidity * 100.0) % 100;
 80011d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001300 <Fullpower_session+0x210>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f91d 	bl	8000418 <__aeabi_f2d>
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001320 <Fullpower_session+0x230>)
 80011e4:	f7ff f970 	bl	80004c8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc1a 	bl	8000a28 <__aeabi_d2uiz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001324 <Fullpower_session+0x234>)
 80011fa:	fba2 1203 	umull	r1, r2, r2, r3
 80011fe:	0952      	lsrs	r2, r2, #5
 8001200:	2164      	movs	r1, #100	@ 0x64
 8001202:	fb01 f202 	mul.w	r2, r1, r2
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <Fullpower_session+0x22c>)
 800120c:	70da      	strb	r2, [r3, #3]
		value.paramBCD.C02_1 = (uint8_t)mq135.Co2;
 800120e:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <Fullpower_session+0x218>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff4c 	bl	80010b0 <__aeabi_f2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <Fullpower_session+0x22c>)
 800121e:	721a      	strb	r2, [r3, #8]
		value.paramBCD.C02_2 = (uint8_t)(mq135.Co2 * 100.0) % 100;
 8001220:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <Fullpower_session+0x218>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f8f7 	bl	8000418 <__aeabi_f2d>
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <Fullpower_session+0x230>)
 8001230:	f7ff f94a 	bl	80004c8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fbf4 	bl	8000a28 <__aeabi_d2uiz>
 8001240:	4603      	mov	r3, r0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4a37      	ldr	r2, [pc, #220]	@ (8001324 <Fullpower_session+0x234>)
 8001246:	fba2 1203 	umull	r1, r2, r2, r3
 800124a:	0952      	lsrs	r2, r2, #5
 800124c:	2164      	movs	r1, #100	@ 0x64
 800124e:	fb01 f202 	mul.w	r2, r1, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b31      	ldr	r3, [pc, #196]	@ (800131c <Fullpower_session+0x22c>)
 8001258:	725a      	strb	r2, [r3, #9]
		value.paramBCD.Pm25_1 = (uint8_t)pm25.dustDensity;
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <Fullpower_session+0x21c>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff26 	bl	80010b0 <__aeabi_f2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <Fullpower_session+0x22c>)
 800126a:	711a      	strb	r2, [r3, #4]
		value.paramBCD.Pm25_2 = (uint8_t)(pm25.dustDensity * 100.0) % 100;
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <Fullpower_session+0x21c>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d1 	bl	8000418 <__aeabi_f2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <Fullpower_session+0x230>)
 800127c:	f7ff f924 	bl	80004c8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fbce 	bl	8000a28 <__aeabi_d2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4a24      	ldr	r2, [pc, #144]	@ (8001324 <Fullpower_session+0x234>)
 8001292:	fba2 1203 	umull	r1, r2, r2, r3
 8001296:	0952      	lsrs	r2, r2, #5
 8001298:	2164      	movs	r1, #100	@ 0x64
 800129a:	fb01 f202 	mul.w	r2, r1, r2
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <Fullpower_session+0x22c>)
 80012a4:	715a      	strb	r2, [r3, #5]
		value.paramBCD.CO_1 = (uint8_t)mq135.CO;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <Fullpower_session+0x218>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff00 	bl	80010b0 <__aeabi_f2uiz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <Fullpower_session+0x22c>)
 80012b6:	719a      	strb	r2, [r3, #6]
		value.paramBCD.CO_2 = (uint8_t)(mq135.CO * 100.0) % 100;
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <Fullpower_session+0x218>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8ab 	bl	8000418 <__aeabi_f2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <Fullpower_session+0x230>)
 80012c8:	f7ff f8fe 	bl	80004c8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fba8 	bl	8000a28 <__aeabi_d2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <Fullpower_session+0x234>)
 80012de:	fba2 1203 	umull	r1, r2, r2, r3
 80012e2:	0952      	lsrs	r2, r2, #5
 80012e4:	2164      	movs	r1, #100	@ 0x64
 80012e6:	fb01 f202 	mul.w	r2, r1, r2
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <Fullpower_session+0x22c>)
 80012f0:	71da      	strb	r2, [r3, #7]
//		value.paramBCD.Pm25_1 = (uint8_t)2.7;
//		value.paramBCD.Pm25_2 = (uint8_t)(2.7 * 100.0) % 100;
//		value.paramBCD.CO_1 = (uint8_t)2.3;
//		value.paramBCD.CO_2 = (uint8_t)(2.3 * 100.0) % 100;

		flag_read_SS_done = 1;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <Fullpower_session+0x228>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
		if(conn == NULL || conn->state == CLOSE)
 80012f8:	e70f      	b.n	800111a <Fullpower_session+0x2a>
 80012fa:	bf00      	nop
 80012fc:	40010800 	.word	0x40010800
 8001300:	200000ac 	.word	0x200000ac
 8001304:	20000110 	.word	0x20000110
 8001308:	200000c4 	.word	0x200000c4
 800130c:	200000d4 	.word	0x200000d4
 8001310:	20000108 	.word	0x20000108
 8001314:	20000104 	.word	0x20000104
 8001318:	2000010c 	.word	0x2000010c
 800131c:	200000f4 	.word	0x200000f4
 8001320:	40590000 	.word	0x40590000
 8001324:	51eb851f 	.word	0x51eb851f

08001328 <Sleep_session>:
#include "mainApp.h"

void Sleep_session(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	while(1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Sleep_session+0x4>

08001330 <mainApp>:

uint8_t data[10] = {1,2,3,4,5,6,7,8,9};
uint8_t flag_read_SS_done = 0;

void mainApp(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	@ 0x30
 8001334:	af02      	add	r7, sp, #8
	_router = newRouter(3, 40, 30);
 8001336:	221e      	movs	r2, #30
 8001338:	2128      	movs	r1, #40	@ 0x28
 800133a:	2003      	movs	r0, #3
 800133c:	f003 fdc8 	bl	8004ed0 <newRouter>
 8001340:	4603      	mov	r3, r0
 8001342:	4a35      	ldr	r2, [pc, #212]	@ (8001418 <mainApp+0xe8>)
 8001344:	6013      	str	r3, [r2, #0]
	Router_SlipConfig(_router, true);
 8001346:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <mainApp+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fe0a 	bl	8004f66 <Router_SlipConfig>
	uart_cf_t uartcf;
	uartcf.ModulUart 	= USART_1;
 8001352:	2300      	movs	r3, #0
 8001354:	753b      	strb	r3, [r7, #20]
	uartcf.baudrate  	= 9600;
 8001356:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800135a:	61bb      	str	r3, [r7, #24]
	uartcf.WordLength 	= MODE_8BIT;
 800135c:	2300      	movs	r3, #0
 800135e:	773b      	strb	r3, [r7, #28]
	uartcf.Parity.PC    = PARITY_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	777b      	strb	r3, [r7, #29]
	uartcf.StopBit   	= MODE_1BIT;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
	uartcf.INT_mode		= INT_ENABLE;
 8001368:	2301      	movs	r3, #1
 800136a:	f887 3020 	strb.w	r3, [r7, #32]

	uart_init(uartcf);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	f004 ffca 	bl	800630c <uart_init>

	uart_recive_add_callback(uart_readbyte);
 8001378:	4828      	ldr	r0, [pc, #160]	@ (800141c <mainApp+0xec>)
 800137a:	f005 f8ed 	bl	8006558 <uart_recive_add_callback>

	_lcp_cl	= newLcp(0x15, 1, 1, 40, 0);
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2328      	movs	r3, #40	@ 0x28
 8001384:	2201      	movs	r2, #1
 8001386:	2101      	movs	r1, #1
 8001388:	2015      	movs	r0, #21
 800138a:	f004 fc5e 	bl	8005c4a <newLcp>
 800138e:	4603      	mov	r3, r0
 8001390:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <mainApp+0xf0>)
 8001392:	6013      	str	r3, [r2, #0]

	Lcp_EventSendMessage(_lcp_cl, Event_SendMessage);
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <mainApp+0xf0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4922      	ldr	r1, [pc, #136]	@ (8001424 <mainApp+0xf4>)
 800139a:	4618      	mov	r0, r3
 800139c:	f004 ffa8 	bl	80062f0 <Lcp_EventSendMessage>

	HAL_TIM_Base_Start_IT(&htim1);
 80013a0:	4821      	ldr	r0, [pc, #132]	@ (8001428 <mainApp+0xf8>)
 80013a2:	f002 fb8b 	bl	8003abc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80013a6:	4821      	ldr	r0, [pc, #132]	@ (800142c <mainApp+0xfc>)
 80013a8:	f002 fb88 	bl	8003abc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80013ac:	4820      	ldr	r0, [pc, #128]	@ (8001430 <mainApp+0x100>)
 80013ae:	f002 fb85 	bl	8003abc <HAL_TIM_Base_Start_IT>

	conn = Lcp_Connect(_lcp_cl, (point){0x21});
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <mainApp+0xf0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2221      	movs	r2, #33	@ 0x21
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fd0d 	bl	8005dda <Lcp_Connect>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <mainApp+0x104>)
 80013c4:	6013      	str	r3, [r2, #0]

	RTC_enable_int();
 80013c6:	f000 f92d 	bl	8001624 <RTC_enable_int>

	uint8_t datarx[15] = {0};
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	f8c3 2007 	str.w	r2, [r3, #7]
	uint16_t length = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(1)
	{
		if(conn == NULL || conn->state == CLOSE)
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <mainApp+0x104>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <mainApp+0xc2>
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <mainApp+0x104>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	7a5b      	ldrb	r3, [r3, #9]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <mainApp+0xd6>
		{
			conn = Lcp_Connect(_lcp_cl, (point){0x21});
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <mainApp+0xf0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2221      	movs	r2, #33	@ 0x21
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fced 	bl	8005dda <Lcp_Connect>
 8001400:	4603      	mov	r3, r0
 8001402:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <mainApp+0x104>)
 8001404:	6013      	str	r3, [r2, #0]
		}

		mode_funct[session_run]();
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <mainApp+0x108>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <mainApp+0x10c>)
 800140e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001412:	4798      	blx	r3
		if(conn == NULL || conn->state == CLOSE)
 8001414:	e7e4      	b.n	80013e0 <mainApp+0xb0>
 8001416:	bf00      	nop
 8001418:	20000100 	.word	0x20000100
 800141c:	08001475 	.word	0x08001475
 8001420:	20000104 	.word	0x20000104
 8001424:	08001441 	.word	0x08001441
 8001428:	20000154 	.word	0x20000154
 800142c:	2000019c 	.word	0x2000019c
 8001430:	200001e4 	.word	0x200001e4
 8001434:	20000108 	.word	0x20000108
 8001438:	200000fe 	.word	0x200000fe
 800143c:	20000000 	.word	0x20000000

08001440 <Event_SendMessage>:
	}
}

void Event_SendMessage(lcp_conn_t * Conn, uint8_t port)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]

	if(conn != NULL)
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <Event_SendMessage+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <Event_SendMessage+0x22>
	{
		Fifo_AddData(Conn->txBuff, value.rawdata, 10);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	220a      	movs	r2, #10
 800145a:	4905      	ldr	r1, [pc, #20]	@ (8001470 <Event_SendMessage+0x30>)
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fbfa 	bl	8004c56 <Fifo_AddData>
	}

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000108 	.word	0x20000108
 8001470:	200000f4 	.word	0x200000f4

08001474 <uart_readbyte>:


void uart_readbyte(uint8_t byte)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	Router_PushMessageRx(_router, &byte, 1);
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <uart_readbyte+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1df9      	adds	r1, r7, #7
 8001484:	2201      	movs	r2, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fdcc 	bl	8005024 <Router_PushMessageRx>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000100 	.word	0x20000100

08001498 <HAL_RTCEx_RTCEventCallback>:

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(_lcp_cl->ListConn->state == ESTABLISHED)
 80014a0:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	7a5b      	ldrb	r3, [r3, #9]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d148      	bne.n	800153e <HAL_RTCEx_RTCEventCallback+0xa6>
	{
		if((_lcp_cl->ListConn->timeCircle > 0))
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	79db      	ldrb	r3, [r3, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d03b      	beq.n	8001530 <HAL_RTCEx_RTCEventCallback+0x98>
		{
			if(_lcp_cl->ListConn->timeOffset == 0)
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	7a1b      	ldrb	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d118      	bne.n	80014f6 <HAL_RTCEx_RTCEventCallback+0x5e>
			{
				if((_lcp_cl->realTime % _lcp_cl->ListConn->timeCircle) == 9)
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	68d2      	ldr	r2, [r2, #12]
 80014d0:	79d2      	ldrb	r2, [r2, #7]
 80014d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d6:	fb01 f202 	mul.w	r2, r1, r2
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d127      	bne.n	8001530 <HAL_RTCEx_RTCEventCallback+0x98>
				{
					session_run = 1;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_RTCEx_RTCEventCallback+0xb4>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
					_lcp_cl->ListConn->Flag.bit.PSH = 1;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	7813      	ldrb	r3, [r2, #0]
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	7013      	strb	r3, [r2, #0]
 80014f4:	e01c      	b.n	8001530 <HAL_RTCEx_RTCEventCallback+0x98>
				}
			}
			else
			{
				if((_lcp_cl->realTime % _lcp_cl->ListConn->timeCircle) == (_lcp_cl->ListConn->timeOffset - 1))
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	68d2      	ldr	r2, [r2, #12]
 8001502:	79d2      	ldrb	r2, [r2, #7]
 8001504:	fbb3 f1f2 	udiv	r1, r3, r2
 8001508:	fb01 f202 	mul.w	r2, r1, r2
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	68d2      	ldr	r2, [r2, #12]
 8001514:	7a12      	ldrb	r2, [r2, #8]
 8001516:	3a01      	subs	r2, #1
 8001518:	4293      	cmp	r3, r2
 800151a:	d109      	bne.n	8001530 <HAL_RTCEx_RTCEventCallback+0x98>
				{
					session_run = 1;
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_RTCEx_RTCEventCallback+0xb4>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
					_lcp_cl->ListConn->Flag.bit.PSH = 1;
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	7813      	ldrb	r3, [r2, #0]
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		Lcp_Runtime(_lcp_cl, 1000);
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RTCEx_RTCEventCallback+0xb0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fcd4 	bl	8005ee6 <Lcp_Runtime>
	}
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000104 	.word	0x20000104
 800154c:	200000fe 	.word	0x200000fe

08001550 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b090      	sub	sp, #64	@ 0x40
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	uint8_t data[50] = {0};
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	222e      	movs	r2, #46	@ 0x2e
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fa9f 	bl	8006aa8 <memset>
	uint16_t length = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	817b      	strh	r3, [r7, #10]
	if(htim->Instance == TIM1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a29      	ldr	r2, [pc, #164]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d11e      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		Lcp_nProcess(_lcp_cl, 3);
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2103      	movs	r1, #3
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fcd6 	bl	8005f30 <Lcp_nProcess>
		Router_MessageHandler(_router);
 8001584:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fd9d 	bl	80050c8 <Router_MessageHandler>
		if(Router_PullMessageRx(_router, data, &length) == BUFF_OK)
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f107 020a 	add.w	r2, r7, #10
 8001596:	f107 010c 	add.w	r1, r7, #12
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fd67 	bl	800506e <Router_PullMessageRx>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			Lcp_pushMessage(_lcp_cl, data, length);
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	897a      	ldrh	r2, [r7, #10]
 80015ac:	f107 010c 	add.w	r1, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fbce 	bl	8005d52 <Lcp_pushMessage>
		}
	}

	if(htim->Instance == TIM2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015be:	d126      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		if(Lcp_pullMessageSend(_lcp_cl , data, &length) == LCP_OK)
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f107 020a 	add.w	r2, r7, #10
 80015c8:	f107 010c 	add.w	r1, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fbe4 	bl	8005d9a <Lcp_pullMessageSend>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x98>
		{
			Router_PushMessageTx(_router, data, length);
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	897a      	ldrh	r2, [r7, #10]
 80015de:	f107 010c 	add.w	r1, r7, #12
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fccd 	bl	8004f82 <Router_PushMessageTx>
		}
		if(Router_PullMessageTx(_router, data, &length) == BUFF_OK)
 80015e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f107 020a 	add.w	r2, r7, #10
 80015f0:	f107 010c 	add.w	r1, r7, #12
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fd28 	bl	800504a <Router_PullMessageTx>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			uart_WriteData(USART_1, data, length);
 8001600:	897a      	ldrh	r2, [r7, #10]
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	2000      	movs	r0, #0
 800160a:	f004 ff57 	bl	80064bc <uart_WriteData>
	if(htim->Instance == TIM3)
	{
//		Lcp_Runtime(_lcp_cl, 1000);
//		Lcp_Runtime(_lcp, 1000);
	}
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	@ 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00
 800161c:	20000104 	.word	0x20000104
 8001620:	20000100 	.word	0x20000100

08001624 <RTC_enable_int>:

void RTC_enable_int(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
	uint32_t *rtc = 0x40002800;
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <RTC_enable_int+0x1c>)
 800162c:	607b      	str	r3, [r7, #4]
	*rtc = 0x01;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40002800 	.word	0x40002800

08001644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001648:	f000 fb8c 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164c:	f000 f813 	bl	8001676 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001650:	f000 f9a2 	bl	8001998 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001654:	f000 f8b6 	bl	80017c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001658:	f000 f904 	bl	8001864 <MX_TIM2_Init>
  MX_TIM3_Init();
 800165c:	f000 f94e 	bl	80018fc <MX_TIM3_Init>
  MX_RTC_Init();
 8001660:	f000 f894 	bl	800178c <MX_RTC_Init>
  MX_ADC1_Init();
 8001664:	f000 f862 	bl	800172c <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit(&huart1, &data, 1, 100);
	  mainApp();
 8001668:	f7ff fe62 	bl	8001330 <mainApp>
	  HAL_Delay(200);
 800166c:	20c8      	movs	r0, #200	@ 0xc8
 800166e:	f000 fbdb 	bl	8001e28 <HAL_Delay>
	  mainApp();
 8001672:	bf00      	nop
 8001674:	e7f8      	b.n	8001668 <main+0x24>

08001676 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b094      	sub	sp, #80	@ 0x50
 800167a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001680:	2228      	movs	r2, #40	@ 0x28
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fa0f 	bl	8006aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016a6:	230a      	movs	r3, #10
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2310      	movs	r3, #16
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016b2:	2301      	movs	r3, #1
 80016b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016ba:	2300      	movs	r3, #0
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016be:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 faf7 	bl	8002cbc <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016d4:	f000 f994 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	2102      	movs	r1, #2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fd63 	bl	80031c0 <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001700:	f000 f97e 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001704:	2303      	movs	r3, #3
 8001706:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800170c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fecd 	bl	80034b4 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001720:	f000 f96e 	bl	8001a00 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3750      	adds	r7, #80	@ 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_ADC1_Init+0x58>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <MX_ADC1_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_ADC1_Init+0x58>)
 8001744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_ADC1_Init+0x58>)
 800174c:	2201      	movs	r2, #1
 800174e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_ADC1_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_ADC1_Init+0x58>)
 8001758:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800175c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_ADC1_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <MX_ADC1_Init+0x58>)
 8001766:	2201      	movs	r2, #1
 8001768:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_ADC1_Init+0x58>)
 800176c:	f000 fb80 	bl	8001e70 <HAL_ADC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001776:	f000 f943 	bl	8001a00 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000110 	.word	0x20000110
 8001788:	40012400 	.word	0x40012400

0800178c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <MX_RTC_Init+0x30>)
 8001792:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <MX_RTC_Init+0x34>)
 8001794:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <MX_RTC_Init+0x30>)
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <MX_RTC_Init+0x30>)
 80017a0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017a4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_RTC_Init+0x30>)
 80017a8:	f001 fff0 	bl	800378c <HAL_RTC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80017b2:	f000 f925 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000140 	.word	0x20000140
 80017c0:	40002800 	.word	0x40002800

080017c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <MX_TIM1_Init+0x98>)
 80017e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <MX_TIM1_Init+0x9c>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_TIM1_Init+0x98>)
 80017e8:	223f      	movs	r2, #63	@ 0x3f
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <MX_TIM1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_TIM1_Init+0x98>)
 80017f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <MX_TIM1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_TIM1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <MX_TIM1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <MX_TIM1_Init+0x98>)
 800180e:	f002 f906 	bl	8003a1e <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001818:	f000 f8f2 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_TIM1_Init+0x98>)
 800182a:	f002 faa1 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001834:	f000 f8e4 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_TIM1_Init+0x98>)
 8001846:	f002 fc77 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001850:	f000 f8d6 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000154 	.word	0x20000154
 8001860:	40012c00 	.word	0x40012c00

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_TIM2_Init+0x94>)
 800188a:	223f      	movs	r2, #63	@ 0x3f
 800188c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_TIM2_Init+0x94>)
 8001896:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_TIM2_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018aa:	f002 f8b8 	bl	8003a1e <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b4:	f000 f8a4 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018c6:	f002 fa53 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d0:	f000 f896 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	@ (80018f8 <MX_TIM2_Init+0x94>)
 80018e2:	f002 fc29 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f000 f888 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000019c 	.word	0x2000019c

080018fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_TIM3_Init+0x94>)
 800191a:	4a1e      	ldr	r2, [pc, #120]	@ (8001994 <MX_TIM3_Init+0x98>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_TIM3_Init+0x94>)
 8001920:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_TIM3_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MX_TIM3_Init+0x94>)
 800192e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_TIM3_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_TIM3_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001940:	4813      	ldr	r0, [pc, #76]	@ (8001990 <MX_TIM3_Init+0x94>)
 8001942:	f002 f86c 	bl	8003a1e <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800194c:	f000 f858 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <MX_TIM3_Init+0x94>)
 800195e:	f002 fa07 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001968:	f000 f84a 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_TIM3_Init+0x94>)
 800197a:	f002 fbdd 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001984:	f000 f83c 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001e4 	.word	0x200001e4
 8001994:	40000400 	.word	0x40000400

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_GPIO_Init+0x60>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <MX_GPIO_Init+0x60>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_GPIO_Init+0x60>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ca:	480c      	ldr	r0, [pc, #48]	@ (80019fc <MX_GPIO_Init+0x64>)
 80019cc:	f001 f951 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <MX_GPIO_Init+0x64>)
 80019ea:	f000 ffa7 	bl	800293c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <Error_Handler+0x8>

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_MspInit+0x60>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_MspInit+0x60>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <HAL_ADC_MspInit+0x6c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d121      	bne.n	8001ad4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_ADC_MspInit+0x70>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_ADC_MspInit+0x74>)
 8001ad0:	f000 ff34 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800

08001ae8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <HAL_RTC_MspInit+0x4c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d118      	bne.n	8001b2c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001afa:	f001 f8d3 	bl	8002ca4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_RTC_MspInit+0x50>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <HAL_RTC_MspInit+0x50>)
 8001b04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RTC_MspInit+0x50>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_RTC_MspInit+0x54>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2101      	movs	r1, #1
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 fed4 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 feed 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40002800 	.word	0x40002800
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	4242043c 	.word	0x4242043c

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a27      	ldr	r2, [pc, #156]	@ (8001bec <HAL_TIM_Base_MspInit+0xac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d114      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f000 fead 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b74:	2019      	movs	r0, #25
 8001b76:	f000 fec6 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b7a:	e032      	b.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b84:	d114      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	201c      	movs	r0, #28
 8001ba4:	f000 fe93 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba8:	201c      	movs	r0, #28
 8001baa:	f000 feac 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001bae:	e018      	b.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <HAL_TIM_Base_MspInit+0xb4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xb0>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	201d      	movs	r0, #29
 8001bd8:	f000 fe79 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bdc:	201d      	movs	r0, #29
 8001bde:	f000 fe92 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <NMI_Handler+0x4>

08001c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <MemManage_Handler+0x4>

08001c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f8d2 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <RTC_IRQHandler+0x10>)
 8001c56:	f001 fea2 	bl	800399e <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000140 	.word	0x20000140

08001c64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <TIM1_UP_IRQHandler+0x10>)
 8001c6a:	f001 ff79 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000154 	.word	0x20000154

08001c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <TIM2_IRQHandler+0x10>)
 8001c7e:	f001 ff6f 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000019c 	.word	0x2000019c

08001c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <TIM3_IRQHandler+0x10>)
 8001c92:	f001 ff65 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001e4 	.word	0x200001e4

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f004 ff02 	bl	8006ad8 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20005000 	.word	0x20005000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	2000022c 	.word	0x2000022c
 8001d08:	200003b8 	.word	0x200003b8

08001d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d18:	f7ff fff8 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d1e:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d20:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d34:	4c09      	ldr	r4, [pc, #36]	@ (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f004 fecf 	bl	8006ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff fc7d 	bl	8001644 <main>
  bx lr
 8001d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d54:	08007a98 	.word	0x08007a98
  ldr r2, =_sbss
 8001d58:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d5c:	200003b8 	.word	0x200003b8

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_Init+0x28>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_Init+0x28>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 fd9f 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fe44 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fdb7 	bl	8002922 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 fd7f 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000010 	.word	0x20000010
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_IncTick+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a03      	ldr	r2, [pc, #12]	@ (8001e10 <HAL_IncTick+0x20>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	20000230 	.word	0x20000230

08001e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <HAL_GetTick+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000230 	.word	0x20000230

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffe0 	bl	8001e14 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0be      	b.n	8002010 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fdde 	bl	8001a70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fbf1 	bl	800269c <ADC_ConversionStop_Disable>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8099 	bne.w	8001ffe <HAL_ADC_Init+0x18e>
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8095 	bne.w	8001ffe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_Init+0xa2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_ADC_Init+0xa8>
 8001f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_Init+0xaa>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7d1b      	ldrb	r3, [r3, #20]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d119      	bne.n	8001f5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	035a      	lsls	r2, r3, #13
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e00b      	b.n	8001f5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <HAL_ADC_Init+0x1a8>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8c:	d003      	beq.n	8001f96 <HAL_ADC_Init+0x126>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d104      	bne.n	8001fa0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_ADC_Init+0x1ac>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10b      	bne.n	8001fdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fda:	e018      	b.n	800200e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	f023 0312 	bic.w	r3, r3, #18
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ffc:	e007      	b.n	800200e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	ffe1f7fd 	.word	0xffe1f7fd
 800201c:	ff1f0efe 	.word	0xff1f0efe

08002020 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_Start+0x1a>
 8002036:	2302      	movs	r3, #2
 8002038:	e098      	b.n	800216c <HAL_ADC_Start+0x14c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fad0 	bl	80025e8 <ADC_Enable>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 8087 	bne.w	8002162 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <HAL_ADC_Start+0x154>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d105      	bne.n	800207e <HAL_ADC_Start+0x5e>
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_ADC_Start+0x158>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d026      	beq.n	80020e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a8:	e01d      	b.n	80020e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002178 <HAL_ADC_Start+0x158>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Start+0xaa>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_ADC_Start+0x154>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <HAL_ADC_Start+0xc6>
 80020ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <HAL_ADC_Start+0x158>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	f023 0206 	bic.w	r2, r3, #6
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020fe:	e002      	b.n	8002106 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0202 	mvn.w	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002122:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002126:	d113      	bne.n	8002150 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_ADC_Start+0x154>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d105      	bne.n	800213e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_ADC_Start+0x158>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e00c      	b.n	800216a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e003      	b.n	800216a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012800 	.word	0x40012800
 8002178:	40012400 	.word	0x40012400

0800217c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Stop+0x1a>
 8002192:	2302      	movs	r3, #2
 8002194:	e01a      	b.n	80021cc <HAL_ADC_Stop+0x50>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa7c 	bl	800269c <ADC_ConversionStop_Disable>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ea:	f7ff fe13 	bl	8001e14 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0d3      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d131      	bne.n	8002288 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12a      	bne.n	8002288 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002232:	e021      	b.n	8002278 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223a:	d01d      	beq.n	8002278 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_ADC_PollForConversion+0x7e>
 8002242:	f7ff fde7 	bl	8001e14 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d212      	bcs.n	8002278 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0a2      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0d6      	beq.n	8002234 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002286:	e070      	b.n	800236a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002288:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_ADC_PollForConversion+0x1f4>)
 800228a:	681c      	ldr	r4, [r3, #0]
 800228c:	2002      	movs	r0, #2
 800228e:	f001 f9c7 	bl	8003620 <HAL_RCCEx_GetPeriphCLKFreq>
 8002292:	4603      	mov	r3, r0
 8002294:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <HAL_ADC_PollForConversion+0x1f8>)
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x104>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <HAL_ADC_PollForConversion+0x1fc>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d111      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x104>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	4b46      	ldr	r3, [pc, #280]	@ (80023d4 <HAL_ADC_PollForConversion+0x200>)
 80022bc:	400b      	ands	r3, r1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x100>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68d9      	ldr	r1, [r3, #12]
 80022c8:	4b43      	ldr	r3, [pc, #268]	@ (80023d8 <HAL_ADC_PollForConversion+0x204>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x100>
 80022d0:	2314      	movs	r3, #20
 80022d2:	e020      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 80022d4:	2329      	movs	r3, #41	@ 0x29
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <HAL_ADC_PollForConversion+0x200>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x120>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_ADC_PollForConversion+0x204>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <HAL_ADC_PollForConversion+0x13c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <HAL_ADC_PollForConversion+0x208>)
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <HAL_ADC_PollForConversion+0x140>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_ADC_PollForConversion+0x208>)
 800230a:	400b      	ands	r3, r1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_PollForConversion+0x140>
 8002310:	2354      	movs	r3, #84	@ 0x54
 8002312:	e000      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 8002314:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800231c:	e021      	b.n	8002362 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d01a      	beq.n	800235c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_ADC_PollForConversion+0x168>
 800232c:	f7ff fd72 	bl	8001e14 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d20f      	bcs.n	800235c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d90b      	bls.n	800235c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e030      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	429a      	cmp	r2, r3
 8002368:	d8d9      	bhi.n	800231e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0212 	mvn.w	r2, #18
 8002372:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800238a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800238e:	d115      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002394:	2b00      	cmp	r3, #0
 8002396:	d111      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000008 	.word	0x20000008
 80023cc:	24924924 	.word	0x24924924
 80023d0:	00924924 	.word	0x00924924
 80023d4:	12492492 	.word	0x12492492
 80023d8:	00492492 	.word	0x00492492
 80023dc:	00249249 	.word	0x00249249

080023e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x20>
 8002414:	2302      	movs	r3, #2
 8002416:	e0dc      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1da>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b06      	cmp	r3, #6
 8002426:	d81c      	bhi.n	8002462 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b05      	subs	r3, #5
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	4019      	ands	r1, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b05      	subs	r3, #5
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002460:	e03c      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d81c      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	3b23      	subs	r3, #35	@ 0x23
 800247c:	221f      	movs	r2, #31
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4019      	ands	r1, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b23      	subs	r3, #35	@ 0x23
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a2:	e01b      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b41      	subs	r3, #65	@ 0x41
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b41      	subs	r3, #65	@ 0x41
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d91c      	bls.n	800251e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6898      	ldr	r0, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b1e      	subs	r3, #30
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	e019      	b.n	8002552 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6898      	ldr	r0, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d003      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d132      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d125      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d126      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002588:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d11a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	0c9a      	lsrs	r2, r3, #18
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x1b2>
 80025b6:	e007      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40012400 	.word	0x40012400
 80025e0:	20000008 	.word	0x20000008
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d040      	beq.n	8002688 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <ADC_Enable+0xac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <ADC_Enable+0xb0>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9b      	lsrs	r3, r3, #18
 8002622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002624:	e002      	b.n	800262c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002632:	f7ff fbef 	bl	8001e14 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002638:	e01f      	b.n	800267a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263a:	f7ff fbeb 	bl	8001e14 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d918      	bls.n	800267a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d011      	beq.n	800267a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e007      	b.n	800268a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d1d8      	bne.n	800263a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000008 	.word	0x20000008
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12e      	bne.n	8002714 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c6:	f7ff fba5 	bl	8001e14 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	e01b      	b.n	8002706 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ce:	f7ff fba1 	bl	8001e14 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d914      	bls.n	8002706 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10d      	bne.n	8002706 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d0dc      	beq.n	80026ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <__NVIC_EnableIRQ+0x34>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff90 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff2d 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff42 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff90 	bl	8002810 <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5f 	bl	80027bc <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff35 	bl	8002784 <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b08b      	sub	sp, #44	@ 0x2c
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294e:	e169      	b.n	8002c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002950:	2201      	movs	r2, #1
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8158 	bne.w	8002c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a9a      	ldr	r2, [pc, #616]	@ (8002bdc <HAL_GPIO_Init+0x2a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05e      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002978:	4a98      	ldr	r2, [pc, #608]	@ (8002bdc <HAL_GPIO_Init+0x2a0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d875      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 800297e:	4a98      	ldr	r2, [pc, #608]	@ (8002be0 <HAL_GPIO_Init+0x2a4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d058      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002984:	4a96      	ldr	r2, [pc, #600]	@ (8002be0 <HAL_GPIO_Init+0x2a4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d86f      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 800298a:	4a96      	ldr	r2, [pc, #600]	@ (8002be4 <HAL_GPIO_Init+0x2a8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d052      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 8002990:	4a94      	ldr	r2, [pc, #592]	@ (8002be4 <HAL_GPIO_Init+0x2a8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d869      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 8002996:	4a94      	ldr	r2, [pc, #592]	@ (8002be8 <HAL_GPIO_Init+0x2ac>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04c      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 800299c:	4a92      	ldr	r2, [pc, #584]	@ (8002be8 <HAL_GPIO_Init+0x2ac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d863      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029a2:	4a92      	ldr	r2, [pc, #584]	@ (8002bec <HAL_GPIO_Init+0x2b0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d046      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
 80029a8:	4a90      	ldr	r2, [pc, #576]	@ (8002bec <HAL_GPIO_Init+0x2b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d85d      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d82a      	bhi.n	8002a08 <HAL_GPIO_Init+0xcc>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d859      	bhi.n	8002a6a <HAL_GPIO_Init+0x12e>
 80029b6:	a201      	add	r2, pc, #4	@ (adr r2, 80029bc <HAL_GPIO_Init+0x80>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	08002a37 	.word	0x08002a37
 80029c0:	08002a11 	.word	0x08002a11
 80029c4:	08002a23 	.word	0x08002a23
 80029c8:	08002a65 	.word	0x08002a65
 80029cc:	08002a6b 	.word	0x08002a6b
 80029d0:	08002a6b 	.word	0x08002a6b
 80029d4:	08002a6b 	.word	0x08002a6b
 80029d8:	08002a6b 	.word	0x08002a6b
 80029dc:	08002a6b 	.word	0x08002a6b
 80029e0:	08002a6b 	.word	0x08002a6b
 80029e4:	08002a6b 	.word	0x08002a6b
 80029e8:	08002a6b 	.word	0x08002a6b
 80029ec:	08002a6b 	.word	0x08002a6b
 80029f0:	08002a6b 	.word	0x08002a6b
 80029f4:	08002a6b 	.word	0x08002a6b
 80029f8:	08002a6b 	.word	0x08002a6b
 80029fc:	08002a6b 	.word	0x08002a6b
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a2d 	.word	0x08002a2d
 8002a08:	4a79      	ldr	r2, [pc, #484]	@ (8002bf0 <HAL_GPIO_Init+0x2b4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a0e:	e02c      	b.n	8002a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e029      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	623b      	str	r3, [r7, #32]
          break;
 8002a20:	e024      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	3308      	adds	r3, #8
 8002a28:	623b      	str	r3, [r7, #32]
          break;
 8002a2a:	e01f      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	330c      	adds	r3, #12
 8002a32:	623b      	str	r3, [r7, #32]
          break;
 8002a34:	e01a      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	623b      	str	r3, [r7, #32]
          break;
 8002a42:	e013      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	611a      	str	r2, [r3, #16]
          break;
 8002a56:	e009      	b.n	8002a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	615a      	str	r2, [r3, #20]
          break;
 8002a62:	e003      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x130>
          break;
 8002a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2bff      	cmp	r3, #255	@ 0xff
 8002a70:	d801      	bhi.n	8002a76 <HAL_GPIO_Init+0x13a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	e001      	b.n	8002a7a <HAL_GPIO_Init+0x13e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2bff      	cmp	r3, #255	@ 0xff
 8002a80:	d802      	bhi.n	8002a88 <HAL_GPIO_Init+0x14c>
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x152>
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	3b08      	subs	r3, #8
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	210f      	movs	r1, #15
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80b1 	beq.w	8002c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002abc:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf4 <HAL_GPIO_Init+0x2b8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad4:	4a48      	ldr	r2, [pc, #288]	@ (8002bf8 <HAL_GPIO_Init+0x2bc>)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a40      	ldr	r2, [pc, #256]	@ (8002bfc <HAL_GPIO_Init+0x2c0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_GPIO_Init+0x1ec>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3f      	ldr	r2, [pc, #252]	@ (8002c00 <HAL_GPIO_Init+0x2c4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00d      	beq.n	8002b24 <HAL_GPIO_Init+0x1e8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c04 <HAL_GPIO_Init+0x2c8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <HAL_GPIO_Init+0x1e4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	@ (8002c08 <HAL_GPIO_Init+0x2cc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_GPIO_Init+0x1e0>
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3a:	492f      	ldr	r1, [pc, #188]	@ (8002bf8 <HAL_GPIO_Init+0x2bc>)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	492c      	ldr	r1, [pc, #176]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b62:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4928      	ldr	r1, [pc, #160]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b7c:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4922      	ldr	r1, [pc, #136]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b8a:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	491e      	ldr	r1, [pc, #120]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4918      	ldr	r1, [pc, #96]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4914      	ldr	r1, [pc, #80]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d021      	beq.n	8002c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <HAL_GPIO_Init+0x2d0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e021      	b.n	8002c1e <HAL_GPIO_Init+0x2e2>
 8002bda:	bf00      	nop
 8002bdc:	10320000 	.word	0x10320000
 8002be0:	10310000 	.word	0x10310000
 8002be4:	10220000 	.word	0x10220000
 8002be8:	10210000 	.word	0x10210000
 8002bec:	10120000 	.word	0x10120000
 8002bf0:	10110000 	.word	0x10110000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	40010c00 	.word	0x40010c00
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4909      	ldr	r1, [pc, #36]	@ (8002c40 <HAL_GPIO_Init+0x304>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	3301      	adds	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f47f ae8e 	bne.w	8002950 <HAL_GPIO_Init+0x14>
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	372c      	adds	r7, #44	@ 0x2c
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e001      	b.n	8002c66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	807b      	strh	r3, [r7, #2]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c82:	787b      	ldrb	r3, [r7, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c88:	887a      	ldrh	r2, [r7, #2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c8e:	e003      	b.n	8002c98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	041a      	lsls	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	611a      	str	r2, [r3, #16]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	420e0020 	.word	0x420e0020

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e272      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b89      	ldr	r3, [pc, #548]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x12c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e24c      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76>
 8002d24:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7f      	ldr	r2, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b78      	ldr	r3, [pc, #480]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xbc>
 8002d5e:	4b72      	ldr	r3, [pc, #456]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a71      	ldr	r2, [pc, #452]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b68      	ldr	r3, [pc, #416]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff f83c 	bl	8001e14 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f838 	bl	8001e14 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	@ 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e200      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe4>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f828 	bl	8001e14 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f824 	bl	8001e14 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1ec      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x10c>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b4c      	ldr	r3, [pc, #304]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e02:	4b49      	ldr	r3, [pc, #292]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
 8002e0e:	4b46      	ldr	r3, [pc, #280]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1c0      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4939      	ldr	r1, [pc, #228]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe ffdd 	bl	8001e14 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe ffd9 	bl	8001e14 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e1a1      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4927      	ldr	r1, [pc, #156]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe ffbc 	bl	8001e14 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe ffb8 	bl	8001e14 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e180      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe ff9c 	bl	8001e14 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe ff98 	bl	8001e14 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e160      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 faba 	bl	8003478 <RCC_Delay>
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe ff82 	bl	8001e14 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe ff7e 	bl	8001e14 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d908      	bls.n	8002f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e146      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b92      	ldr	r3, [pc, #584]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e9      	bne.n	8002f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b8b      	ldr	r3, [pc, #556]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a87      	ldr	r2, [pc, #540]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b85      	ldr	r3, [pc, #532]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b82      	ldr	r3, [pc, #520]	@ (8003184 <HAL_RCC_OscConfig+0x4c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <HAL_RCC_OscConfig+0x4c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003184 <HAL_RCC_OscConfig+0x4c8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe ff3f 	bl	8001e14 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe ff3b 	bl	8001e14 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	@ 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e103      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <HAL_RCC_OscConfig+0x4c8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e02d      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a69      	ldr	r2, [pc, #420]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b67      	ldr	r3, [pc, #412]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a66      	ldr	r2, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x356>
 8002ff8:	4b61      	ldr	r3, [pc, #388]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a60      	ldr	r2, [pc, #384]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b5e      	ldr	r3, [pc, #376]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a5d      	ldr	r2, [pc, #372]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8003012:	4b5b      	ldr	r3, [pc, #364]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b58      	ldr	r3, [pc, #352]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a57      	ldr	r2, [pc, #348]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe feef 	bl	8001e14 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe feeb 	bl	8001e14 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0b1      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b4b      	ldr	r3, [pc, #300]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x37e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe fed9 	bl	8001e14 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fe fed5 	bl	8001e14 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e09b      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b40      	ldr	r3, [pc, #256]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b3c      	ldr	r3, [pc, #240]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a3b      	ldr	r2, [pc, #236]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8087 	beq.w	80031b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	4b36      	ldr	r3, [pc, #216]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d061      	beq.n	8003174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d146      	bne.n	8003146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b33      	ldr	r3, [pc, #204]	@ (8003188 <HAL_RCC_OscConfig+0x4cc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe fea9 	bl	8001e14 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe fea5 	bl	8001e14 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e06d      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ee:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4921      	ldr	r1, [pc, #132]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	430b      	orrs	r3, r1
 8003112:	491b      	ldr	r1, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b1b      	ldr	r3, [pc, #108]	@ (8003188 <HAL_RCC_OscConfig+0x4cc>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe fe79 	bl	8001e14 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fe75 	bl	8001e14 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e03d      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
 8003144:	e035      	b.n	80031b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <HAL_RCC_OscConfig+0x4cc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fe62 	bl	8001e14 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fe5e 	bl	8001e14 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e026      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x498>
 8003172:	e01e      	b.n	80031b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e019      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
 8003188:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_OscConfig+0x500>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0d0      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d910      	bls.n	8003204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b67      	ldr	r3, [pc, #412]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0207 	bic.w	r2, r3, #7
 80031ea:	4965      	ldr	r1, [pc, #404]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b63      	ldr	r3, [pc, #396]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0b8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a58      	ldr	r2, [pc, #352]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003234:	4b53      	ldr	r3, [pc, #332]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a52      	ldr	r2, [pc, #328]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800323e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	494d      	ldr	r1, [pc, #308]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d040      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d115      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e073      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4936      	ldr	r1, [pc, #216]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fdb0 	bl	8001e14 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fdac 	bl	8001e14 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e053      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b27      	ldr	r3, [pc, #156]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d210      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4922      	ldr	r1, [pc, #136]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e032      	b.n	8003376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4916      	ldr	r1, [pc, #88]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800333a:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	490e      	ldr	r1, [pc, #56]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800334e:	f000 f821 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003352:	4602      	mov	r2, r0
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	490a      	ldr	r1, [pc, #40]	@ (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_ClockConfig+0x1cc>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_RCC_ClockConfig+0x1d0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fd0e 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40022000 	.word	0x40022000
 8003384:	40021000 	.word	0x40021000
 8003388:	08007a20 	.word	0x08007a20
 800338c:	20000008 	.word	0x20000008
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x94>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x30>
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x36>
 80033c2:	e027      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_RCC_GetSysClockFreq+0x98>)
 80033c6:	613b      	str	r3, [r7, #16]
      break;
 80033c8:	e027      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x94>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0c5b      	lsrs	r3, r3, #17
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	4a11      	ldr	r2, [pc, #68]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a0d      	ldr	r2, [pc, #52]	@ (800342c <HAL_RCC_GetSysClockFreq+0x98>)
 80033f6:	fb03 f202 	mul.w	r2, r3, r2
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e004      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0c      	ldr	r2, [pc, #48]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	613b      	str	r3, [r7, #16]
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetSysClockFreq+0x98>)
 8003416:	613b      	str	r3, [r7, #16]
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	693b      	ldr	r3, [r7, #16]
}
 800341c:	4618      	mov	r0, r3
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	007a1200 	.word	0x007a1200
 8003430:	08007a38 	.word	0x08007a38
 8003434:	08007a48 	.word	0x08007a48
 8003438:	003d0900 	.word	0x003d0900

0800343c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b02      	ldr	r3, [pc, #8]	@ (800344c <HAL_RCC_GetHCLKFreq+0x10>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000008 	.word	0x20000008

08003450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003454:	f7ff fff2 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0adb      	lsrs	r3, r3, #11
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4903      	ldr	r1, [pc, #12]	@ (8003474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08007a30 	.word	0x08007a30

08003478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003480:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <RCC_Delay+0x34>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <RCC_Delay+0x38>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0a5b      	lsrs	r3, r3, #9
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003494:	bf00      	nop
  }
  while (Delay --);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	60fa      	str	r2, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f9      	bne.n	8003494 <RCC_Delay+0x1c>
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	20000008 	.word	0x20000008
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d07d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	61d3      	str	r3, [r2, #28]
 80034ec:	4b49      	ldr	r3, [pc, #292]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	4b46      	ldr	r3, [pc, #280]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d118      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003508:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a42      	ldr	r2, [pc, #264]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003514:	f7fe fc7e 	bl	8001e14 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	e008      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7fe fc7a 	bl	8001e14 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e06d      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b3a      	ldr	r3, [pc, #232]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003542:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02e      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	429a      	cmp	r2, r3
 8003556:	d027      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003558:	4b2e      	ldr	r3, [pc, #184]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003560:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003562:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003568:	4b2c      	ldr	r3, [pc, #176]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800356e:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d014      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fe fc49 	bl	8001e14 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fc45 	bl	8001e14 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e036      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4917      	ldr	r1, [pc, #92]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	490b      	ldr	r1, [pc, #44]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4904      	ldr	r1, [pc, #16]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	42420440 	.word	0x42420440

08003620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b10      	cmp	r3, #16
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b10      	cmp	r3, #16
 8003646:	f200 808a 	bhi.w	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d045      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d075      	beq.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003656:	e082      	b.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003658:	4b46      	ldr	r3, [pc, #280]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800365e:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07b      	beq.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0c9b      	lsrs	r3, r3, #18
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	4a41      	ldr	r2, [pc, #260]	@ (8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003674:	5cd3      	ldrb	r3, [r2, r3]
 8003676:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003682:	4b3c      	ldr	r3, [pc, #240]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0c5b      	lsrs	r3, r3, #17
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	4a3b      	ldr	r2, [pc, #236]	@ (800377c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800369c:	4a38      	ldr	r2, [pc, #224]	@ (8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e004      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c4:	d102      	bne.n	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	61bb      	str	r3, [r7, #24]
      break;
 80036ca:	e04a      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
      break;
 80036da:	e042      	b.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80036dc:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ec:	d108      	bne.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80036f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	e01f      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800370a:	d109      	bne.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003718:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e00f      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800372a:	d11c      	bne.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003738:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800373c:	61bb      	str	r3, [r7, #24]
      break;
 800373e:	e012      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003742:	f7ff fe85 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8003746:	4602      	mov	r2, r0
 8003748:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0b9b      	lsrs	r3, r3, #14
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	3301      	adds	r3, #1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	61bb      	str	r3, [r7, #24]
      break;
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003766:	bf00      	nop
    }
  }
  return (frequency);
 8003768:	69bb      	ldr	r3, [r7, #24]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	08007a4c 	.word	0x08007a4c
 800377c:	08007a5c 	.word	0x08007a5c
 8003780:	007a1200 	.word	0x007a1200
 8003784:	003d0900 	.word	0x003d0900
 8003788:	aaaaaaab 	.word	0xaaaaaaab

0800378c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07a      	b.n	8003898 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	7c5b      	ldrb	r3, [r3, #17]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe f998 	bl	8001ae8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f870 	bl	80038a4 <HAL_RTC_WaitForSynchro>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2204      	movs	r2, #4
 80037ce:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e061      	b.n	8003898 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f892 	bl	80038fe <RTC_EnterInitMode>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e056      	b.n	8003898 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0207 	bic.w	r2, r2, #7
 80037f8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RTC_Init+0x114>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a26      	ldr	r2, [pc, #152]	@ (80038a0 <HAL_RTC_Init+0x114>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RTC_Init+0x114>)
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4921      	ldr	r1, [pc, #132]	@ (80038a0 <HAL_RTC_Init+0x114>)
 800381c:	4313      	orrs	r3, r2
 800381e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d003      	beq.n	8003832 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e00e      	b.n	8003850 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003832:	2001      	movs	r0, #1
 8003834:	f7ff fef4 	bl	8003620 <HAL_RCCEx_GetPeriphCLKFreq>
 8003838:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2204      	movs	r2, #4
 8003844:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e026      	b.n	8003898 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b01      	subs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	0c1a      	lsrs	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 020f 	and.w	r2, r2, #15
 800385c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	b292      	uxth	r2, r2
 8003866:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f870 	bl	800394e <RTC_ExitInitMode>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2204      	movs	r2, #4
 8003878:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00c      	b.n	8003898 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40006c00 	.word	0x40006c00

080038a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e01d      	b.n	80038f6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80038ca:	f7fe faa3 	bl	8001e14 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038d0:	e009      	b.n	80038e6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038d2:	f7fe fa9f 	bl	8001e14 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038e0:	d901      	bls.n	80038e6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e007      	b.n	80038f6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800390a:	f7fe fa83 	bl	8001e14 <HAL_GetTick>
 800390e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003910:	e009      	b.n	8003926 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003912:	f7fe fa7f 	bl	8001e14 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003920:	d901      	bls.n	8003926 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e00f      	b.n	8003946 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0210 	orr.w	r2, r2, #16
 8003942:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0210 	bic.w	r2, r2, #16
 8003968:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800396a:	f7fe fa53 	bl	8001e14 <HAL_GetTick>
 800396e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003970:	e009      	b.n	8003986 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003972:	f7fe fa4f 	bl	8001e14 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003980:	d901      	bls.n	8003986 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e007      	b.n	8003996 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ee      	beq.n	8003972 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d027      	beq.n	8003a04 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f81b 	bl	8003a0c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0204 	mvn.w	r2, #4
 80039de:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	745a      	strb	r2, [r3, #17]
 80039e6:	e005      	b.n	80039f4 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fd55 	bl	8001498 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e041      	b.n	8003ab4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe f87b 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fa73 	bl	8003f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e03a      	b.n	8003b4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_TIM_Base_Start_IT+0x98>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afe:	d009      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x58>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <HAL_TIM_Base_Start_IT+0xa0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d111      	bne.n	8003b38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d010      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b36:	e007      	b.n	8003b48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800

08003b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0202 	mvn.w	r2, #2
 8003b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9b4 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9a7 	bl	8003efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9b6 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0204 	mvn.w	r2, #4
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f98a 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f97d 	bl	8003efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f98c 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0208 	mvn.w	r2, #8
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f960 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f953 	bl	8003efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f962 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0210 	mvn.w	r2, #16
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f936 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f929 	bl	8003efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f938 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0201 	mvn.w	r2, #1
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fc36 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfc:	2b80      	cmp	r3, #128	@ 0x80
 8003cfe:	d107      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa7b 	bl	8004206 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8fc 	bl	8003f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0220 	mvn.w	r2, #32
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa46 	bl	80041f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0b4      	b.n	8003ef6 <HAL_TIM_ConfigClockSource+0x186>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc4:	d03e      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0xd4>
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dca:	f200 8087 	bhi.w	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	f000 8086 	beq.w	8003ee2 <HAL_TIM_ConfigClockSource+0x172>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d87f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b70      	cmp	r3, #112	@ 0x70
 8003dde:	d01a      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xa6>
 8003de0:	2b70      	cmp	r3, #112	@ 0x70
 8003de2:	d87b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b60      	cmp	r3, #96	@ 0x60
 8003de6:	d050      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x11a>
 8003de8:	2b60      	cmp	r3, #96	@ 0x60
 8003dea:	d877      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b50      	cmp	r3, #80	@ 0x50
 8003dee:	d03c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xfa>
 8003df0:	2b50      	cmp	r3, #80	@ 0x50
 8003df2:	d873      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	d058      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x13a>
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d86f      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b30      	cmp	r3, #48	@ 0x30
 8003dfe:	d064      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	2b30      	cmp	r3, #48	@ 0x30
 8003e02:	d86b      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d060      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d867      	bhi.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d05a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	e062      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e26:	f000 f968 	bl	80040fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]
      break;
 8003e42:	e04f      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e54:	f000 f951 	bl	80040fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e66:	609a      	str	r2, [r3, #8]
      break;
 8003e68:	e03c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 f8c8 	bl	800400c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2150      	movs	r1, #80	@ 0x50
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f91f 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e02c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e96:	461a      	mov	r2, r3
 8003e98:	f000 f8e6 	bl	8004068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2160      	movs	r1, #96	@ 0x60
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f90f 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e01c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 f8a8 	bl	800400c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2140      	movs	r1, #64	@ 0x40
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f8ff 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f000 f8f6 	bl	80040c6 <TIM_ITRx_SetConfig>
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a29      	ldr	r2, [pc, #164]	@ (8004000 <TIM_Base_SetConfig+0xb8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_Base_SetConfig+0x30>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d007      	beq.n	8003f78 <TIM_Base_SetConfig+0x30>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <TIM_Base_SetConfig+0xbc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0x30>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <TIM_Base_SetConfig+0xc0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d108      	bne.n	8003f8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004000 <TIM_Base_SetConfig+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0x62>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <TIM_Base_SetConfig+0xbc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	@ (8004008 <TIM_Base_SetConfig+0xc0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <TIM_Base_SetConfig+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800

0800400c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 030a 	bic.w	r3, r3, #10
 8004048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0210 	bic.w	r2, r3, #16
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f043 0307 	orr.w	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	431a      	orrs	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	609a      	str	r2, [r3, #8]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800414c:	2302      	movs	r3, #2
 800414e:	e046      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a16      	ldr	r2, [pc, #88]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800

080041f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <newBuffer>:
#define SLIP_ESC                0xDB
#define SLIP_ESC_END            0xDC
#define SLIP_ESC_ESC            0xDD

Buffer* newBuffer(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
    Buffer* _newBuff = (Buffer*)malloc(sizeof(Buffer));
 800421e:	200c      	movs	r0, #12
 8004220:	f002 fb4e 	bl	80068c0 <malloc>
 8004224:	4603      	mov	r3, r0
 8004226:	607b      	str	r3, [r7, #4]
    if (_newBuff != BUFF_NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <newBuffer+0x28>
    {
        _newBuff->data = BUFF_NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
        _newBuff->length = 0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	809a      	strh	r2, [r3, #4]
        _newBuff->link = BUFF_NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
    }
    return _newBuff;
 8004240:	687b      	ldr	r3, [r7, #4]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <Buffer_AddData>:

Buff_ReturnType Buffer_AddData(Buffer* buff, uint8_t* u8DataPtr, uint16_t length)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b088      	sub	sp, #32
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
    Buffer* _buff = buff;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	61fb      	str	r3, [r7, #28]
    Buffer* head_buff = buff;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	61bb      	str	r3, [r7, #24]
    
    while (_buff != BUFF_NULL)
 8004260:	e033      	b.n	80042ca <Buffer_AddData+0x80>
    {
        if (_buff->length != 0 && _buff->data != BUFF_NULL)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	889b      	ldrh	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <Buffer_AddData+0x34>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <Buffer_AddData+0x34>
        {
            head_buff = _buff;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	61bb      	str	r3, [r7, #24]
            _buff = _buff->link;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e025      	b.n	80042ca <Buffer_AddData+0x80>
        }
        else
        {
            _buff->data = (uint8_t*)malloc(length);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	4618      	mov	r0, r3
 8004282:	f002 fb1d 	bl	80068c0 <malloc>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	601a      	str	r2, [r3, #0]
            if (_buff->data == BUFF_NULL)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <Buffer_AddData+0x50>
            {
                return BUFF_NOT_OK;
 8004296:	2301      	movs	r3, #1
 8004298:	e058      	b.n	800434c <Buffer_AddData+0x102>
            }

            for (uint16_t countByte = 0; countByte < length; countByte++)
 800429a:	2300      	movs	r3, #0
 800429c:	82fb      	strh	r3, [r7, #22]
 800429e:	e00b      	b.n	80042b8 <Buffer_AddData+0x6e>
            {
                _buff->data[countByte] = u8DataPtr[countByte];
 80042a0:	8afb      	ldrh	r3, [r7, #22]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	441a      	add	r2, r3
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	8afb      	ldrh	r3, [r7, #22]
 80042ac:	440b      	add	r3, r1
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	701a      	strb	r2, [r3, #0]
            for (uint16_t countByte = 0; countByte < length; countByte++)
 80042b2:	8afb      	ldrh	r3, [r7, #22]
 80042b4:	3301      	adds	r3, #1
 80042b6:	82fb      	strh	r3, [r7, #22]
 80042b8:	8afa      	ldrh	r2, [r7, #22]
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d3ef      	bcc.n	80042a0 <Buffer_AddData+0x56>
            }
            _buff->length = length;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	809a      	strh	r2, [r3, #4]
            return BUFF_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e040      	b.n	800434c <Buffer_AddData+0x102>
    while (_buff != BUFF_NULL)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1c8      	bne.n	8004262 <Buffer_AddData+0x18>
        }
    }

    _buff = (Buffer*)malloc(sizeof(Buffer));
 80042d0:	200c      	movs	r0, #12
 80042d2:	f002 faf5 	bl	80068c0 <malloc>
 80042d6:	4603      	mov	r3, r0
 80042d8:	61fb      	str	r3, [r7, #28]
    if (_buff == BUFF_NULL)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <Buffer_AddData+0x9a>
    {
        return BUFF_NOT_OK;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e033      	b.n	800434c <Buffer_AddData+0x102>
    }

    _buff->data = (uint8_t*)malloc(length);
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 faea 	bl	80068c0 <malloc>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	601a      	str	r2, [r3, #0]
    if (_buff->data == BUFF_NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <Buffer_AddData+0xbc>
    {
        free(_buff);
 80042fc:	69f8      	ldr	r0, [r7, #28]
 80042fe:	f002 fae7 	bl	80068d0 <free>
        return BUFF_NOT_OK;
 8004302:	2301      	movs	r3, #1
 8004304:	e022      	b.n	800434c <Buffer_AddData+0x102>
    }

    _buff->length = 0;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2200      	movs	r2, #0
 800430a:	809a      	strh	r2, [r3, #4]
    _buff->link = BUFF_NULL;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
    if (head_buff != BUFF_NULL)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <Buffer_AddData+0xd4>
    {
        head_buff->link = _buff;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	609a      	str	r2, [r3, #8]
    }

    for (uint16_t countByte = 0; countByte < length; countByte++)
 800431e:	2300      	movs	r3, #0
 8004320:	82bb      	strh	r3, [r7, #20]
 8004322:	e00b      	b.n	800433c <Buffer_AddData+0xf2>
    {
        _buff->data[countByte] = u8DataPtr[countByte];
 8004324:	8abb      	ldrh	r3, [r7, #20]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	441a      	add	r2, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	8abb      	ldrh	r3, [r7, #20]
 8004330:	440b      	add	r3, r1
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
    for (uint16_t countByte = 0; countByte < length; countByte++)
 8004336:	8abb      	ldrh	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	82bb      	strh	r3, [r7, #20]
 800433c:	8aba      	ldrh	r2, [r7, #20]
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	429a      	cmp	r2, r3
 8004342:	d3ef      	bcc.n	8004324 <Buffer_AddData+0xda>
    }
    _buff->length = length;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	809a      	strh	r2, [r3, #4]
    return BUFF_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <Buffer_AppendData>:
    *length = _buff->length;
    return BUFF_OK;
}

Buff_ReturnType Buffer_AppendData(Buffer* buff, uint16_t position, uint8_t* u8DataPtr, uint16_t length)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	461a      	mov	r2, r3
 8004360:	460b      	mov	r3, r1
 8004362:	817b      	strh	r3, [r7, #10]
 8004364:	4613      	mov	r3, r2
 8004366:	813b      	strh	r3, [r7, #8]
    Buffer* _buff = buff;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	61fb      	str	r3, [r7, #28]
    uint16_t Count = Buffer_CountData(buff);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f916 	bl	800459e <Buffer_CountData>
 8004372:	4603      	mov	r3, r0
 8004374:	82fb      	strh	r3, [r7, #22]

    if (position >= Count)
 8004376:	897a      	ldrh	r2, [r7, #10]
 8004378:	8afb      	ldrh	r3, [r7, #22]
 800437a:	429a      	cmp	r2, r3
 800437c:	d301      	bcc.n	8004382 <Buffer_AppendData+0x2e>
    {
        return BUFF_NOT_OK;
 800437e:	2301      	movs	r3, #1
 8004380:	e03f      	b.n	8004402 <Buffer_AppendData+0xae>
    }

    for (uint16_t countData = 0; countData < position; countData++)
 8004382:	2300      	movs	r3, #0
 8004384:	837b      	strh	r3, [r7, #26]
 8004386:	e005      	b.n	8004394 <Buffer_AppendData+0x40>
    {
        _buff = _buff->link;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	61fb      	str	r3, [r7, #28]
    for (uint16_t countData = 0; countData < position; countData++)
 800438e:	8b7b      	ldrh	r3, [r7, #26]
 8004390:	3301      	adds	r3, #1
 8004392:	837b      	strh	r3, [r7, #26]
 8004394:	8b7a      	ldrh	r2, [r7, #26]
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	429a      	cmp	r2, r3
 800439a:	d3f5      	bcc.n	8004388 <Buffer_AppendData+0x34>
    }

    uint8_t* newdata = (uint8_t*)realloc(_buff->data, _buff->length + length);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	889b      	ldrh	r3, [r3, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	440b      	add	r3, r1
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f002 fb45 	bl	8006a3c <realloc>
 80043b2:	6138      	str	r0, [r7, #16]
    if (newdata == BUFF_NULL)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <Buffer_AppendData+0x6a>
    {
        return BUFF_NOT_OK;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e021      	b.n	8004402 <Buffer_AppendData+0xae>
    }
    _buff->data = newdata;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	601a      	str	r2, [r3, #0]

    for (uint16_t countByte = 0; countByte < length; countByte++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	833b      	strh	r3, [r7, #24]
 80043c8:	e00f      	b.n	80043ea <Buffer_AppendData+0x96>
    {
        _buff->data[_buff->length + countByte] = u8DataPtr[countByte];
 80043ca:	8b3b      	ldrh	r3, [r7, #24]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	441a      	add	r2, r3
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69f9      	ldr	r1, [r7, #28]
 80043d6:	8889      	ldrh	r1, [r1, #4]
 80043d8:	4608      	mov	r0, r1
 80043da:	8b39      	ldrh	r1, [r7, #24]
 80043dc:	4401      	add	r1, r0
 80043de:	440b      	add	r3, r1
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
    for (uint16_t countByte = 0; countByte < length; countByte++)
 80043e4:	8b3b      	ldrh	r3, [r7, #24]
 80043e6:	3301      	adds	r3, #1
 80043e8:	833b      	strh	r3, [r7, #24]
 80043ea:	8b3a      	ldrh	r2, [r7, #24]
 80043ec:	893b      	ldrh	r3, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3eb      	bcc.n	80043ca <Buffer_AppendData+0x76>
    }
    _buff->length = _buff->length + length;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	889a      	ldrh	r2, [r3, #4]
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	4413      	add	r3, r2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	809a      	strh	r2, [r3, #4]

    return BUFF_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <array_equal>:
    }
    return BUFF_OK;
}

Buff_ReturnType array_equal(const uint8_t* array1, uint16_t size1, const uint8_t* array2, uint16_t size2)
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	461a      	mov	r2, r3
 8004416:	460b      	mov	r3, r1
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	4613      	mov	r3, r2
 800441c:	813b      	strh	r3, [r7, #8]
    int flag = BUFF_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]

    if (size1 != size2)
 8004422:	897a      	ldrh	r2, [r7, #10]
 8004424:	893b      	ldrh	r3, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	d003      	beq.n	8004432 <array_equal+0x28>
    {
        return flag = BUFF_NOT_OK;
 800442a:	2301      	movs	r3, #1
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	2301      	movs	r3, #1
 8004430:	e019      	b.n	8004466 <array_equal+0x5c>
    }

    for (uint16_t i = 0; i < size1; ++i)
 8004432:	2300      	movs	r3, #0
 8004434:	82fb      	strh	r3, [r7, #22]
 8004436:	e010      	b.n	800445a <array_equal+0x50>
    {
        if (array1[i] != array2[i])
 8004438:	8afb      	ldrh	r3, [r7, #22]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	8afb      	ldrh	r3, [r7, #22]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	440b      	add	r3, r1
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d003      	beq.n	8004454 <array_equal+0x4a>
        {
            return flag = BUFF_NOT_OK;
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	2301      	movs	r3, #1
 8004452:	e008      	b.n	8004466 <array_equal+0x5c>
    for (uint16_t i = 0; i < size1; ++i)
 8004454:	8afb      	ldrh	r3, [r7, #22]
 8004456:	3301      	adds	r3, #1
 8004458:	82fb      	strh	r3, [r7, #22]
 800445a:	8afa      	ldrh	r2, [r7, #22]
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3ea      	bcc.n	8004438 <array_equal+0x2e>
        }
    }
    return flag;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	b2db      	uxtb	r3, r3
}
 8004466:	4618      	mov	r0, r3
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <Buffer_SearchData>:

Buff_ReturnType Buffer_SearchData(Buffer* buff, uint8_t* u8DataPtr, uint16_t length, uint16_t* position)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	80fb      	strh	r3, [r7, #6]
    Buffer* _buff = buff;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	617b      	str	r3, [r7, #20]
    uint16_t pos = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	827b      	strh	r3, [r7, #18]

    while (_buff != BUFF_NULL)
 8004488:	e015      	b.n	80044b6 <Buffer_SearchData+0x46>
    {
        if (BUFF_OK == array_equal(_buff->data, _buff->length, u8DataPtr, length))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	8899      	ldrh	r1, [r3, #4]
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	f7ff ffb8 	bl	800440a <array_equal>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <Buffer_SearchData+0x3a>
        {
            *position = pos;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	8a7a      	ldrh	r2, [r7, #18]
 80044a4:	801a      	strh	r2, [r3, #0]
            return BUFF_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e00c      	b.n	80044c4 <Buffer_SearchData+0x54>
        }

        pos++;
 80044aa:	8a7b      	ldrh	r3, [r7, #18]
 80044ac:	3301      	adds	r3, #1
 80044ae:	827b      	strh	r3, [r7, #18]
        _buff = _buff->link;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	617b      	str	r3, [r7, #20]
    while (_buff != BUFF_NULL)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e6      	bne.n	800448a <Buffer_SearchData+0x1a>
    }
    pos = 0xFFFF;
 80044bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044c0:	827b      	strh	r3, [r7, #18]
    return BUFF_NOT_OK;
 80044c2:	2301      	movs	r3, #1
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <Buffer_DeleteData>:
    buff->link = BUFF_NULL;
    return BUFF_OK;
}

Buff_ReturnType Buffer_DeleteData(Buffer* buff, uint16_t position)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
    Buffer* lastbuff = buff;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	617b      	str	r3, [r7, #20]
    Buffer* currbuff = buff;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	613b      	str	r3, [r7, #16]

    uint16_t Count = Buffer_CountData(buff);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f85c 	bl	800459e <Buffer_CountData>
 80044e6:	4603      	mov	r3, r0
 80044e8:	81bb      	strh	r3, [r7, #12]

    if (position >= Count)
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	89bb      	ldrh	r3, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d301      	bcc.n	80044f6 <Buffer_DeleteData+0x2a>
    {
        return BUFF_NOT_OK;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e04f      	b.n	8004596 <Buffer_DeleteData+0xca>
    }

    for (uint16_t countData = 0; countData < (Count - 1); countData++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	81fb      	strh	r3, [r7, #14]
 80044fa:	e025      	b.n	8004548 <Buffer_DeleteData+0x7c>
    {
        if (countData >= position)
 80044fc:	89fa      	ldrh	r2, [r7, #14]
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	429a      	cmp	r2, r3
 8004502:	d319      	bcc.n	8004538 <Buffer_DeleteData+0x6c>
        {
            if (currbuff->data != BUFF_NULL && countData == position)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <Buffer_DeleteData+0x58>
 800450c:	89fa      	ldrh	r2, [r7, #14]
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <Buffer_DeleteData+0x58>
            {
                free(currbuff->data);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f002 f9d9 	bl	80068d0 <free>
                currbuff->data = NULL;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
            }
            currbuff->data = currbuff->link->data;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	601a      	str	r2, [r3, #0]
            currbuff->length = currbuff->link->length;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	889a      	ldrh	r2, [r3, #4]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	809a      	strh	r2, [r3, #4]
        }
        lastbuff = currbuff;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	617b      	str	r3, [r7, #20]
        currbuff = currbuff->link;       
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
    for (uint16_t countData = 0; countData < (Count - 1); countData++)
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	3301      	adds	r3, #1
 8004546:	81fb      	strh	r3, [r7, #14]
 8004548:	89fa      	ldrh	r2, [r7, #14]
 800454a:	89bb      	ldrh	r3, [r7, #12]
 800454c:	3b01      	subs	r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	dbd4      	blt.n	80044fc <Buffer_DeleteData+0x30>
    }

    lastbuff->link = BUFF_NULL;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
    if (Count == 1)
 8004558:	89bb      	ldrh	r3, [r7, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d115      	bne.n	800458a <Buffer_DeleteData+0xbe>
    {
        if (currbuff->data != BUFF_NULL)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <Buffer_DeleteData+0xaa>
        {
            free(currbuff->data);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f002 f9b0 	bl	80068d0 <free>
            currbuff->data = NULL;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
        }
        currbuff->data = BUFF_NULL;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
        currbuff->length = 0;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2200      	movs	r2, #0
 8004580:	809a      	strh	r2, [r3, #4]
        currbuff->link = BUFF_NULL;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	e004      	b.n	8004594 <Buffer_DeleteData+0xc8>
    }
    else
    {
        free(currbuff);
 800458a:	6938      	ldr	r0, [r7, #16]
 800458c:	f002 f9a0 	bl	80068d0 <free>
        currbuff = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
    }

    return BUFF_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <Buffer_CountData>:

uint16_t Buffer_CountData(Buffer* buff)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
    Buffer* _buff = buff;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
    uint16_t countData = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	817b      	strh	r3, [r7, #10]

    while (_buff != BUFF_NULL)
 80045ae:	e005      	b.n	80045bc <Buffer_CountData+0x1e>
    {
        countData++;
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	3301      	adds	r3, #1
 80045b4:	817b      	strh	r3, [r7, #10]
        _buff = _buff->link;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60fb      	str	r3, [r7, #12]
    while (_buff != BUFF_NULL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f6      	bne.n	80045b0 <Buffer_CountData+0x12>
    }
    return countData;
 80045c2:	897b      	ldrh	r3, [r7, #10]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <Buffer_Dispose>:

void Buffer_Dispose(Buffer* buff)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
    uint16_t nbData = Buffer_CountData(buff);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff ffe1 	bl	800459e <Buffer_CountData>
 80045dc:	4603      	mov	r3, r0
 80045de:	81bb      	strh	r3, [r7, #12]
    for (uint16_t countData = 0; countData < nbData; countData++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	81fb      	strh	r3, [r7, #14]
 80045e4:	e006      	b.n	80045f4 <Buffer_Dispose+0x26>
    {
        Buffer_DeleteData(buff, 0);
 80045e6:	2100      	movs	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ff6f 	bl	80044cc <Buffer_DeleteData>
    for (uint16_t countData = 0; countData < nbData; countData++)
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	3301      	adds	r3, #1
 80045f2:	81fb      	strh	r3, [r7, #14]
 80045f4:	89fa      	ldrh	r2, [r7, #14]
 80045f6:	89bb      	ldrh	r3, [r7, #12]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3f4      	bcc.n	80045e6 <Buffer_Dispose+0x18>
    }
    free(buff);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f002 f967 	bl	80068d0 <free>
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <Buffer_SlipEnc>:
    }
    return buff;
}

Buffer* Buffer_SlipEnc(uint8_t* u8DataPtr, uint16_t length)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]
    uint8_t _data[2];
    Buffer* buff = newBuffer();
 8004616:	f7ff fdff 	bl	8004218 <newBuffer>
 800461a:	6138      	str	r0, [r7, #16]

    _data[0] = SLIP_END;
 800461c:	23c0      	movs	r3, #192	@ 0xc0
 800461e:	733b      	strb	r3, [r7, #12]
    if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, _data, 1))
 8004620:	f107 020c 	add.w	r2, r7, #12
 8004624:	2301      	movs	r3, #1
 8004626:	2100      	movs	r1, #0
 8004628:	6938      	ldr	r0, [r7, #16]
 800462a:	f7ff fe93 	bl	8004354 <Buffer_AppendData>
 800462e:	4603      	mov	r3, r0
 8004630:	2b01      	cmp	r3, #1
 8004632:	d104      	bne.n	800463e <Buffer_SlipEnc+0x34>
    {
        Buffer_Dispose(buff);
 8004634:	6938      	ldr	r0, [r7, #16]
 8004636:	f7ff ffca 	bl	80045ce <Buffer_Dispose>
        return BUFF_NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	e061      	b.n	8004702 <Buffer_SlipEnc+0xf8>
    }

    for (uint16_t countByte = 0; countByte < length; ++countByte)
 800463e:	2300      	movs	r3, #0
 8004640:	82fb      	strh	r3, [r7, #22]
 8004642:	e048      	b.n	80046d6 <Buffer_SlipEnc+0xcc>
    {
        if (u8DataPtr[countByte] == SLIP_END)
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2bc0      	cmp	r3, #192	@ 0xc0
 800464e:	d112      	bne.n	8004676 <Buffer_SlipEnc+0x6c>
        {
            _data[0] = SLIP_ESC;
 8004650:	23db      	movs	r3, #219	@ 0xdb
 8004652:	733b      	strb	r3, [r7, #12]
            _data[1] = SLIP_ESC_END;
 8004654:	23dc      	movs	r3, #220	@ 0xdc
 8004656:	737b      	strb	r3, [r7, #13]
            if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, _data, 2))
 8004658:	f107 020c 	add.w	r2, r7, #12
 800465c:	2302      	movs	r3, #2
 800465e:	2100      	movs	r1, #0
 8004660:	6938      	ldr	r0, [r7, #16]
 8004662:	f7ff fe77 	bl	8004354 <Buffer_AppendData>
 8004666:	4603      	mov	r3, r0
 8004668:	2b01      	cmp	r3, #1
 800466a:	d131      	bne.n	80046d0 <Buffer_SlipEnc+0xc6>
            {
                Buffer_Dispose(buff);
 800466c:	6938      	ldr	r0, [r7, #16]
 800466e:	f7ff ffae 	bl	80045ce <Buffer_Dispose>
                return BUFF_NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	e045      	b.n	8004702 <Buffer_SlipEnc+0xf8>
            }
        }
        else if (u8DataPtr[countByte] == SLIP_ESC)
 8004676:	8afb      	ldrh	r3, [r7, #22]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2bdb      	cmp	r3, #219	@ 0xdb
 8004680:	d112      	bne.n	80046a8 <Buffer_SlipEnc+0x9e>
        {
            _data[0] = SLIP_ESC;
 8004682:	23db      	movs	r3, #219	@ 0xdb
 8004684:	733b      	strb	r3, [r7, #12]
            _data[1] = SLIP_ESC_ESC;
 8004686:	23dd      	movs	r3, #221	@ 0xdd
 8004688:	737b      	strb	r3, [r7, #13]
            if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, _data, 2))
 800468a:	f107 020c 	add.w	r2, r7, #12
 800468e:	2302      	movs	r3, #2
 8004690:	2100      	movs	r1, #0
 8004692:	6938      	ldr	r0, [r7, #16]
 8004694:	f7ff fe5e 	bl	8004354 <Buffer_AppendData>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d118      	bne.n	80046d0 <Buffer_SlipEnc+0xc6>
            {
                Buffer_Dispose(buff);
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f7ff ff95 	bl	80045ce <Buffer_Dispose>
                return BUFF_NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e02c      	b.n	8004702 <Buffer_SlipEnc+0xf8>
            }
        }
        else
        {
            _data[0] = u8DataPtr[countByte];
 80046a8:	8afb      	ldrh	r3, [r7, #22]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	733b      	strb	r3, [r7, #12]
            if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, _data, 1))
 80046b2:	f107 020c 	add.w	r2, r7, #12
 80046b6:	2301      	movs	r3, #1
 80046b8:	2100      	movs	r1, #0
 80046ba:	6938      	ldr	r0, [r7, #16]
 80046bc:	f7ff fe4a 	bl	8004354 <Buffer_AppendData>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d104      	bne.n	80046d0 <Buffer_SlipEnc+0xc6>
            {
                Buffer_Dispose(buff);
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f7ff ff81 	bl	80045ce <Buffer_Dispose>
                return BUFF_NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e018      	b.n	8004702 <Buffer_SlipEnc+0xf8>
    for (uint16_t countByte = 0; countByte < length; ++countByte)
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	3301      	adds	r3, #1
 80046d4:	82fb      	strh	r3, [r7, #22]
 80046d6:	8afa      	ldrh	r2, [r7, #22]
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d3b2      	bcc.n	8004644 <Buffer_SlipEnc+0x3a>
            }
        }
    }

    _data[0] = SLIP_END;
 80046de:	23c0      	movs	r3, #192	@ 0xc0
 80046e0:	733b      	strb	r3, [r7, #12]
    if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, _data, 1))
 80046e2:	f107 020c 	add.w	r2, r7, #12
 80046e6:	2301      	movs	r3, #1
 80046e8:	2100      	movs	r1, #0
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f7ff fe32 	bl	8004354 <Buffer_AppendData>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d104      	bne.n	8004700 <Buffer_SlipEnc+0xf6>
    {
        Buffer_Dispose(buff);
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f7ff ff69 	bl	80045ce <Buffer_Dispose>
        return BUFF_NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <Buffer_SlipEnc+0xf8>
    }
    return buff;
 8004700:	693b      	ldr	r3, [r7, #16]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <Buffer_SlipDec>:

Buffer* Buffer_SlipDec(uint8_t* u8DataPtr, uint16_t length)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	807b      	strh	r3, [r7, #2]
    Buffer* buff = newBuffer();
 8004716:	f7ff fd7f 	bl	8004218 <newBuffer>
 800471a:	6138      	str	r0, [r7, #16]
    uint8_t u8Data_Last = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]
    uint8_t value = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]

    if(length == 1)
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <Buffer_SlipDec+0x24>
    { 
        return BUFF_NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	e070      	b.n	8004810 <Buffer_SlipDec+0x106>
    }

    for (uint16_t countByte = 0; countByte < length; ++countByte)
 800472e:	2300      	movs	r3, #0
 8004730:	82bb      	strh	r3, [r7, #20]
 8004732:	e065      	b.n	8004800 <Buffer_SlipDec+0xf6>
    {
        if (u8DataPtr[countByte] == SLIP_ESC)
 8004734:	8abb      	ldrh	r3, [r7, #20]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2bdb      	cmp	r3, #219	@ 0xdb
 800473e:	d102      	bne.n	8004746 <Buffer_SlipDec+0x3c>
        {
            u8Data_Last = SLIP_ESC;
 8004740:	23db      	movs	r3, #219	@ 0xdb
 8004742:	75fb      	strb	r3, [r7, #23]
 8004744:	e059      	b.n	80047fa <Buffer_SlipDec+0xf0>
        }
        else if (u8DataPtr[countByte] == SLIP_END)
 8004746:	8abb      	ldrh	r3, [r7, #20]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004750:	d10b      	bne.n	800476a <Buffer_SlipDec+0x60>
        {
            if (countByte == (length - 1))
 8004752:	8aba      	ldrh	r2, [r7, #20]
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	3b01      	subs	r3, #1
 8004758:	429a      	cmp	r2, r3
 800475a:	d101      	bne.n	8004760 <Buffer_SlipDec+0x56>
            {
                return buff;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	e057      	b.n	8004810 <Buffer_SlipDec+0x106>
            }
            else
            {
                Buffer_DeleteData(buff, 0);
 8004760:	2100      	movs	r1, #0
 8004762:	6938      	ldr	r0, [r7, #16]
 8004764:	f7ff feb2 	bl	80044cc <Buffer_DeleteData>
 8004768:	e047      	b.n	80047fa <Buffer_SlipDec+0xf0>
            }
        }
        else
        {
            if (u8Data_Last == SLIP_ESC)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2bdb      	cmp	r3, #219	@ 0xdb
 800476e:	d134      	bne.n	80047da <Buffer_SlipDec+0xd0>
            {
                u8Data_Last = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	75fb      	strb	r3, [r7, #23]
                if (u8DataPtr[countByte] == SLIP_ESC_END)
 8004774:	8abb      	ldrh	r3, [r7, #20]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2bdc      	cmp	r3, #220	@ 0xdc
 800477e:	d110      	bne.n	80047a2 <Buffer_SlipDec+0x98>
                {
                    value = SLIP_END;
 8004780:	23c0      	movs	r3, #192	@ 0xc0
 8004782:	73fb      	strb	r3, [r7, #15]
                    if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, &value, 1))
 8004784:	f107 020f 	add.w	r2, r7, #15
 8004788:	2301      	movs	r3, #1
 800478a:	2100      	movs	r1, #0
 800478c:	6938      	ldr	r0, [r7, #16]
 800478e:	f7ff fde1 	bl	8004354 <Buffer_AppendData>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d130      	bne.n	80047fa <Buffer_SlipDec+0xf0>
                    {
                        Buffer_Dispose(buff);
 8004798:	6938      	ldr	r0, [r7, #16]
 800479a:	f7ff ff18 	bl	80045ce <Buffer_Dispose>
                        return BUFF_NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	e036      	b.n	8004810 <Buffer_SlipDec+0x106>
                    }
                }
                else if (u8DataPtr[countByte] == SLIP_ESC_ESC)
 80047a2:	8abb      	ldrh	r3, [r7, #20]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2bdd      	cmp	r3, #221	@ 0xdd
 80047ac:	d110      	bne.n	80047d0 <Buffer_SlipDec+0xc6>
                {
                    value = SLIP_ESC;
 80047ae:	23db      	movs	r3, #219	@ 0xdb
 80047b0:	73fb      	strb	r3, [r7, #15]
                    if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, &value, 1))
 80047b2:	f107 020f 	add.w	r2, r7, #15
 80047b6:	2301      	movs	r3, #1
 80047b8:	2100      	movs	r1, #0
 80047ba:	6938      	ldr	r0, [r7, #16]
 80047bc:	f7ff fdca 	bl	8004354 <Buffer_AppendData>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d119      	bne.n	80047fa <Buffer_SlipDec+0xf0>
                    {
                        Buffer_Dispose(buff);
 80047c6:	6938      	ldr	r0, [r7, #16]
 80047c8:	f7ff ff01 	bl	80045ce <Buffer_Dispose>
                        return BUFF_NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e01f      	b.n	8004810 <Buffer_SlipDec+0x106>
                    }
                }
                else
                {
                    Buffer_Dispose(buff);
 80047d0:	6938      	ldr	r0, [r7, #16]
 80047d2:	f7ff fefc 	bl	80045ce <Buffer_Dispose>
                    return BUFF_NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e01a      	b.n	8004810 <Buffer_SlipDec+0x106>
                }
            }
            else
            {
                if (BUFF_NOT_OK == Buffer_AppendData(buff, 0, &u8DataPtr[countByte], 1))
 80047da:	8abb      	ldrh	r3, [r7, #20]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	441a      	add	r2, r3
 80047e0:	2301      	movs	r3, #1
 80047e2:	2100      	movs	r1, #0
 80047e4:	6938      	ldr	r0, [r7, #16]
 80047e6:	f7ff fdb5 	bl	8004354 <Buffer_AppendData>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d104      	bne.n	80047fa <Buffer_SlipDec+0xf0>
                {
                    Buffer_Dispose(buff);
 80047f0:	6938      	ldr	r0, [r7, #16]
 80047f2:	f7ff feec 	bl	80045ce <Buffer_Dispose>
                    return BUFF_NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e00a      	b.n	8004810 <Buffer_SlipDec+0x106>
    for (uint16_t countByte = 0; countByte < length; ++countByte)
 80047fa:	8abb      	ldrh	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	82bb      	strh	r3, [r7, #20]
 8004800:	8aba      	ldrh	r2, [r7, #20]
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	429a      	cmp	r2, r3
 8004806:	d395      	bcc.n	8004734 <Buffer_SlipDec+0x2a>
                }
            }
        }
    }

    Buffer_Dispose(buff);
 8004808:	6938      	ldr	r0, [r7, #16]
 800480a:	f7ff fee0 	bl	80045ce <Buffer_Dispose>
    return BUFF_NULL;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <Ring_CountByte>:
//////////////////////////////////////////////////////////////////////////////////////////
uint16_t Ring_CountByte(Ring *_ring)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    uint16_t count = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	81fb      	strh	r3, [r7, #14]
    Ring* ring = _ring;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60bb      	str	r3, [r7, #8]
    if (ring->tail >= ring->head)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004834:	429a      	cmp	r2, r3
 8004836:	db0a      	blt.n	800484e <Ring_CountByte+0x36>
    {
        count = ring->tail - ring->head;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800483e:	b29a      	uxth	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004846:	b29b      	uxth	r3, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	81fb      	strh	r3, [r7, #14]
 800484c:	e00d      	b.n	800486a <Ring_CountByte+0x52>
    }
    else
    {
        count = ring->size - ring->head + ring->tail;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004858:	b29b      	uxth	r3, r3
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	b29a      	uxth	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004864:	b29b      	uxth	r3, r3
 8004866:	4413      	add	r3, r2
 8004868:	81fb      	strh	r3, [r7, #14]
    }
    return count;
 800486a:	89fb      	ldrh	r3, [r7, #14]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <Ring_CountBytePos>:

uint16_t Ring_CountBytePos(Ring *_ring, uint16_t Pos)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	807b      	strh	r3, [r7, #2]
    uint16_t count = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	81fb      	strh	r3, [r7, #14]
    uint16_t rt_pos = Pos + 1;
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	3301      	adds	r3, #1
 800488a:	81bb      	strh	r3, [r7, #12]
    Ring* ring = _ring;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60bb      	str	r3, [r7, #8]

    if (rt_pos == ring->size)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	89ba      	ldrh	r2, [r7, #12]
 8004896:	429a      	cmp	r2, r3
 8004898:	d102      	bne.n	80048a0 <Ring_CountBytePos+0x2a>
    {
        rt_pos = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	81bb      	strh	r3, [r7, #12]
 800489e:	e006      	b.n	80048ae <Ring_CountBytePos+0x38>
    }
    else if (rt_pos > ring->size)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	89ba      	ldrh	r2, [r7, #12]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d901      	bls.n	80048ae <Ring_CountBytePos+0x38>
    {
        return 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e019      	b.n	80048e2 <Ring_CountBytePos+0x6c>
    }

    if (rt_pos >= ring->head)
 80048ae:	89bb      	ldrh	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	db07      	blt.n	80048ca <Ring_CountBytePos+0x54>
    {
        count = rt_pos - ring->head;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	89ba      	ldrh	r2, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	81fb      	strh	r3, [r7, #14]
 80048c8:	e00a      	b.n	80048e0 <Ring_CountBytePos+0x6a>
    }
    else
    {
        count = ring->size - ring->head + rt_pos;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b29a      	uxth	r2, r3
 80048da:	89bb      	ldrh	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	81fb      	strh	r3, [r7, #14]
    }
    return count;
 80048e0:	89fb      	ldrh	r3, [r7, #14]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <Ring_DeleteData>:

Buff_ReturnType Ring_DeleteData(Ring* _ring, uint16_t Pos)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
    if (_ring->tail > _ring->head)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004904:	429a      	cmp	r2, r3
 8004906:	dd1d      	ble.n	8004944 <Ring_DeleteData+0x58>
    {
        if (Pos >= _ring->head && Pos < _ring->tail)
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8004910:	4293      	cmp	r3, r2
 8004912:	db15      	blt.n	8004940 <Ring_DeleteData+0x54>
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800491c:	4293      	cmp	r3, r2
 800491e:	da0f      	bge.n	8004940 <Ring_DeleteData+0x54>
        {
            _ring->head = ((Pos + 1) >= _ring->size) ? 0 : (Pos + 1);
 8004920:	887b      	ldrh	r3, [r7, #2]
 8004922:	3301      	adds	r3, #1
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	4293      	cmp	r3, r2
 800492a:	da04      	bge.n	8004936 <Ring_DeleteData+0x4a>
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	3301      	adds	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	b21a      	sxth	r2, r3
 8004934:	e000      	b.n	8004938 <Ring_DeleteData+0x4c>
 8004936:	2200      	movs	r2, #0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	805a      	strh	r2, [r3, #2]
            return BUFF_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e01e      	b.n	800497e <Ring_DeleteData+0x92>
        }
        else
        {
            return BUFF_NOT_OK;
 8004940:	2301      	movs	r3, #1
 8004942:	e01c      	b.n	800497e <Ring_DeleteData+0x92>
        }
    }
    else
    {
        if (Pos >= _ring->head || Pos < _ring->tail)
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800494c:	4293      	cmp	r3, r2
 800494e:	da05      	bge.n	800495c <Ring_DeleteData+0x70>
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004958:	4293      	cmp	r3, r2
 800495a:	da0f      	bge.n	800497c <Ring_DeleteData+0x90>
        {
            _ring->head = ((Pos + 1) >= _ring->size) ? 0 : (Pos + 1);
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	3301      	adds	r3, #1
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	4293      	cmp	r3, r2
 8004966:	da04      	bge.n	8004972 <Ring_DeleteData+0x86>
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	3301      	adds	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	b21a      	sxth	r2, r3
 8004970:	e000      	b.n	8004974 <Ring_DeleteData+0x88>
 8004972:	2200      	movs	r2, #0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	805a      	strh	r2, [r3, #2]
            return BUFF_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <Ring_DeleteData+0x92>
        }
        else
        {
            return BUFF_NOT_OK;
 800497c:	2301      	movs	r3, #1
        }
    }


}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <Ring_PushData>:

Buff_ReturnType Ring_PushData(Ring* _ring, uint8_t* data, uint16_t length)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]

    for (uint16_t CountByte = 0; CountByte < length; CountByte++)
 8004996:	2300      	movs	r3, #0
 8004998:	82fb      	strh	r3, [r7, #22]
 800499a:	e04a      	b.n	8004a32 <Ring_PushData+0xaa>
    {
        _ring->data[_ring->tail] = data[CountByte];
 800499c:	8afb      	ldrh	r3, [r7, #22]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80049ac:	440b      	add	r3, r1
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	701a      	strb	r2, [r3, #0]
        if (++_ring->tail == _ring->size)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b21a      	sxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	809a      	strh	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d102      	bne.n	80049da <Ring_PushData+0x52>
        {
            _ring->tail = 0;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	809a      	strh	r2, [r3, #4]
        }

        if (_ring->tail == _ring->head)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d120      	bne.n	8004a2c <Ring_PushData+0xa4>
        {
            if (--_ring->tail < 0)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	b21a      	sxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	809a      	strh	r2, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da06      	bge.n	8004a14 <Ring_PushData+0x8c>
            {
                _ring->tail = _ring->size - 1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b21a      	sxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	809a      	strh	r2, [r3, #4]
            }
            _ring->data[_ring->tail - 1] = data[CountByte];
 8004a14:	8afb      	ldrh	r3, [r7, #22]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	441a      	add	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	440b      	add	r3, r1
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	701a      	strb	r2, [r3, #0]
    for (uint16_t CountByte = 0; CountByte < length; CountByte++)
 8004a2c:	8afb      	ldrh	r3, [r7, #22]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	82fb      	strh	r3, [r7, #22]
 8004a32:	8afa      	ldrh	r2, [r7, #22]
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3b0      	bcc.n	800499c <Ring_PushData+0x14>
        }
    }
    return BUFF_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <Ring_PullData>:

int16_t Ring_PullData(Ring* _ring, uint8_t* data, uint16_t length)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b086      	sub	sp, #24
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
    uint16_t countData = Ring_CountByte(_ring);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff fedf 	bl	8004818 <Ring_CountByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	82bb      	strh	r3, [r7, #20]
    uint16_t maxByteRead = (countData >= length) ? length : countData;
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	8abb      	ldrh	r3, [r7, #20]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	bf28      	it	cs
 8004a66:	4613      	movcs	r3, r2
 8004a68:	827b      	strh	r3, [r7, #18]

    for (uint16_t CountByte = 0; CountByte < maxByteRead; CountByte++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	82fb      	strh	r3, [r7, #22]
 8004a6e:	e021      	b.n	8004ab4 <Ring_PullData+0x6e>
    {
        data[CountByte] = _ring->data[_ring->head];
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8afb      	ldrh	r3, [r7, #22]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	440b      	add	r3, r1
 8004a82:	7812      	ldrb	r2, [r2, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
        if (++_ring->head == _ring->size)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	805a      	strh	r2, [r3, #2]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d102      	bne.n	8004aae <Ring_PullData+0x68>
        {
            _ring->head = 0;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	805a      	strh	r2, [r3, #2]
    for (uint16_t CountByte = 0; CountByte < maxByteRead; CountByte++)
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	82fb      	strh	r3, [r7, #22]
 8004ab4:	8afa      	ldrh	r2, [r7, #22]
 8004ab6:	8a7b      	ldrh	r3, [r7, #18]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3d9      	bcc.n	8004a70 <Ring_PullData+0x2a>
        }
    }
    return countData - length;
 8004abc:	8aba      	ldrh	r2, [r7, #20]
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	b21b      	sxth	r3, r3
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <Ring_FindByte>:

uint16_t Ring_FindByte(Ring *_ring, uint8_t Byte, uint16_t* pos)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b086      	sub	sp, #24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	72fb      	strb	r3, [r7, #11]
    uint16_t PositionByte = _ring->head;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ae2:	82fb      	strh	r3, [r7, #22]
    if (_ring->head == _ring->tail)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d101      	bne.n	8004af8 <Ring_FindByte+0x2a>
    {
        return 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e02b      	b.n	8004b50 <Ring_FindByte+0x82>
    }
    uint16_t countdata = Ring_CountByte(_ring);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fe8d 	bl	8004818 <Ring_CountByte>
 8004afe:	4603      	mov	r3, r0
 8004b00:	827b      	strh	r3, [r7, #18]

    for (uint16_t CountByte = 0; CountByte < countdata; CountByte++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	82bb      	strh	r3, [r7, #20]
 8004b06:	e01b      	b.n	8004b40 <Ring_FindByte+0x72>
    {
        if (_ring->data[PositionByte] == Byte)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	8afb      	ldrh	r3, [r7, #22]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	7afa      	ldrb	r2, [r7, #11]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d106      	bne.n	8004b26 <Ring_FindByte+0x58>
        {
            *pos = PositionByte;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8afa      	ldrh	r2, [r7, #22]
 8004b1c:	801a      	strh	r2, [r3, #0]
            return CountByte + 1;
 8004b1e:	8abb      	ldrh	r3, [r7, #20]
 8004b20:	3301      	adds	r3, #1
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	e014      	b.n	8004b50 <Ring_FindByte+0x82>
        }

        if (++PositionByte == _ring->size)
 8004b26:	8afb      	ldrh	r3, [r7, #22]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	82fb      	strh	r3, [r7, #22]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	8afa      	ldrh	r2, [r7, #22]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d101      	bne.n	8004b3a <Ring_FindByte+0x6c>
        {
            PositionByte = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	82fb      	strh	r3, [r7, #22]
    for (uint16_t CountByte = 0; CountByte < countdata; CountByte++)
 8004b3a:	8abb      	ldrh	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	82bb      	strh	r3, [r7, #20]
 8004b40:	8aba      	ldrh	r2, [r7, #20]
 8004b42:	8a7b      	ldrh	r3, [r7, #18]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3df      	bcc.n	8004b08 <Ring_FindByte+0x3a>
        }
    }
    *pos = 0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	801a      	strh	r2, [r3, #0]
    return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <Ring_GetData>:

Buff_ReturnType Ring_GetData(Ring* _ring, uint8_t* data, uint16_t* length, uint16_t pos)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	807b      	strh	r3, [r7, #2]
    uint16_t newhead = _ring->head;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b6c:	82fb      	strh	r3, [r7, #22]

    for (uint16_t CountByte = 0; CountByte < _ring->size; CountByte++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	82bb      	strh	r3, [r7, #20]
 8004b72:	e042      	b.n	8004bfa <Ring_GetData+0xa2>
    {
        data[CountByte] = _ring->data[newhead];
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8abb      	ldrh	r3, [r7, #20]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	440b      	add	r3, r1
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
        if (newhead == pos)
 8004b86:	8afa      	ldrh	r2, [r7, #22]
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d122      	bne.n	8004bd4 <Ring_GetData+0x7c>
        {
            *length = CountByte + 1;
 8004b8e:	8abb      	ldrh	r3, [r7, #20]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	801a      	strh	r2, [r3, #0]
            _ring->head = (newhead + 1) >= _ring->size ? 0 : (newhead + 1);
 8004b98:	8afb      	ldrh	r3, [r7, #22]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	8812      	ldrh	r2, [r2, #0]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	da04      	bge.n	8004bae <Ring_GetData+0x56>
 8004ba4:	8afb      	ldrh	r3, [r7, #22]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b21a      	sxth	r2, r3
 8004bac:	e000      	b.n	8004bb0 <Ring_GetData+0x58>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	805a      	strh	r2, [r3, #2]

            if (pos == _ring->tail)
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d107      	bne.n	8004bd0 <Ring_GetData+0x78>
            {
                *length = CountByte;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8aba      	ldrh	r2, [r7, #20]
 8004bc4:	801a      	strh	r2, [r3, #0]
                _ring->head = _ring->tail;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	805a      	strh	r2, [r3, #2]
            }
            return BUFF_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e01a      	b.n	8004c0a <Ring_GetData+0xb2>
        }
        if (newhead == _ring->tail)
 8004bd4:	8afb      	ldrh	r3, [r7, #22]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d012      	beq.n	8004c06 <Ring_GetData+0xae>
        {
            break;
        }

        if (++newhead >= _ring->size)
 8004be0:	8afb      	ldrh	r3, [r7, #22]
 8004be2:	3301      	adds	r3, #1
 8004be4:	82fb      	strh	r3, [r7, #22]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	8afa      	ldrh	r2, [r7, #22]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d301      	bcc.n	8004bf4 <Ring_GetData+0x9c>
        {
            newhead = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	82fb      	strh	r3, [r7, #22]
    for (uint16_t CountByte = 0; CountByte < _ring->size; CountByte++)
 8004bf4:	8abb      	ldrh	r3, [r7, #20]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	82bb      	strh	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	8aba      	ldrh	r2, [r7, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3b7      	bcc.n	8004b74 <Ring_GetData+0x1c>
 8004c04:	e000      	b.n	8004c08 <Ring_GetData+0xb0>
            break;
 8004c06:	bf00      	nop
        }
    }
    return BUFF_NOT_OK;
 8004c08:	2301      	movs	r3, #1
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <newRing>:

Ring *newRing(uint16_t size)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80fb      	strh	r3, [r7, #6]
    uint8_t* dataPtr = (uint8_t*)malloc(size);
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fe4d 	bl	80068c0 <malloc>
 8004c26:	4603      	mov	r3, r0
 8004c28:	60fb      	str	r3, [r7, #12]
    Ring* res = (Ring*)malloc(sizeof(Ring));
 8004c2a:	200c      	movs	r0, #12
 8004c2c:	f001 fe48 	bl	80068c0 <malloc>
 8004c30:	4603      	mov	r3, r0
 8004c32:	60bb      	str	r3, [r7, #8]

    res->size = size;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	801a      	strh	r2, [r3, #0]
    res->head = 0;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	805a      	strh	r2, [r3, #2]
    res->tail = 0;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	809a      	strh	r2, [r3, #4]
    res->data = dataPtr;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	609a      	str	r2, [r3, #8]

    return res;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <Fifo_AddData>:

////////////////////////////////////////////////////////////////////////////////////


Buff_ReturnType Fifo_AddData(Fifo* fifo, void* data, uint16_t length)
{
 8004c56:	b590      	push	{r4, r7, lr}
 8004c58:	b08f      	sub	sp, #60	@ 0x3c
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	4613      	mov	r3, r2
 8004c62:	80fb      	strh	r3, [r7, #6]
    ListObj* headobj = fifo->objs;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
    ListObj* objs = fifo->objs;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	633b      	str	r3, [r7, #48]	@ 0x30

    Object  object;
    object.addr = data;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	613b      	str	r3, [r7, #16]
    object.length = length;
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	82bb      	strh	r3, [r7, #20]

    if (fifo->size <= Fifo_CountData(fifo) || object.addr == BUFF_NULL)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	881c      	ldrh	r4, [r3, #0]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f8c2 	bl	8004e06 <Fifo_CountData>
 8004c82:	4603      	mov	r3, r0
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d902      	bls.n	8004c8e <Fifo_AddData+0x38>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <Fifo_AddData+0x46>
    {
        return BUFF_NOT_OK;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e057      	b.n	8004d42 <Fifo_AddData+0xec>
    }

    while (objs != BUFF_NULL)
    {
        headobj = objs;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
        objs = objs->next;
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    while (objs != BUFF_NULL)
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f7      	bne.n	8004c92 <Fifo_AddData+0x3c>
    }

    ListObj* newobj = (ListObj*)malloc(sizeof(ListObj));
 8004ca2:	2008      	movs	r0, #8
 8004ca4:	f001 fe0c 	bl	80068c0 <malloc>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    Object* obj = (Object*)malloc(sizeof(Object));
 8004cac:	2008      	movs	r0, #8
 8004cae:	f001 fe07 	bl	80068c0 <malloc>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    void* addr = malloc(object.length);
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fe01 	bl	80068c0 <malloc>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	623b      	str	r3, [r7, #32]

    if (newobj == BUFF_NULL || obj == BUFF_NULL || addr == BUFF_NULL)
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <Fifo_AddData+0x7e>
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <Fifo_AddData+0x7e>
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <Fifo_AddData+0x8e>
    {
        free(newobj);
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd6:	f001 fdfb 	bl	80068d0 <free>
        free(obj);
 8004cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cdc:	f001 fdf8 	bl	80068d0 <free>
        return BUFF_NOT_OK;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02e      	b.n	8004d42 <Fifo_AddData+0xec>
    }

    obj->addr = addr;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	601a      	str	r2, [r3, #0]
    obj->length = object.length;
 8004cea:	8aba      	ldrh	r2, [r7, #20]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	809a      	strh	r2, [r3, #4]
    newobj->obj = obj;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf4:	601a      	str	r2, [r3, #0]
    newobj->next = BUFF_NULL;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]

    uint8_t* datades = (uint8_t*)newobj->obj->addr;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61fb      	str	r3, [r7, #28]
    uint8_t* datasrc = (uint8_t*)object.addr;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	61bb      	str	r3, [r7, #24]

    for (uint16_t countByte = 0; countByte < object.length; countByte++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d0c:	e00a      	b.n	8004d24 <Fifo_AddData+0xce>
    {
        datades[countByte] = datasrc[countByte];
 8004d0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	441a      	add	r2, r3
 8004d14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	440b      	add	r3, r1
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	701a      	strb	r2, [r3, #0]
    for (uint16_t countByte = 0; countByte < object.length; countByte++)
 8004d1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d20:	3301      	adds	r3, #1
 8004d22:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d24:	8abb      	ldrh	r3, [r7, #20]
 8004d26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d3f0      	bcc.n	8004d0e <Fifo_AddData+0xb8>
    }

    if (headobj == BUFF_NULL)
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <Fifo_AddData+0xe4>
    {
        fifo->objs = newobj;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e002      	b.n	8004d40 <Fifo_AddData+0xea>
    }
    else
    {
        headobj->next = newobj;
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	605a      	str	r2, [r3, #4]
    }

    return BUFF_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	373c      	adds	r7, #60	@ 0x3c
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}

08004d4a <Fifo_GetSizeData>:

uint16_t Fifo_GetSizeData(Fifo* fifo)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
    ListObj* objs = fifo->objs;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60fb      	str	r3, [r7, #12]
    if (objs == BUFF_NULL)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <Fifo_GetSizeData+0x18>
    {
        return 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e002      	b.n	8004d68 <Fifo_GetSizeData+0x1e>
    }
    return objs->obj->length;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	889b      	ldrh	r3, [r3, #4]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <Fifo_GetData>:

Buff_ReturnType Fifo_GetData(Fifo* fifo, void* data, uint16_t* length)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]

    ListObj* objs = fifo->objs;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	61bb      	str	r3, [r7, #24]

    if (data == BUFF_NULL)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <Fifo_GetData+0x1c>
    {
        return BUFF_NOT_OK;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e037      	b.n	8004dfe <Fifo_GetData+0x8c>
    }

    if (objs != BUFF_NULL)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d033      	beq.n	8004dfc <Fifo_GetData+0x8a>
    {
        uint8_t* datades = (uint8_t*)data;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	617b      	str	r3, [r7, #20]
        uint8_t* datasrc = (uint8_t*)objs->obj->addr;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	613b      	str	r3, [r7, #16]

        for (uint16_t countByte = 0; countByte < objs->obj->length; countByte++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	83fb      	strh	r3, [r7, #30]
 8004da4:	e00a      	b.n	8004dbc <Fifo_GetData+0x4a>
        {
            datades[countByte] = datasrc[countByte];
 8004da6:	8bfb      	ldrh	r3, [r7, #30]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	441a      	add	r2, r3
 8004dac:	8bfb      	ldrh	r3, [r7, #30]
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	440b      	add	r3, r1
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	701a      	strb	r2, [r3, #0]
        for (uint16_t countByte = 0; countByte < objs->obj->length; countByte++)
 8004db6:	8bfb      	ldrh	r3, [r7, #30]
 8004db8:	3301      	adds	r3, #1
 8004dba:	83fb      	strh	r3, [r7, #30]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	889b      	ldrh	r3, [r3, #4]
 8004dc2:	8bfa      	ldrh	r2, [r7, #30]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3ee      	bcc.n	8004da6 <Fifo_GetData+0x34>
        }
        *length = objs->obj->length;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	889a      	ldrh	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	801a      	strh	r2, [r3, #0]
        fifo->objs = fifo->objs->next;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	605a      	str	r2, [r3, #4]

        free(objs->obj->addr);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fd74 	bl	80068d0 <free>
        free(objs->obj);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fd6f 	bl	80068d0 <free>
        free(objs);
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	f001 fd6c 	bl	80068d0 <free>
    else
    {
        return BUFF_NOT_OK;
    }

    return BUFF_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <Fifo_GetData+0x8c>
        return BUFF_NOT_OK;
 8004dfc:	2301      	movs	r3, #1
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <Fifo_CountData>:

uint16_t Fifo_CountData(Fifo *fifo)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
    uint16_t countNode = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	81fb      	strh	r3, [r7, #14]
    ListObj* objs = fifo->objs;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60bb      	str	r3, [r7, #8]

    while (objs != BUFF_NULL)
 8004e18:	e005      	b.n	8004e26 <Fifo_CountData+0x20>
    {
        objs = objs->next;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60bb      	str	r3, [r7, #8]
        countNode++;
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	3301      	adds	r3, #1
 8004e24:	81fb      	strh	r3, [r7, #14]
    while (objs != BUFF_NULL)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f6      	bne.n	8004e1a <Fifo_CountData+0x14>
    }

    return countNode;
 8004e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <Fifo_Dispose>:

void Fifo_Dispose(Fifo* fifo)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
    uint8_t* data;
    uint16_t NbNode = Fifo_CountData(fifo);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ffe0 	bl	8004e06 <Fifo_CountData>
 8004e46:	4603      	mov	r3, r0
 8004e48:	82bb      	strh	r3, [r7, #20]
    for (uint16_t CountNode = 0; CountNode < NbNode; CountNode  ++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	82fb      	strh	r3, [r7, #22]
 8004e4e:	e01c      	b.n	8004e8a <Fifo_Dispose+0x52>
    {
        uint16_t size = Fifo_GetSizeData(fifo);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff7a 	bl	8004d4a <Fifo_GetSizeData>
 8004e56:	4603      	mov	r3, r0
 8004e58:	81fb      	strh	r3, [r7, #14]
        data = (uint8_t *)malloc(size);
 8004e5a:	89fb      	ldrh	r3, [r7, #14]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fd2f 	bl	80068c0 <malloc>
 8004e62:	4603      	mov	r3, r0
 8004e64:	613b      	str	r3, [r7, #16]
        if (data != BUFF_NULL)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <Fifo_Dispose+0x4c>
        {
            Fifo_GetData(fifo, data, &size);
 8004e6c:	f107 030e 	add.w	r3, r7, #14
 8004e70:	461a      	mov	r2, r3
 8004e72:	6939      	ldr	r1, [r7, #16]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff7c 	bl	8004d72 <Fifo_GetData>
            free(data);
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f001 fd28 	bl	80068d0 <free>
            data = BUFF_NULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
    for (uint16_t CountNode = 0; CountNode < NbNode; CountNode  ++)
 8004e84:	8afb      	ldrh	r3, [r7, #22]
 8004e86:	3301      	adds	r3, #1
 8004e88:	82fb      	strh	r3, [r7, #22]
 8004e8a:	8afa      	ldrh	r2, [r7, #22]
 8004e8c:	8abb      	ldrh	r3, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3de      	bcc.n	8004e50 <Fifo_Dispose+0x18>
        }
    }

    if (fifo != BUFF_NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <Fifo_Dispose+0x66>
    {
        free(fifo);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 fd19 	bl	80068d0 <free>
    }
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <newFifo>:

Fifo* newFifo(uint16_t size)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	4603      	mov	r3, r0
 8004eae:	80fb      	strh	r3, [r7, #6]
    Fifo *res = (Fifo *)malloc(sizeof(Fifo));
 8004eb0:	2008      	movs	r0, #8
 8004eb2:	f001 fd05 	bl	80068c0 <malloc>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	60fb      	str	r3, [r7, #12]
    res->size = size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	801a      	strh	r2, [r3, #0]
    res->objs = BUFF_NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
    return res;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <newRouter>:
#include "stdlib.h"



Router *newRouter(uint16_t packetSize, uint16_t frameSize, uint16_t cycleTime)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	80fb      	strh	r3, [r7, #6]
 8004eda:	460b      	mov	r3, r1
 8004edc:	80bb      	strh	r3, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	807b      	strh	r3, [r7, #2]
	Router* rout = (Router *)malloc(sizeof(Router));
 8004ee2:	201c      	movs	r0, #28
 8004ee4:	f001 fcec 	bl	80068c0 <malloc>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	60fb      	str	r3, [r7, #12]

	if (rout == NULL)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <newRouter+0x26>
	{
		return rout;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	e033      	b.n	8004f5e <newRouter+0x8e>
	}

	rout->packetSize = packetSize;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	821a      	strh	r2, [r3, #16]
	rout->frameSize = frameSize;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88ba      	ldrh	r2, [r7, #4]
 8004f00:	825a      	strh	r2, [r3, #18]
	rout->cycleTime = cycleTime;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	887a      	ldrh	r2, [r7, #2]
 8004f06:	829a      	strh	r2, [r3, #20]

	rout->echoRx = false;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	761a      	strb	r2, [r3, #24]
	rout->echoTx = false;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	765a      	strb	r2, [r3, #25]
	rout->slipEnable = false;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	759a      	strb	r2, [r3, #22]
	rout->noParody = false;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	75da      	strb	r2, [r3, #23]

	rout->rxRing = (Ring *)newRing(packetSize * frameSize);
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	88ba      	ldrh	r2, [r7, #4]
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fe72 	bl	8004c14 <newRing>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]
	rout->rxPacket = (Fifo *)newFifo(packetSize);
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ffb4 	bl	8004ea6 <newFifo>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]
	rout->txPacket = (Fifo *)newFifo(packetSize);
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ffad 	bl	8004ea6 <newFifo>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]
	rout->parodyBuff = (Buffer *)newBuffer();
 8004f52:	f7ff f961 	bl	8004218 <newBuffer>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	605a      	str	r2, [r3, #4]
	return rout;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <Router_SlipConfig>:
	Buffer_Dispose(router->parodyBuff);
	free(router);
}

void Router_SlipConfig(Router* router, bool Enable)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
	router->slipEnable = Enable;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	759a      	strb	r2, [r3, #22]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <Router_PushMessageTx>:
{
	router->echoRx = Enable;
}

void Router_PushMessageTx(Router* router, uint8_t* data, uint16_t length)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
	Buffer* dataEnc = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

	if (router->slipEnable == true)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	7d9b      	ldrb	r3, [r3, #22]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d022      	beq.n	8004fe2 <Router_PushMessageTx+0x60>
	{
		dataEnc = Buffer_SlipEnc(data, length);
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f7ff fb32 	bl	800460a <Buffer_SlipEnc>
 8004fa6:	6178      	str	r0, [r7, #20]
		if (dataEnc != NULL)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02b      	beq.n	8005006 <Router_PushMessageTx+0x84>
		{
			Fifo_AddData(router->txPacket, dataEnc->data, dataEnc->length);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68d8      	ldr	r0, [r3, #12]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	889b      	ldrh	r3, [r3, #4]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7ff fe4b 	bl	8004c56 <Fifo_AddData>
			
			if (router->echoTx == true)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	7e5b      	ldrb	r3, [r3, #25]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <Router_PushMessageTx+0x58>
			{
				Ring_PushData(router->rxRing, dataEnc->data, dataEnc->length);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	889b      	ldrh	r3, [r3, #4]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f7ff fcd7 	bl	8004988 <Ring_PushData>
			}
			Buffer_Dispose(dataEnc);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff faf7 	bl	80045ce <Buffer_Dispose>
 8004fe0:	e011      	b.n	8005006 <Router_PushMessageTx+0x84>
		}
	}
	else
	{
		Fifo_AddData(router->txPacket, data, length);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe33 	bl	8004c56 <Fifo_AddData>
		if (router->echoTx == true)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	7e5b      	ldrb	r3, [r3, #25]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d006      	beq.n	8005006 <Router_PushMessageTx+0x84>
		{
			Ring_PushData(router->rxRing, data, length);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fcc1 	bl	8004988 <Ring_PushData>
		}
	}

	if (router->noParody == true)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	7ddb      	ldrb	r3, [r3, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <Router_PushMessageTx+0x9a>
	{
		Buffer_AddData(router->parodyBuff, data, length);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f917 	bl	800424a <Buffer_AddData>
	}

}
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <Router_PushMessageRx>:

Router_ReturnType Router_PushMessageRx(Router* router, uint8_t* data, uint16_t length)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
	return Ring_PushData(router->rxRing, data, length);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fca4 	bl	8004988 <Ring_PushData>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <Router_PullMessageTx>:

Router_ReturnType Router_PullMessageTx(Router* router, uint8_t* data, uint16_t* length)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
	return Fifo_GetData(router->txPacket, data, length);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fe87 	bl	8004d72 <Fifo_GetData>
 8005064:	4603      	mov	r3, r0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <Router_PullMessageRx>:
{
	return Fifo_GetSizeData(router->rxPacket);
}

Router_ReturnType Router_PullMessageRx(Router* router, uint8_t* data, uint16_t* length)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
	uint16_t lenCount = Fifo_GetSizeData(router->rxPacket);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fe63 	bl	8004d4a <Fifo_GetSizeData>
 8005084:	4603      	mov	r3, r0
 8005086:	82fb      	strh	r3, [r7, #22]

	if (lenCount != 0)
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <Router_PullMessageRx+0x4e>
	{
		uint16_t posData = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	82bb      	strh	r3, [r7, #20]

		if (router->echoRx == true)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	7e1b      	ldrb	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <Router_PullMessageRx+0x3c>
		{
			Fifo_AddData(router->rxPacket, data, *length);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6898      	ldr	r0, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	f7ff fdd6 	bl	8004c56 <Fifo_AddData>
		}

		return Fifo_GetData(router->rxPacket, data, length);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fe5d 	bl	8004d72 <Fifo_GetData>
 80050b8:	4603      	mov	r3, r0
 80050ba:	e000      	b.n	80050be <Router_PullMessageRx+0x50>
	}
	else
	{
		return BUFF_NOT_OK;
 80050bc:	2301      	movs	r3, #1
	}
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <Router_MessageHandler>:

Router_ReturnType Router_MessageHandler(Router* router)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	Buffer* dataDec = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	61fb      	str	r3, [r7, #28]
	static uint16_t countCycle = 0; 
	static Buffer* dataBuf = NULL;

	if(dataBuf == NULL)
 80050d4:	4b90      	ldr	r3, [pc, #576]	@ (8005318 <Router_MessageHandler+0x250>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <Router_MessageHandler+0x1e>
	{
		dataBuf = newBuffer();
 80050dc:	f7ff f89c 	bl	8004218 <newBuffer>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4a8d      	ldr	r2, [pc, #564]	@ (8005318 <Router_MessageHandler+0x250>)
 80050e4:	6013      	str	r3, [r2, #0]
	}

	if (router->slipEnable == true)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7d9b      	ldrb	r3, [r3, #22]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 808d 	beq.w	800520a <Router_MessageHandler+0x142>
	{
		uint16_t pos = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	81fb      	strh	r3, [r7, #14]
		if (Ring_FindByte(router->rxRing, 0xC0, &pos) > 0)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f107 020e 	add.w	r2, r7, #14
 80050fc:	21c0      	movs	r1, #192	@ 0xc0
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fce5 	bl	8004ace <Ring_FindByte>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d073      	beq.n	80051f2 <Router_MessageHandler+0x12a>
		{
			uint16_t len = Ring_CountBytePos(router->rxRing, pos);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	89fa      	ldrh	r2, [r7, #14]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fbaf 	bl	8004876 <Ring_CountBytePos>
 8005118:	4603      	mov	r3, r0
 800511a:	81bb      	strh	r3, [r7, #12]
			uint8_t* dataraw = (uint8_t*)malloc(len);
 800511c:	89bb      	ldrh	r3, [r7, #12]
 800511e:	4618      	mov	r0, r3
 8005120:	f001 fbce 	bl	80068c0 <malloc>
 8005124:	4603      	mov	r3, r0
 8005126:	613b      	str	r3, [r7, #16]
			if (dataraw == NULL)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <Router_MessageHandler+0x6a>
			{
				return BUFF_NOT_OK;
 800512e:	2301      	movs	r3, #1
 8005130:	e0ee      	b.n	8005310 <Router_MessageHandler+0x248>
			}

			if (len > router->frameSize || len == 1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8a5a      	ldrh	r2, [r3, #18]
 8005136:	89bb      	ldrh	r3, [r7, #12]
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <Router_MessageHandler+0x7a>
 800513c:	89bb      	ldrh	r3, [r7, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d107      	bne.n	8005152 <Router_MessageHandler+0x8a>
			{
				Ring_DeleteData(router->rxRing, pos);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	89fa      	ldrh	r2, [r7, #14]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fbce 	bl	80048ec <Ring_DeleteData>
 8005150:	e04d      	b.n	80051ee <Router_MessageHandler+0x126>
			}
			else
			{
				if (BUFF_OK == Ring_GetData(router->rxRing, dataraw, &len, pos))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	f107 020c 	add.w	r2, r7, #12
 800515c:	6939      	ldr	r1, [r7, #16]
 800515e:	f7ff fcfb 	bl	8004b58 <Ring_GetData>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d142      	bne.n	80051ee <Router_MessageHandler+0x126>
				{
					dataDec = Buffer_SlipDec(dataraw, len);
 8005168:	89bb      	ldrh	r3, [r7, #12]
 800516a:	4619      	mov	r1, r3
 800516c:	6938      	ldr	r0, [r7, #16]
 800516e:	f7ff facc 	bl	800470a <Buffer_SlipDec>
 8005172:	61f8      	str	r0, [r7, #28]
					if (dataDec != NULL)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d036      	beq.n	80051e8 <Router_MessageHandler+0x120>
					{
						if (router->noParody == true)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	7ddb      	ldrb	r3, [r3, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d026      	beq.n	80051d0 <Router_MessageHandler+0x108>
						{
							if (BUFF_OK == Buffer_SearchData(router->parodyBuff, dataDec->data, dataDec->length, &pos))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6858      	ldr	r0, [r3, #4]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	889a      	ldrh	r2, [r3, #4]
 800518e:	f107 030e 	add.w	r3, r7, #14
 8005192:	f7ff f96d 	bl	8004470 <Buffer_SearchData>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <Router_MessageHandler+0xec>
							{
								Buffer_DeleteData(router->parodyBuff, pos);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	89fa      	ldrh	r2, [r7, #14]
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff f991 	bl	80044cc <Buffer_DeleteData>
								Buffer_Dispose(dataDec);
 80051aa:	69f8      	ldr	r0, [r7, #28]
 80051ac:	f7ff fa0f 	bl	80045ce <Buffer_Dispose>
								return BUFF_NOT_OK;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0ad      	b.n	8005310 <Router_MessageHandler+0x248>
							}
							else if (Buffer_CountData(router->parodyBuff) >= 10)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f9f0 	bl	800459e <Buffer_CountData>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b09      	cmp	r3, #9
 80051c2:	d905      	bls.n	80051d0 <Router_MessageHandler+0x108>
							{
								Buffer_DeleteData(router->parodyBuff, 0);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff f97e 	bl	80044cc <Buffer_DeleteData>
							}
						}
						Fifo_AddData(router->rxPacket, dataDec->data, dataDec->length);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6898      	ldr	r0, [r3, #8]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	6819      	ldr	r1, [r3, #0]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	889b      	ldrh	r3, [r3, #4]
 80051dc:	461a      	mov	r2, r3
 80051de:	f7ff fd3a 	bl	8004c56 <Fifo_AddData>
						Buffer_Dispose(dataDec);
 80051e2:	69f8      	ldr	r0, [r7, #28]
 80051e4:	f7ff f9f3 	bl	80045ce <Buffer_Dispose>
					}
					free(dataraw);
 80051e8:	6938      	ldr	r0, [r7, #16]
 80051ea:	f001 fb71 	bl	80068d0 <free>
				}
			}
			return BUFF_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e08e      	b.n	8005310 <Router_MessageHandler+0x248>
		}
		else if (Fifo_CountData(router->txPacket) > 0)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fe05 	bl	8004e06 <Fifo_CountData>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <Router_MessageHandler+0x13e>
		{
			return BUFF_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e084      	b.n	8005310 <Router_MessageHandler+0x248>
		}
		else
		{
			return BUFF_NOT_OK;
 8005206:	2301      	movs	r3, #1
 8005208:	e082      	b.n	8005310 <Router_MessageHandler+0x248>
		}
	}
	else
	{
		uint16_t pos = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	817b      	strh	r3, [r7, #10]
		uint16_t len = Ring_CountByte(router->rxRing);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fb00 	bl	8004818 <Ring_CountByte>
 8005218:	4603      	mov	r3, r0
 800521a:	837b      	strh	r3, [r7, #26]
//		if (dataraw == NULL)
//		{
//			return BUFF_NOT_OK;
//		}

		if (len > 0)
 800521c:	8b7b      	ldrh	r3, [r7, #26]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d021      	beq.n	8005266 <Router_MessageHandler+0x19e>
		{
			uint8_t* dataraw = (uint8_t*)malloc(len*sizeof(uint8_t));
 8005222:	8b7b      	ldrh	r3, [r7, #26]
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fb4b 	bl	80068c0 <malloc>
 800522a:	4603      	mov	r3, r0
 800522c:	617b      	str	r3, [r7, #20]
			if (dataraw == NULL)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <Router_MessageHandler+0x170>
			{
				return BUFF_NOT_OK;
 8005234:	2301      	movs	r3, #1
 8005236:	e06b      	b.n	8005310 <Router_MessageHandler+0x248>
			}
			Ring_PullData(router->rxRing, dataraw, len);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	8b7a      	ldrh	r2, [r7, #26]
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fc00 	bl	8004a46 <Ring_PullData>
			Buffer_AppendData(dataBuf, 0, dataraw, len);
 8005246:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <Router_MessageHandler+0x250>)
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	8b7b      	ldrh	r3, [r7, #26]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	2100      	movs	r1, #0
 8005250:	f7ff f880 	bl	8004354 <Buffer_AppendData>
			free(dataraw);
 8005254:	6978      	ldr	r0, [r7, #20]
 8005256:	f001 fb3b 	bl	80068d0 <free>
			dataraw = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
			countCycle = 0;
 800525e:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <Router_MessageHandler+0x254>)
 8005260:	2200      	movs	r2, #0
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e053      	b.n	800530e <Router_MessageHandler+0x246>
		}
		else
		{
			if (++countCycle >= router->cycleTime || router->cycleTime == 0)
 8005266:	4b2d      	ldr	r3, [pc, #180]	@ (800531c <Router_MessageHandler+0x254>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	3301      	adds	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <Router_MessageHandler+0x254>)
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	4b2a      	ldr	r3, [pc, #168]	@ (800531c <Router_MessageHandler+0x254>)
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8a9b      	ldrh	r3, [r3, #20]
 800527a:	429a      	cmp	r2, r3
 800527c:	d203      	bcs.n	8005286 <Router_MessageHandler+0x1be>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8a9b      	ldrh	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d143      	bne.n	800530e <Router_MessageHandler+0x246>
			{
				if (dataBuf->length != 0 && dataBuf->data != NULL)
 8005286:	4b24      	ldr	r3, [pc, #144]	@ (8005318 <Router_MessageHandler+0x250>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	889b      	ldrh	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d03b      	beq.n	8005308 <Router_MessageHandler+0x240>
 8005290:	4b21      	ldr	r3, [pc, #132]	@ (8005318 <Router_MessageHandler+0x250>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <Router_MessageHandler+0x240>
				{
					if (router->noParody == true)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7ddb      	ldrb	r3, [r3, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01d      	beq.n	80052de <Router_MessageHandler+0x216>
					{
						if (BUFF_OK == Buffer_SearchData(router->parodyBuff, dataBuf->data, dataBuf->length, &pos))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6858      	ldr	r0, [r3, #4]
 80052a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005318 <Router_MessageHandler+0x250>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6819      	ldr	r1, [r3, #0]
 80052ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <Router_MessageHandler+0x250>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	889a      	ldrh	r2, [r3, #4]
 80052b2:	f107 030a 	add.w	r3, r7, #10
 80052b6:	f7ff f8db 	bl	8004470 <Buffer_SearchData>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10e      	bne.n	80052de <Router_MessageHandler+0x216>
						{
							Buffer_DeleteData(router->parodyBuff, pos);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	897a      	ldrh	r2, [r7, #10]
 80052c6:	4611      	mov	r1, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f8ff 	bl	80044cc <Buffer_DeleteData>
							Buffer_DeleteData(dataBuf, 0);
 80052ce:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <Router_MessageHandler+0x250>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff f8f9 	bl	80044cc <Buffer_DeleteData>
							return BUFF_NOT_OK;
 80052da:	2301      	movs	r3, #1
 80052dc:	e018      	b.n	8005310 <Router_MessageHandler+0x248>
						}
					}

					Fifo_AddData(router->rxPacket, dataBuf->data, dataBuf->length);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6898      	ldr	r0, [r3, #8]
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <Router_MessageHandler+0x250>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <Router_MessageHandler+0x250>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	889b      	ldrh	r3, [r3, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7ff fcb1 	bl	8004c56 <Fifo_AddData>
					dataBuf->length = 0;
 80052f4:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <Router_MessageHandler+0x250>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2200      	movs	r2, #0
 80052fa:	809a      	strh	r2, [r3, #4]
					Buffer_DeleteData(dataBuf, 0);
 80052fc:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <Router_MessageHandler+0x250>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f8e2 	bl	80044cc <Buffer_DeleteData>
				}
				countCycle = 0;
 8005308:	4b04      	ldr	r3, [pc, #16]	@ (800531c <Router_MessageHandler+0x254>)
 800530a:	2200      	movs	r2, #0
 800530c:	801a      	strh	r2, [r3, #0]
			}
		}
		return BUFF_OK;
 800530e:	2300      	movs	r3, #0
	}
 
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000234 	.word	0x20000234
 800531c:	20000238 	.word	0x20000238

08005320 <Crc8_CcitUpdate>:

#include "crc.h"

static uint8_t Crc8_CcitUpdate(uint8_t inCrc, uint8_t inData)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	460a      	mov	r2, r1
 800532a:	71fb      	strb	r3, [r7, #7]
 800532c:	4613      	mov	r3, r2
 800532e:	71bb      	strb	r3, [r7, #6]
	
  uint8_t data;
  data = inCrc ^ inData;
 8005330:	79fa      	ldrb	r2, [r7, #7]
 8005332:	79bb      	ldrb	r3, [r7, #6]
 8005334:	4053      	eors	r3, r2
 8005336:	73fb      	strb	r3, [r7, #15]

  for ( uint8_t CountBit = 0; CountBit < 8; CountBit++ )
 8005338:	2300      	movs	r3, #0
 800533a:	73bb      	strb	r3, [r7, #14]
 800533c:	e011      	b.n	8005362 <Crc8_CcitUpdate+0x42>
  {
    if (( data & 0x80 ) != 0 )
 800533e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	da07      	bge.n	8005356 <Crc8_CcitUpdate+0x36>
    {
      data <<= 1;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      data ^= 0x07;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	f083 0307 	eor.w	r3, r3, #7
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e002      	b.n	800535c <Crc8_CcitUpdate+0x3c>
    }
    else data <<= 1;
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
  for ( uint8_t CountBit = 0; CountBit < 8; CountBit++ )
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	3301      	adds	r3, #1
 8005360:	73bb      	strb	r3, [r7, #14]
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	2b07      	cmp	r3, #7
 8005366:	d9ea      	bls.n	800533e <Crc8_CcitUpdate+0x1e>
  }

  return data;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <Crc8_CalCcit>:

uint8_t Crc8_CalCcit(uint8_t *data, uint16_t length)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
   uint8_t byteCrc = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
   
   for(uint8_t Countbyte = 0; Countbyte < length; Countbyte ++)
 8005384:	2300      	movs	r3, #0
 8005386:	73bb      	strb	r3, [r7, #14]
 8005388:	e00d      	b.n	80053a6 <Crc8_CalCcit+0x32>
   {
     byteCrc = Crc8_CcitUpdate(byteCrc, data[Countbyte]);
 800538a:	7bbb      	ldrb	r3, [r7, #14]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff ffc2 	bl	8005320 <Crc8_CcitUpdate>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
   for(uint8_t Countbyte = 0; Countbyte < length; Countbyte ++)
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	3301      	adds	r3, #1
 80053a4:	73bb      	strb	r3, [r7, #14]
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d8ec      	bhi.n	800538a <Crc8_CalCcit+0x16>
   }
   return byteCrc;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <DHT22_init>:
#include "DHT22.h"

// Hàm khởi tạo 1 đối tượng DHT22 mới
void DHT22_init(DHT22 *dht, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
    dht->GPIOx = GPIOx;			// Gán chân kết nối cảm biến
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	611a      	str	r2, [r3, #16]
    dht->GPIO_Pin = GPIO_Pin;	// Gán port kết nối cảm biến
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	829a      	strh	r2, [r3, #20]
    DHT22_resetTimer(dht);	// Gọi hàm thiết lập hẹn giờ cho cảm biến
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f81e 	bl	8005418 <DHT22_resetTimer>

    // Kích hoạt DWT để đếm chu kỳ
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {  // Kiểm tra nếu DWT được kích hoạt chưa
 80053dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <DHT22_init+0x54>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10e      	bne.n	8005406 <DHT22_init+0x4a>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Kích hoạt DWT
 80053e8:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <DHT22_init+0x54>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a08      	ldr	r2, [pc, #32]	@ (8005410 <DHT22_init+0x54>)
 80053ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;  // Đặt lại bộ đếm chu kỳ
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <DHT22_init+0x58>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Bật bộ đếm chu kỳ
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <DHT22_init+0x58>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a05      	ldr	r2, [pc, #20]	@ (8005414 <DHT22_init+0x58>)
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	6013      	str	r3, [r2, #0]
    }
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000edf0 	.word	0xe000edf0
 8005414:	e0001000 	.word	0xe0001000

08005418 <DHT22_resetTimer>:
DHT_ERROR_t DHT22_getStatus(DHT22 *dht) {
    return dht->error;
}

// Đặt lại hẹn giờ cho việc cài đặt sensor
void DHT22_resetTimer(DHT22 *dht) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    dht->lastReadTime = HAL_GetTick() - 3000;	// Đặt lại hẹn giờ cho việc đọc cảm biến
 8005420:	f7fc fcf8 	bl	8001e14 <HAL_GetTick>
 8005424:	4603      	mov	r3, r0
 8005426:	f6a3 32b8 	subw	r2, r3, #3000	@ 0xbb8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <DHT22_readSensor>:

// Đọc giá trị cảm biến đã đo
void DHT22_readSensor(DHT22 *dht) {
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b08b      	sub	sp, #44	@ 0x2c
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    // Đảm bảo rằng không quét cảm biến quá thường xuyên
    uint32_t startTime = HAL_GetTick();  // Lấy thời gian hiện tại
 8005440:	f7fc fce8 	bl	8001e14 <HAL_GetTick>
 8005444:	61f8      	str	r0, [r7, #28]
//    if ((uint32_t)(startTime - dht->lastReadTime) < 1999L) {  // Nếu thời gian từ lần đọc trước nhỏ hơn 1999ms, thoát
//        return;
//    }
    dht->lastReadTime = startTime;  // Cập nhật thời gian lần cuối đọc cảm biến
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	605a      	str	r2, [r3, #4]

    uint16_t rawHumidity = 0;  // Khởi tạo biến độ ẩm gốc
 800544c:	2300      	movs	r3, #0
 800544e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t rawTemperature = 0;  // Khởi tạo biến nhiệt độ gốc
 8005450:	2300      	movs	r3, #0
 8005452:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t data = 0;  // Khởi tạo biến dữ liệu
 8005454:	2300      	movs	r3, #0
 8005456:	847b      	strh	r3, [r7, #34]	@ 0x22

    // Yêu cầu mẫu
    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_RESET);  // Đặt chân GPIO xuống mức thấp
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6918      	ldr	r0, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8a9b      	ldrh	r3, [r3, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	4619      	mov	r1, r3
 8005464:	f7fd fc05 	bl	8002c72 <HAL_GPIO_WritePin>
    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Khởi tạo cấu trúc GPIO
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = dht->GPIO_Pin;  // Chỉ định chân GPIO
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8a9b      	ldrh	r3, [r3, #20]
 800547a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Chế độ đầu ra push-pull
 800547c:	2301      	movs	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Tốc độ thấp
 8005480:	2302      	movs	r3, #2
 8005482:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);  // Khởi tạo GPIO với cấu hình trên
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f107 0208 	add.w	r2, r7, #8
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fa54 	bl	800293c <HAL_GPIO_Init>

    HAL_Delay(2);  // Delay 2ms
 8005494:	2002      	movs	r0, #2
 8005496:	f7fc fcc7 	bl	8001e28 <HAL_Delay>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Chuyển chế độ chân GPIO sang đầu vào
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;  // Không sử dụng điện trở kéo lên/kéo xuống
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(dht->GPIOx, &GPIO_InitStruct);  // Khởi tạo lại GPIO với chế độ đầu vào
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fd fa45 	bl	800293c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(dht->GPIOx, dht->GPIO_Pin, GPIO_PIN_SET);  // Đặt chân GPIO lên mức cao
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6918      	ldr	r0, [r3, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8a9b      	ldrh	r3, [r3, #20]
 80054ba:	2201      	movs	r2, #1
 80054bc:	4619      	mov	r1, r3
 80054be:	f7fd fbd8 	bl	8002c72 <HAL_GPIO_WritePin>

    // Vòng lặp qua số lượng edges dự kiến
    for (int8_t i = -3; i < 2 * 40; i++) {  // Vòng lặp để đọc 40 bit dữ liệu từ cảm biến
 80054c2:	23fd      	movs	r3, #253	@ 0xfd
 80054c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80054c8:	e051      	b.n	800556e <DHT22_readSensor+0x136>
        uint8_t age;
        startTime = DWT->CYCCNT;  // Lấy thời gian hiện tại của bộ đếm chu kỳ
 80054ca:	4b55      	ldr	r3, [pc, #340]	@ (8005620 <DHT22_readSensor+0x1e8>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	61fb      	str	r3, [r7, #28]

        do {
            age = (DWT->CYCCNT - startTime) / (HAL_RCC_GetHCLKFreq() / 1000000);  // Chia số chu kỳ đã trôi qua cho tần số của HCLK để tính toán thời gian trôi qua tính bằng micro giây
 80054d0:	4b53      	ldr	r3, [pc, #332]	@ (8005620 <DHT22_readSensor+0x1e8>)
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	1ad4      	subs	r4, r2, r3
 80054d8:	f7fd ffb0 	bl	800343c <HAL_RCC_GetHCLKFreq>
 80054dc:	4603      	mov	r3, r0
 80054de:	4a51      	ldr	r2, [pc, #324]	@ (8005624 <DHT22_readSensor+0x1ec>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0c9b      	lsrs	r3, r3, #18
 80054e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80054ea:	76fb      	strb	r3, [r7, #27]
            if (age > 90) {  // Nếu thời gian trôi qua lớn hơn 90 micro giây, báo lỗi timeout
 80054ec:	7efb      	ldrb	r3, [r7, #27]
 80054ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80054f0:	d903      	bls.n	80054fa <DHT22_readSensor+0xc2>
                dht->error = ERROR_TIMEOUT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
                return;
 80054f8:	e089      	b.n	800560e <DHT22_readSensor+0x1d6>
            }
        } while (HAL_GPIO_ReadPin(dht->GPIOx, dht->GPIO_Pin) == (i & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);  // Đợi cho đến khi trạng thái chân GPIO thay đổi
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8a9b      	ldrh	r3, [r3, #20]
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fd fb9d 	bl	8002c44 <HAL_GPIO_ReadPin>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	d0da      	beq.n	80054d0 <DHT22_readSensor+0x98>

        if (i >= 0 && (i & 1)) {  // Nếu i >= 0 và i lẻ
 800551a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800551e:	2b00      	cmp	r3, #0
 8005520:	db0f      	blt.n	8005542 <DHT22_readSensor+0x10a>
 8005522:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <DHT22_readSensor+0x10a>
            data <<= 1;  // Dịch bit trái dữ liệu
 800552e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	847b      	strh	r3, [r7, #34]	@ 0x22

            if (age > 30) {  // Nếu thời gian trôi qua lớn hơn 30 micro giây, bit hiện tại là 1
 8005534:	7efb      	ldrb	r3, [r7, #27]
 8005536:	2b1e      	cmp	r3, #30
 8005538:	d903      	bls.n	8005542 <DHT22_readSensor+0x10a>
                data |= 1;
 800553a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	847b      	strh	r3, [r7, #34]	@ 0x22
            }
        }

        switch (i) {
 8005542:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8005546:	2b1f      	cmp	r3, #31
 8005548:	d002      	beq.n	8005550 <DHT22_readSensor+0x118>
 800554a:	2b3f      	cmp	r3, #63	@ 0x3f
 800554c:	d003      	beq.n	8005556 <DHT22_readSensor+0x11e>
 800554e:	e007      	b.n	8005560 <DHT22_readSensor+0x128>
            case 31:
                rawHumidity = data;  // Lưu dữ liệu độ ẩm
 8005550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005552:	84fb      	strh	r3, [r7, #38]	@ 0x26
                break;
 8005554:	e004      	b.n	8005560 <DHT22_readSensor+0x128>
            case 63:
                rawTemperature = data;  // Lưu dữ liệu nhiệt độ
 8005556:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005558:	84bb      	strh	r3, [r7, #36]	@ 0x24
                data = 0;  // Đặt lại dữ liệu
 800555a:	2300      	movs	r3, #0
 800555c:	847b      	strh	r3, [r7, #34]	@ 0x22
                break;
 800555e:	bf00      	nop
    for (int8_t i = -3; i < 2 * 40; i++) {  // Vòng lặp để đọc 40 bit dữ liệu từ cảm biến
 8005560:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8005564:	b2db      	uxtb	r3, r3
 8005566:	3301      	adds	r3, #1
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800556e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8005572:	2b4f      	cmp	r3, #79	@ 0x4f
 8005574:	dda9      	ble.n	80054ca <DHT22_readSensor+0x92>
        }
    }

    // Xác minh checksum
    if ((uint8_t)(((uint8_t)rawHumidity) + (rawHumidity >> 8) + ((uint8_t)rawTemperature) + (rawTemperature >> 8)) != data) {  // Kiểm tra tổng kiểm tra
 8005576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005578:	b2da      	uxtb	r2, r3
 800557a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	b2da      	uxtb	r2, r3
 8005586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4413      	add	r3, r2
 800558c:	b2da      	uxtb	r2, r3
 800558e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	b29b      	uxth	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4413      	add	r3, r2
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <DHT22_readSensor+0x172>
        dht->error = ERROR_CHECKSUM;  // Nếu không khớp, báo lỗi checksum
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	701a      	strb	r2, [r3, #0]
        return;
 80055a8:	e031      	b.n	800560e <DHT22_readSensor+0x1d6>
//    dht->humidity = ((rawHumidity / 10) << 8) | (rawHumidity % 10);
//    if (rawTemperature & 0x8000)  // Nếu nhiệt độ âm
//        rawTemperature = -(int16_t)(rawTemperature & 0x7FFF);  // Lấy giá trị âm của nhiệt độ
//    dht->temperature = ((rawTemperature / 10) << 8) | (rawTemperature % 10);

    dht->humidity = rawHumidity * 0.1;  // Chuyển đổi và lưu giá trị độ ẩm
 80055aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fa ff21 	bl	80003f4 <__aeabi_i2d>
 80055b2:	a319      	add	r3, pc, #100	@ (adr r3, 8005618 <DHT22_readSensor+0x1e0>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa ff86 	bl	80004c8 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fb fa50 	bl	8000a68 <__aeabi_d2f>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]
    if (rawTemperature & 0x8000)  // Nếu nhiệt độ âm
 80055ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da05      	bge.n	80055e2 <DHT22_readSensor+0x1aa>
        rawTemperature = -(int16_t)(rawTemperature & 0x7FFF);  // Lấy giá trị âm của nhiệt độ
 80055d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80055dc:	b29b      	uxth	r3, r3
 80055de:	425b      	negs	r3, r3
 80055e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    dht->temperature = ((int16_t)rawTemperature) * 0.1;  // Chuyển đổi và lưu giá trị nhiệt độ
 80055e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fa ff04 	bl	80003f4 <__aeabi_i2d>
 80055ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8005618 <DHT22_readSensor+0x1e0>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa ff69 	bl	80004c8 <__aeabi_dmul>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	f7fb fa33 	bl	8000a68 <__aeabi_d2f>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	609a      	str	r2, [r3, #8]

    dht->error = ERROR_NONE;  // Không có lỗi
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
}
 800560e:	372c      	adds	r7, #44	@ 0x2c
 8005610:	46bd      	mov	sp, r7
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	f3af 8000 	nop.w
 8005618:	9999999a 	.word	0x9999999a
 800561c:	3fb99999 	.word	0x3fb99999
 8005620:	e0001000 	.word	0xe0001000
 8005624:	431bde83 	.word	0x431bde83

08005628 <DHT22_getTemperature>:

// Lấy giá trị nhiệt độ được đo
float DHT22_getTemperature(DHT22 *dht) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    DHT22_readSensor(dht);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff01 	bl	8005438 <DHT22_readSensor>
    if (dht->error == ERROR_TIMEOUT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d102      	bne.n	8005644 <DHT22_getTemperature+0x1c>
        DHT22_readSensor(dht);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fefa 	bl	8005438 <DHT22_readSensor>
    return dht->temperature;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <DHT22_getHumidity>:

// Lấy giá trị độ ẩm được đo
float DHT22_getHumidity(DHT22 *dht) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
    DHT22_readSensor(dht);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff feed 	bl	8005438 <DHT22_readSensor>
    if (dht->error == ERROR_TIMEOUT)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d102      	bne.n	800566c <DHT22_getHumidity+0x1c>
        DHT22_readSensor(dht);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fee6 	bl	8005438 <DHT22_readSensor>
    return dht->humidity;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <MQ135_init>:
//	    Error_Handler();
//	  }
//}

// Thiết lập chân
void MQ135_init(MQ135* mq135, ADC_HandleTypeDef* hadc, uint32_t adcChannel) {
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
    mq135->hadc = hadc;         // Gán cấu trúc ADC
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	601a      	str	r2, [r3, #0]
    mq135->adcChannel = adcChannel; // Gán kênh ADC
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	605a      	str	r2, [r3, #4]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr
 800569a:	0000      	movs	r0, r0
 800569c:	0000      	movs	r0, r0
	...

080056a0 <MQ135_getCorrectionFactor>:
Tuyến tính hóa đường cong phụ thuộc nhiệt độ dưới và trên 20 độ C
    dưới 20degC: Fact = a * t * t - b * t - (h - 33) * d
    trên 20degC: Fact = a * t + b * h + c
điều này giả định sự phụ thuộc tuyến tính vào độ ẩm
*/
float MQ135_getCorrectionFactor(MQ135* mq135, float t, float h) {
 80056a0:	b5b0      	push	{r4, r5, r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
    if (t < 20) {
 80056ac:	4952      	ldr	r1, [pc, #328]	@ (80057f8 <MQ135_getCorrectionFactor+0x158>)
 80056ae:	68b8      	ldr	r0, [r7, #8]
 80056b0:	f7fb fcd6 	bl	8001060 <__aeabi_fcmplt>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d052      	beq.n	8005760 <MQ135_getCorrectionFactor+0xc0>
        // Tính toán yếu tố hiệu chỉnh cho nhiệt độ dưới 20 độ C
        return CORA * t * t - CORB * t + CORC - (h - 33.0) * CORD;
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	f7fa feac 	bl	8000418 <__aeabi_f2d>
 80056c0:	a33f      	add	r3, pc, #252	@ (adr r3, 80057c0 <MQ135_getCorrectionFactor+0x120>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa feff 	bl	80004c8 <__aeabi_dmul>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4614      	mov	r4, r2
 80056d0:	461d      	mov	r5, r3
 80056d2:	68b8      	ldr	r0, [r7, #8]
 80056d4:	f7fa fea0 	bl	8000418 <__aeabi_f2d>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fef2 	bl	80004c8 <__aeabi_dmul>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4614      	mov	r4, r2
 80056ea:	461d      	mov	r5, r3
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	f7fa fe93 	bl	8000418 <__aeabi_f2d>
 80056f2:	a335      	add	r3, pc, #212	@ (adr r3, 80057c8 <MQ135_getCorrectionFactor+0x128>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa fee6 	bl	80004c8 <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fa fd28 	bl	8000158 <__aeabi_dsub>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	a32f      	add	r3, pc, #188	@ (adr r3, 80057d0 <MQ135_getCorrectionFactor+0x130>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa fd21 	bl	800015c <__adddf3>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4614      	mov	r4, r2
 8005720:	461d      	mov	r5, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fa fe78 	bl	8000418 <__aeabi_f2d>
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	4b33      	ldr	r3, [pc, #204]	@ (80057fc <MQ135_getCorrectionFactor+0x15c>)
 800572e:	f7fa fd13 	bl	8000158 <__aeabi_dsub>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	a327      	add	r3, pc, #156	@ (adr r3, 80057d8 <MQ135_getCorrectionFactor+0x138>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fec2 	bl	80004c8 <__aeabi_dmul>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4620      	mov	r0, r4
 800574a:	4629      	mov	r1, r5
 800574c:	f7fa fd04 	bl	8000158 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4610      	mov	r0, r2
 8005756:	4619      	mov	r1, r3
 8005758:	f7fb f986 	bl	8000a68 <__aeabi_d2f>
 800575c:	4603      	mov	r3, r0
 800575e:	e029      	b.n	80057b4 <MQ135_getCorrectionFactor+0x114>
    } else {
        // Tính toán yếu tố hiệu chỉnh cho nhiệt độ trên 20 độ C
        return CORE * t + CORF * h + CORG;
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f7fa fe59 	bl	8000418 <__aeabi_f2d>
 8005766:	a31e      	add	r3, pc, #120	@ (adr r3, 80057e0 <MQ135_getCorrectionFactor+0x140>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa feac 	bl	80004c8 <__aeabi_dmul>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4614      	mov	r4, r2
 8005776:	461d      	mov	r5, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fa fe4d 	bl	8000418 <__aeabi_f2d>
 800577e:	a31a      	add	r3, pc, #104	@ (adr r3, 80057e8 <MQ135_getCorrectionFactor+0x148>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f7fa fea0 	bl	80004c8 <__aeabi_dmul>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa fce4 	bl	800015c <__adddf3>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	a314      	add	r3, pc, #80	@ (adr r3, 80057f0 <MQ135_getCorrectionFactor+0x150>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fcdb 	bl	800015c <__adddf3>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	f7fb f95b 	bl	8000a68 <__aeabi_d2f>
 80057b2:	4603      	mov	r3, r0
    }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdb0      	pop	{r4, r5, r7, pc}
 80057bc:	f3af 8000 	nop.w
 80057c0:	8db8bac7 	.word	0x8db8bac7
 80057c4:	3f36f006 	.word	0x3f36f006
 80057c8:	ec6bce85 	.word	0xec6bce85
 80057cc:	3f9bd512 	.word	0x3f9bd512
 80057d0:	fa97e133 	.word	0xfa97e133
 80057d4:	3ff65379 	.word	0x3ff65379
 80057d8:	487fcb92 	.word	0x487fcb92
 80057dc:	3f5d7dbf 	.word	0x3f5d7dbf
 80057e0:	8717fb8e 	.word	0x8717fb8e
 80057e4:	bf6b4e81 	.word	0xbf6b4e81
 80057e8:	34a6f316 	.word	0x34a6f316
 80057ec:	bf5f81f8 	.word	0xbf5f81f8
 80057f0:	500c31e8 	.word	0x500c31e8
 80057f4:	3ff21501 	.word	0x3ff21501
 80057f8:	41a00000 	.word	0x41a00000
 80057fc:	40408000 	.word	0x40408000

08005800 <MQ135_getResistance>:

// Hàm đọc giá trị trở kháng của cảm biến
float MQ135_getResistance(MQ135* mq135) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
    sConfig.Channel = mq135->adcChannel;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800581a:	2301      	movs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
    HAL_ADC_ConfigChannel(mq135->hadc, &sConfig);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f107 0208 	add.w	r2, r7, #8
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f7fc fde3 	bl	80023f8 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(mq135->hadc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fc fbf2 	bl	8002020 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(mq135->hadc, HAL_MAX_DELAY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f04f 31ff 	mov.w	r1, #4294967295
 8005844:	4618      	mov	r0, r3
 8005846:	f7fc fcc5 	bl	80021d4 <HAL_ADC_PollForConversion>
    int val = HAL_ADC_GetValue(mq135->hadc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7fc fdc6 	bl	80023e0 <HAL_ADC_GetValue>
 8005854:	4603      	mov	r3, r0
 8005856:	617b      	str	r3, [r7, #20]
    HAL_ADC_Stop(mq135->hadc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fc fc8d 	bl	800217c <HAL_ADC_Stop>

    return ((4095.0 / (float)val) * 5.0 - 1.0) * RLOAD;
 8005862:	6978      	ldr	r0, [r7, #20]
 8005864:	f7fb fa0a 	bl	8000c7c <__aeabi_i2f>
 8005868:	4603      	mov	r3, r0
 800586a:	4618      	mov	r0, r3
 800586c:	f7fa fdd4 	bl	8000418 <__aeabi_f2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	a116      	add	r1, pc, #88	@ (adr r1, 80058d0 <MQ135_getResistance+0xd0>)
 8005876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800587a:	f7fa ff4f 	bl	800071c <__aeabi_ddiv>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4610      	mov	r0, r2
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <MQ135_getResistance+0xd8>)
 800588c:	f7fa fe1c 	bl	80004c8 <__aeabi_dmul>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <MQ135_getResistance+0xdc>)
 800589e:	f7fa fc5b 	bl	8000158 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	4b0c      	ldr	r3, [pc, #48]	@ (80058e0 <MQ135_getResistance+0xe0>)
 80058b0:	f7fa fe0a 	bl	80004c8 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	f7fb f8d4 	bl	8000a68 <__aeabi_d2f>
 80058c0:	4603      	mov	r3, r0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w
 80058d0:	00000000 	.word	0x00000000
 80058d4:	40affe00 	.word	0x40affe00
 80058d8:	40140000 	.word	0x40140000
 80058dc:	3ff00000 	.word	0x3ff00000
 80058e0:	40340000 	.word	0x40340000

080058e4 <MQ135_getCorrectedResistance>:

// Hàm tính toán giá trị trở kháng của cảm biến được hiệu chỉnh dựa trên nhiệt độ và độ ẩm
float MQ135_getCorrectedResistance(MQ135* mq135, float t, float h) {
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
    // Chia giá trị trở kháng đo được cho yếu tố hiệu chỉnh
    return MQ135_getResistance(mq135) / MQ135_getCorrectionFactor(mq135, t, h);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff ff85 	bl	8005800 <MQ135_getResistance>
 80058f6:	4604      	mov	r4, r0
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fecf 	bl	80056a0 <MQ135_getCorrectionFactor>
 8005902:	4603      	mov	r3, r0
 8005904:	4619      	mov	r1, r3
 8005906:	4620      	mov	r0, r4
 8005908:	f7fb fac0 	bl	8000e8c <__aeabi_fdiv>
 800590c:	4603      	mov	r3, r0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}
	...

08005918 <MQ135_getCorrectedCO2PPM>:
    // Tính toán nồng độ CO2 (ppm) sử dụng công thức đã được hiệu chỉnh
    return CO2_PARA * pow((MQ135_getResistance(mq135) / RZERO), -CO2_PARB);
}

// Hàm tính toán nồng độ CO2 dựa trên giá trị trở kháng được hiệu chỉnh của cảm biến
float MQ135_getCorrectedCO2PPM(MQ135* mq135, float t, float h) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
    // Tính toán nồng độ CO2 (ppm) sử dụng giá trị trở kháng đã được hiệu chỉnh
	mq135->Co2 = CO2_PARA * pow((MQ135_getCorrectedResistance(mq135, t, h) / RZERO), -CO2_PARB);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ffdb 	bl	80058e4 <MQ135_getCorrectedResistance>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fd71 	bl	8000418 <__aeabi_f2d>
 8005936:	a312      	add	r3, pc, #72	@ (adr r3, 8005980 <MQ135_getCorrectedCO2PPM+0x68>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa feee 	bl	800071c <__aeabi_ddiv>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	a30f      	add	r3, pc, #60	@ (adr r3, 8005988 <MQ135_getCorrectedCO2PPM+0x70>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f001 f94d 	bl	8006bec <pow>
 8005952:	a30f      	add	r3, pc, #60	@ (adr r3, 8005990 <MQ135_getCorrectedCO2PPM+0x78>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fdb6 	bl	80004c8 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	f7fb f880 	bl	8000a68 <__aeabi_d2f>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	609a      	str	r2, [r3, #8]
    return mq135->Co2;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w
 8005980:	eb851eb8 	.word	0xeb851eb8
 8005984:	40536851 	.word	0x40536851
 8005988:	bf42646d 	.word	0xbf42646d
 800598c:	400626fb 	.word	0x400626fb
 8005990:	490f3d8b 	.word	0x490f3d8b
 8005994:	405d2688 	.word	0x405d2688

08005998 <MQ135_getRatio>:
}



// Hàm tính tỷ lệ Rs/R0 để tìm giá trị ppm của khí CO
float MQ135_getRatio(MQ135* mq135) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
    float resistance = MQ135_getResistance(mq135);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ff2d 	bl	8005800 <MQ135_getResistance>
 80059a6:	60f8      	str	r0, [r7, #12]
    if (resistance < 0) {
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7fb fb57 	bl	8001060 <__aeabi_fcmplt>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <MQ135_getRatio+0x24>
        return -1.0; // Tránh giá trị không hợp lệ
 80059b8:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <MQ135_getRatio+0x58>)
 80059ba:	e00e      	b.n	80059da <MQ135_getRatio+0x42>
    }
    return resistance / RZERO; // Tính tỷ lệ Rs/R0
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7fa fd2b 	bl	8000418 <__aeabi_f2d>
 80059c2:	a309      	add	r3, pc, #36	@ (adr r3, 80059e8 <MQ135_getRatio+0x50>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fea8 	bl	800071c <__aeabi_ddiv>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	f7fb f848 	bl	8000a68 <__aeabi_d2f>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	f3af 8000 	nop.w
 80059e8:	eb851eb8 	.word	0xeb851eb8
 80059ec:	40536851 	.word	0x40536851
 80059f0:	bf800000 	.word	0xbf800000
 80059f4:	00000000 	.word	0x00000000

080059f8 <MQ135_getCOPPM>:

// Hàm trả về giá trị ppm của nồng độ khi CO
float MQ135_getCOPPM(MQ135* mq135) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
    float ratio = MQ135_getRatio(mq135);    // Tính tỷ lệ Rs/R0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ffc9 	bl	8005998 <MQ135_getRatio>
 8005a06:	60f8      	str	r0, [r7, #12]
    if (ratio < 0) {
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7fb fb27 	bl	8001060 <__aeabi_fcmplt>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <MQ135_getCOPPM+0x24>
        return -1.0;    // Tránh chia cho 0 hoặc giá trị không hợp lệ
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <MQ135_getCOPPM+0x70>)
 8005a1a:	e017      	b.n	8005a4c <MQ135_getCOPPM+0x54>
    }
    mq135->CO = COEFFICIENT_A * pow(ratio, COEFFICIENT_B);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7fa fcfb 	bl	8000418 <__aeabi_f2d>
 8005a22:	a30d      	add	r3, pc, #52	@ (adr r3, 8005a58 <MQ135_getCOPPM+0x60>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f001 f8e0 	bl	8006bec <pow>
 8005a2c:	a30c      	add	r3, pc, #48	@ (adr r3, 8005a60 <MQ135_getCOPPM+0x68>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fd49 	bl	80004c8 <__aeabi_dmul>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f7fb f813 	bl	8000a68 <__aeabi_d2f>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]
    // Tính và trả về giá trị ppm của CO
    return mq135->CO;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	f3af 8000 	nop.w
 8005a58:	51eb851f 	.word	0x51eb851f
 8005a5c:	c0051eb8 	.word	0xc0051eb8
 8005a60:	851eb852 	.word	0x851eb852
 8005a64:	403351eb 	.word	0x403351eb
 8005a68:	bf800000 	.word	0xbf800000

08005a6c <PM25_init>:
#include "PM25.h"

extern ADC_HandleTypeDef hadc1;

// Khởi tạo cảm biến mà không cần chỉ định điện áp cung cấp (mặc định là 5.0V)
void PM25_init(PM25 *pm25, GPIO_TypeDef *voPort, uint16_t voPin, GPIO_TypeDef *ledPort, uint16_t ledPin) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStruct = {0};  // Khởi tạo cấu trúc GPIO_InitTypeDef với tất cả các thành phần bằng 0
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	60da      	str	r2, [r3, #12]

    // Đặt chân LED là đầu ra
    GPIO_InitStruct.Pin = ledPin;  // Cấu hình chân GPIO cho LED
 8005a8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Đặt chế độ của chân GPIO là chế độ đầu ra đẩy-kéo (output push-pull)
 8005a8e:	2301      	movs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Đặt tốc độ của chân GPIO là tốc độ thấp
 8005a92:	2302      	movs	r3, #2
 8005a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ledPort, &GPIO_InitStruct);  // Khởi tạo chân GPIO với các thông số đã cấu hình
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6838      	ldr	r0, [r7, #0]
 8005a9e:	f7fc ff4d 	bl	800293c <HAL_GPIO_Init>

    // Gán các giá trị cho các thành phần của cấu trúc PM25
    pm25->voPort = voPort;  // Gán giá trị cổng GPIO sử dụng để đọc điện áp từ cảm biến bụi
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	601a      	str	r2, [r3, #0]
    pm25->voPin = voPin;  // Gán giá trị chân GPIO sử dụng để đọc điện áp từ cảm biến bụi
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	809a      	strh	r2, [r3, #4]
    pm25->ledPort = ledPort;  // Gán giá trị cổng GPIO sử dụng để điều khiển LED
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	609a      	str	r2, [r3, #8]
    pm25->ledPin = ledPin;  // Gán giá trị chân GPIO sử dụng để điều khiển LED
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ab8:	819a      	strh	r2, [r3, #12]
    pm25->vccVol = 5.0;  // Đặt điện áp cung cấp cho cảm biến là 5.0V
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a08      	ldr	r2, [pc, #32]	@ (8005ae0 <PM25_init+0x74>)
 8005abe:	61da      	str	r2, [r3, #28]
    pm25->dustDensity = 0;  // Khởi tạo mật độ bụi đo được là 0
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
    pm25->volMeasured = 0;  // Khởi tạo giá trị điện áp đo được là 0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	615a      	str	r2, [r3, #20]
    pm25->calcVoltage = 0;  // Khởi tạo giá trị điện áp tính toán là 0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
}
 8005ad8:	bf00      	nop
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40a00000 	.word	0x40a00000
 8005ae4:	00000000 	.word	0x00000000

08005ae8 <PM25_calc>:

// Tính toán mật độ bụi dựa trên các phép đo của cảm biến
void PM25_calc(PM25 *pm25) {
 8005ae8:	b5b0      	push	{r4, r5, r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pm25->ledPort, pm25->ledPin, GPIO_PIN_RESET); // Bật LED
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6898      	ldr	r0, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	899b      	ldrh	r3, [r3, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7fd f8b9 	bl	8002c72 <HAL_GPIO_WritePin>
    HAL_Delay(PM25_SAMPLINGTIME / 1000); // Đợi thời gian lấy mẫu (chuyển đổi từ us sang ms)
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7fc f991 	bl	8001e28 <HAL_Delay>
	ADC_ChannelConfTypeDef sConfig = {0};
 8005b06:	f107 030c 	add.w	r3, r7, #12
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8005b12:	2302      	movs	r3, #2
 8005b14:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = 2;
 8005b16:	2302      	movs	r3, #2
 8005b18:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b1e:	f107 030c 	add.w	r3, r7, #12
 8005b22:	4619      	mov	r1, r3
 8005b24:	4840      	ldr	r0, [pc, #256]	@ (8005c28 <PM25_calc+0x140>)
 8005b26:	f7fc fc67 	bl	80023f8 <HAL_ADC_ConfigChannel>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <PM25_calc+0x4c>
	  {
	    Error_Handler();
 8005b30:	f7fb ff66 	bl	8001a00 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc1);
 8005b34:	483c      	ldr	r0, [pc, #240]	@ (8005c28 <PM25_calc+0x140>)
 8005b36:	f7fc fa73 	bl	8002020 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8005b3a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005b3e:	483a      	ldr	r0, [pc, #232]	@ (8005c28 <PM25_calc+0x140>)
 8005b40:	f7fc fb48 	bl	80021d4 <HAL_ADC_PollForConversion>
    pm25->volMeasured = HAL_ADC_GetValue(&hadc1); // Đọc giá trị analog từ chân Vo
 8005b44:	4838      	ldr	r0, [pc, #224]	@ (8005c28 <PM25_calc+0x140>)
 8005b46:	f7fc fc4b 	bl	80023e0 <HAL_ADC_GetValue>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fb f891 	bl	8000c74 <__aeabi_ui2f>
 8005b52:	4602      	mov	r2, r0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	615a      	str	r2, [r3, #20]
    HAL_ADC_Stop(&hadc1);
 8005b58:	4833      	ldr	r0, [pc, #204]	@ (8005c28 <PM25_calc+0x140>)
 8005b5a:	f7fc fb0f 	bl	800217c <HAL_ADC_Stop>

    HAL_Delay(PM25_DELTATIME / 1000); // Đợi thời gian delta
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f7fc f962 	bl	8001e28 <HAL_Delay>
    HAL_GPIO_WritePin(pm25->ledPort, pm25->ledPin, GPIO_PIN_SET); // Tắt LED
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6898      	ldr	r0, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	899b      	ldrh	r3, [r3, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f7fd f87f 	bl	8002c72 <HAL_GPIO_WritePin>
    HAL_Delay(PM25_SLEEPINGTIME / 1000); // Đợi thời gian ngủ
 8005b74:	2009      	movs	r0, #9
 8005b76:	f7fc f957 	bl	8001e28 <HAL_Delay>

    // Tính toán điện áp thực từ giá trị ADC
    pm25->calcVoltage = pm25->volMeasured * (pm25->vccVol / 4096.0);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fc4a 	bl	8000418 <__aeabi_f2d>
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fa fc43 	bl	8000418 <__aeabi_f2d>
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	4b25      	ldr	r3, [pc, #148]	@ (8005c2c <PM25_calc+0x144>)
 8005b98:	f7fa fdc0 	bl	800071c <__aeabi_ddiv>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	f7fa fc90 	bl	80004c8 <__aeabi_dmul>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4610      	mov	r0, r2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f7fa ff5a 	bl	8000a68 <__aeabi_d2f>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]

    // Tính toán mật độ bụi sử dụng phương trình tuyến tính được cung cấp bởi Chris Nafis
    pm25->dustDensity = 0.17 * pm25->calcVoltage - 0.1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fc2a 	bl	8000418 <__aeabi_f2d>
 8005bc4:	a314      	add	r3, pc, #80	@ (adr r3, 8005c18 <PM25_calc+0x130>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa fc7d 	bl	80004c8 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	a312      	add	r3, pc, #72	@ (adr r3, 8005c20 <PM25_calc+0x138>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fabc 	bl	8000158 <__aeabi_dsub>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	f7fa ff3e 	bl	8000a68 <__aeabi_d2f>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

    if (pm25->dustDensity < 0) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb fa30 	bl	8001060 <__aeabi_fcmplt>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d100      	bne.n	8005c08 <PM25_calc+0x120>
        pm25->dustDensity = 0.00; // Đảm bảo mật độ bụi không âm
    }
}
 8005c06:	e003      	b.n	8005c10 <PM25_calc+0x128>
        pm25->dustDensity = 0.00; // Đảm bảo mật độ bụi không âm
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	611a      	str	r2, [r3, #16]
}
 8005c10:	bf00      	nop
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bdb0      	pop	{r4, r5, r7, pc}
 8005c18:	5c28f5c3 	.word	0x5c28f5c3
 8005c1c:	3fc5c28f 	.word	0x3fc5c28f
 8005c20:	9999999a 	.word	0x9999999a
 8005c24:	3fb99999 	.word	0x3fb99999
 8005c28:	20000110 	.word	0x20000110
 8005c2c:	40b00000 	.word	0x40b00000

08005c30 <PM25_getDustDensity>:
35.5 - 55.4 µg/m³: Không tốt cho nhóm nhạy cảm
55.5 - 150.4 µg/m³: Không tốt
150.5 - 250.4 µg/m³: Rất không tốt
250.5 µg/m³: Nguy hiểm
*/
float PM25_getDustDensity(PM25 *pm25) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
    PM25_calc(pm25); // Tính toán các giá trị
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff55 	bl	8005ae8 <PM25_calc>
    return pm25->dustDensity; // Trả về mật độ bụi
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <newLcp>:
#define LENGTH_OF_HEAD			10
#define LENGTH_OF_HEAD_TCP			6


lcp_t *newLcp(uint16_t ip_addr, uint8_t maxConn, uint8_t maxPort, uint8_t maxSizePtk, uint8_t cycleTime)
{
 8005c4a:	b590      	push	{r4, r7, lr}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	4604      	mov	r4, r0
 8005c52:	4608      	mov	r0, r1
 8005c54:	4611      	mov	r1, r2
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	80fb      	strh	r3, [r7, #6]
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	717b      	strb	r3, [r7, #5]
 8005c60:	460b      	mov	r3, r1
 8005c62:	713b      	strb	r3, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	70fb      	strb	r3, [r7, #3]
	lcp_t *nlcp = (lcp_t *)malloc(sizeof(lcp_t));
 8005c68:	2028      	movs	r0, #40	@ 0x28
 8005c6a:	f000 fe29 	bl	80068c0 <malloc>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	60bb      	str	r3, [r7, #8]

	nlcp->maxConn 	= maxConn;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	797a      	ldrb	r2, [r7, #5]
 8005c76:	701a      	strb	r2, [r3, #0]
//	nlcp->maxPort 	= maxPort;
	nlcp->cycleTime = cycleTime;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005c7e:	705a      	strb	r2, [r3, #1]
	nlcp->ip_addr 	= ip_addr;
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	721a      	strb	r2, [r3, #8]
	nlcp->realTime 	= 0;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]

	nlcp->Lcp_connected  	= NULL;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2200      	movs	r2, #0
 8005c92:	619a      	str	r2, [r3, #24]
	nlcp->Lcp_disconnected  = NULL;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	621a      	str	r2, [r3, #32]
	nlcp->Lcp_sendmessage 	= NULL;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	61da      	str	r2, [r3, #28]

	nlcp->ListConn 	= (lcp_conn_t *)malloc(maxConn * sizeof(lcp_conn_t));
 8005ca0:	797a      	ldrb	r2, [r7, #5]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fe08 	bl	80068c0 <malloc>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	60da      	str	r2, [r3, #12]
//	nlcp->listPort 	= (uint8_t *)malloc(maxPort * sizeof(uint8_t));

	nlcp->fifo		= newFifo(2);
 8005cb8:	2002      	movs	r0, #2
 8005cba:	f7ff f8f4 	bl	8004ea6 <newFifo>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	611a      	str	r2, [r3, #16]
	nlcp->fifo_send = newFifo(2);
 8005cc4:	2002      	movs	r0, #2
 8005cc6:	f7ff f8ee 	bl	8004ea6 <newFifo>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	615a      	str	r2, [r3, #20]
//	for(uint8_t countPort = 0; countPort < maxPort; countPort ++)
//	{
//		nlcp->listPort[countPort] = 0;
//	}

	for(uint8_t countConn = 0; countConn < maxConn; countConn ++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e034      	b.n	8005d40 <newLcp+0xf6>
	{
		nlcp->ListConn[countConn].state = CLOSE;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	68d9      	ldr	r1, [r3, #12]
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	725a      	strb	r2, [r3, #9]
		nlcp->ListConn[countConn].Flag.byte  = 0;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68d9      	ldr	r1, [r3, #12]
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
		nlcp->ListConn[countConn].timeCircle = 0;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68d9      	ldr	r1, [r3, #12]
 8005d02:	7bfa      	ldrb	r2, [r7, #15]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	2200      	movs	r2, #0
 8005d10:	71da      	strb	r2, [r3, #7]
		nlcp->ListConn[countConn].timeOffset = 0;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	68d9      	ldr	r1, [r3, #12]
 8005d16:	7bfa      	ldrb	r2, [r7, #15]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	2200      	movs	r2, #0
 8005d24:	721a      	strb	r2, [r3, #8]
		nlcp->ListConn[countConn].timetolive = 0;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68d9      	ldr	r1, [r3, #12]
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	2200      	movs	r2, #0
 8005d38:	719a      	strb	r2, [r3, #6]
	for(uint8_t countConn = 0; countConn < maxConn; countConn ++)
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	7bfa      	ldrb	r2, [r7, #15]
 8005d42:	797b      	ldrb	r3, [r7, #5]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3c6      	bcc.n	8005cd6 <newLcp+0x8c>
	}

	return nlcp;
 8005d48:	68bb      	ldr	r3, [r7, #8]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}

08005d52 <Lcp_pushMessage>:

	free(lcp_obj);
}

void Lcp_pushMessage(lcp_t *lcp_obj, uint8_t *data, uint16_t length)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
	Fifo_AddData(lcp_obj->fifo, data, length);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe ff74 	bl	8004c56 <Fifo_AddData>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <Lcp_pullMessage>:
uint8_t Lcp_pullMessage(lcp_t *lcp_obj, uint8_t *data, uint16_t *length)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
	return Fifo_GetData(lcp_obj->fifo, data, length);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fff1 	bl	8004d72 <Fifo_GetData>
 8005d90:	4603      	mov	r3, r0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <Lcp_pullMessageSend>:
uint8_t Lcp_pullMessageSend(lcp_t *lcp_obj, uint8_t *data, uint16_t *length) // acp_getPacketsend
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
	return Fifo_GetData(lcp_obj->fifo_send, data, length);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe ffdf 	bl	8004d72 <Fifo_GetData>
 8005db4:	4603      	mov	r3, r0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <Lcp_countData>:
uint16_t Lcp_countData(lcp_t *lcp_obj)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
	return Fifo_GetSizeData(lcp_obj->fifo);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe ffbd 	bl	8004d4a <Fifo_GetSizeData>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <Lcp_Connect>:


lcp_conn_t * Lcp_Connect(lcp_t *lcp_obj, point des)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	8039      	strh	r1, [r7, #0]
	lcp_conn_t *newConn;
	uint16_t Timeout = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t count = 0; count < lcp_obj->maxConn; count ++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	737b      	strb	r3, [r7, #13]
 8005dec:	e04e      	b.n	8005e8c <Lcp_Connect+0xb2>
	{
		if(lcp_obj->ListConn[count].state == CLOSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68d9      	ldr	r1, [r3, #12]
 8005df2:	7b7a      	ldrb	r2, [r7, #13]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	7a5b      	ldrb	r3, [r3, #9]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d140      	bne.n	8005e86 <Lcp_Connect+0xac>
		{
			newConn = &lcp_obj->ListConn[count];
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68d9      	ldr	r1, [r3, #12]
 8005e08:	7b7a      	ldrb	r2, [r7, #13]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	60bb      	str	r3, [r7, #8]
			newConn->src.addr    = lcp_obj->ip_addr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7a1b      	ldrb	r3, [r3, #8]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	805a      	strh	r2, [r3, #2]

			newConn->des.addr    = des.addr;
 8005e20:	883a      	ldrh	r2, [r7, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	809a      	strh	r2, [r3, #4]

			newConn->Flag.bit.SYN = 1;
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	7813      	ldrb	r3, [r2, #0]
 8005e2a:	f043 0302 	orr.w	r3, r3, #2
 8005e2e:	7013      	strb	r3, [r2, #0]
			while(lcp_obj->ListConn[count].state != ESTABLISHED)
 8005e30:	e015      	b.n	8005e5e <Lcp_Connect+0x84>
			{
				if(++ Timeout == 500)
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	3301      	adds	r3, #1
 8005e36:	81fb      	strh	r3, [r7, #14]
 8005e38:	89fb      	ldrh	r3, [r7, #14]
 8005e3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e3e:	d10b      	bne.n	8005e58 <Lcp_Connect+0x7e>
				{
					lcp_obj->ListConn[count].state = CLOSE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68d9      	ldr	r1, [r3, #12]
 8005e44:	7b7a      	ldrb	r2, [r7, #13]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	2200      	movs	r2, #0
 8005e52:	725a      	strb	r2, [r3, #9]
					return NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e01f      	b.n	8005e98 <Lcp_Connect+0xbe>
				}
				HAL_Delay(1);
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fb ffe5 	bl	8001e28 <HAL_Delay>
			while(lcp_obj->ListConn[count].state != ESTABLISHED)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68d9      	ldr	r1, [r3, #12]
 8005e62:	7b7a      	ldrb	r2, [r7, #13]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	7a5b      	ldrb	r3, [r3, #9]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d1de      	bne.n	8005e32 <Lcp_Connect+0x58>
			}
			return &lcp_obj->ListConn[count];
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68d9      	ldr	r1, [r3, #12]
 8005e78:	7b7a      	ldrb	r2, [r7, #13]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	e008      	b.n	8005e98 <Lcp_Connect+0xbe>
	for(uint8_t count = 0; count < lcp_obj->maxConn; count ++)
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	737b      	strb	r3, [r7, #13]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	7b7a      	ldrb	r2, [r7, #13]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d3ab      	bcc.n	8005dee <Lcp_Connect+0x14>
		}
	}

	return NULL;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <Lcp_disconnect>:

lcp_conn_t * Lcp_disconnect(lcp_conn_t *connection)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	if(connection->state == ESTABLISHED)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	7a5b      	ldrb	r3, [r3, #9]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d115      	bne.n	8005edc <Lcp_disconnect+0x3c>
	{

		connection->timetolive = 0;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	719a      	strb	r2, [r3, #6]
		connection->state = CLOSE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	725a      	strb	r2, [r3, #9]
		connection->des.addr  = 0;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	809a      	strh	r2, [r3, #4]
		connection->src.addr  = 0;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	805a      	strh	r2, [r3, #2]
		Fifo_Dispose(connection->rxBuff);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe ffb3 	bl	8004e38 <Fifo_Dispose>
		Fifo_Dispose(connection->txBuff);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe ffae 	bl	8004e38 <Fifo_Dispose>
	}
	return NULL;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <Lcp_Runtime>:

void Lcp_Runtime(lcp_t *lcp_obj, uint16_t timecircle)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	807b      	strh	r3, [r7, #2]

	if(++lcp_obj->realTime == 0xFFFFFFFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <Lcp_Runtime+0x26>
	{
		lcp_obj->realTime = 0;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	605a      	str	r2, [r3, #4]
	}
	if(++ lcp_obj->ListConn->timetolive >= 50)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	799a      	ldrb	r2, [r3, #6]
 8005f12:	3201      	adds	r2, #1
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	719a      	strb	r2, [r3, #6]
 8005f18:	799b      	ldrb	r3, [r3, #6]
 8005f1a:	2b31      	cmp	r3, #49	@ 0x31
 8005f1c:	d904      	bls.n	8005f28 <Lcp_Runtime+0x42>
	{
		Lcp_disconnect(lcp_obj->ListConn);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff ffbc 	bl	8005ea0 <Lcp_disconnect>

	}
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <Lcp_nProcess>:

#ifdef NODE

void Lcp_nProcess(lcp_t *lcp_obj, uint8_t Timecycle)
{
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b08b      	sub	sp, #44	@ 0x2c
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	70fb      	strb	r3, [r7, #3]
	static uint8_t timetolive;
	static uint8_t countTime = 0;
	uint8_t countTimecycle = 1000 / Timecycle;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	uint8_t 	*data 			= NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t 	lenData	 = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	837b      	strh	r3, [r7, #26]

	uint16_t 	length 			= 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	833b      	strh	r3, [r7, #24]
	pack_t lcp_dataframe = { .data = NULL	};
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	60da      	str	r2, [r3, #12]

	length = Lcp_countData(lcp_obj);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff ff2a 	bl	8005dbe <Lcp_countData>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	833b      	strh	r3, [r7, #24]

	if(length != 0)
 8005f6e:	8b3b      	ldrh	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 808d 	beq.w	8006090 <Lcp_nProcess+0x160>
	{
		/* phan tach frame va check crc*/
		data = (uint8_t *)malloc(length * sizeof(uint8_t));
 8005f76:	8b3b      	ldrh	r3, [r7, #24]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fca1 	bl	80068c0 <malloc>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
		if((Lcp_pullMessage(lcp_obj, data, &length) == LCP_OK) && (data != NULL))
 8005f82:	f107 0318 	add.w	r3, r7, #24
 8005f86:	461a      	mov	r2, r3
 8005f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fef3 	bl	8005d76 <Lcp_pullMessage>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d17c      	bne.n	8006090 <Lcp_nProcess+0x160>
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d079      	beq.n	8006090 <Lcp_nProcess+0x160>
		{
			memcpy(lcp_dataframe.head.rawdata, data, sizeof(Head_t));
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	6810      	ldr	r0, [r2, #0]
 8005fa4:	6851      	ldr	r1, [r2, #4]
 8005fa6:	c303      	stmia	r3!, {r0, r1}
			if(lcp_dataframe.head.param.length > LENGTH_OF_HEAD)
 8005fa8:	7a7b      	ldrb	r3, [r7, #9]
 8005faa:	2b0a      	cmp	r3, #10
 8005fac:	d917      	bls.n	8005fde <Lcp_nProcess+0xae>
			{
				lenData = lcp_dataframe.head.param.length - LENGTH_OF_HEAD;
 8005fae:	7a7b      	ldrb	r3, [r7, #9]
 8005fb0:	3b0a      	subs	r3, #10
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	837b      	strh	r3, [r7, #26]
				lcp_dataframe.data = malloc((lenData) * sizeof(uint8_t));
 8005fb6:	8b7b      	ldrh	r3, [r7, #26]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fc81 	bl	80068c0 <malloc>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	613b      	str	r3, [r7, #16]
				memcpy(lcp_dataframe.data, &data[LENGTH_OF_HEAD], lenData);
 8005fc2:	6938      	ldr	r0, [r7, #16]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	330a      	adds	r3, #10
 8005fc8:	8b7a      	ldrh	r2, [r7, #26]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	f000 fdb0 	bl	8006b30 <memcpy>
				lcp_dataframe.crc = data[lcp_dataframe.head.param.length];
 8005fd0:	7a7b      	ldrb	r3, [r7, #9]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	753b      	strb	r3, [r7, #20]
 8005fdc:	e004      	b.n	8005fe8 <Lcp_nProcess+0xb8>
			}
			else
			{
				lcp_dataframe.crc = data[LENGTH_OF_HEAD];
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	7a9b      	ldrb	r3, [r3, #10]
 8005fe2:	753b      	strb	r3, [r7, #20]
				lcp_dataframe.data = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
			}

			if(lcp_dataframe.crc != Crc8_CalCcit(data, lcp_dataframe.head.param.length))
 8005fe8:	7d3c      	ldrb	r4, [r7, #20]
 8005fea:	7a7b      	ldrb	r3, [r7, #9]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ff0:	f7ff f9c0 	bl	8005374 <Crc8_CalCcit>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	f040 8142 	bne.w	8006280 <Lcp_nProcess+0x350>
			{
				goto DROP;
			}

			if(lcp_dataframe.head.param.flag.byte & LCP_SYN)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03b      	beq.n	800607e <Lcp_nProcess+0x14e>
			{
				if(lcp_obj->ListConn->state == SEND)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	7a5b      	ldrb	r3, [r3, #9]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d121      	bne.n	8006054 <Lcp_nProcess+0x124>
				{
					lcp_obj->ListConn->state = ESTABLISHED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2203      	movs	r2, #3
 8006016:	725a      	strb	r2, [r3, #9]
					lcp_obj->ListConn->timeCircle = lcp_dataframe.head.param.cirle_time;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	7afa      	ldrb	r2, [r7, #11]
 800601e:	71da      	strb	r2, [r3, #7]
					lcp_obj->ListConn->timeOffset = lcp_dataframe.head.param.ofset_time;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	7b3a      	ldrb	r2, [r7, #12]
 8006026:	721a      	strb	r2, [r3, #8]
					lcp_obj->ListConn->src.addr   = lcp_dataframe.head.param.id_des;
 8006028:	7bba      	ldrb	r2, [r7, #14]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	805a      	strh	r2, [r3, #2]
					lcp_obj->ListConn->des.addr	  = lcp_dataframe.head.param.id_scr;
 8006030:	7b7a      	ldrb	r2, [r7, #13]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	809a      	strh	r2, [r3, #4]
					lcp_obj->ListConn->txBuff = newFifo(1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68dc      	ldr	r4, [r3, #12]
 800603c:	2001      	movs	r0, #1
 800603e:	f7fe ff32 	bl	8004ea6 <newFifo>
 8006042:	4603      	mov	r3, r0
 8006044:	6123      	str	r3, [r4, #16]
					lcp_obj->ListConn->rxBuff = newFifo(1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68dc      	ldr	r4, [r3, #12]
 800604a:	2001      	movs	r0, #1
 800604c:	f7fe ff2b 	bl	8004ea6 <newFifo>
 8006050:	4603      	mov	r3, r0
 8006052:	60e3      	str	r3, [r4, #12]

				}
				lcp_obj->realTime = lcp_dataframe.data[0] << 24 | \
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	061a      	lsls	r2, r3, #24
														lcp_dataframe.data[1] << 16 | \
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3301      	adds	r3, #1
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	041b      	lsls	r3, r3, #16
				lcp_obj->realTime = lcp_dataframe.data[0] << 24 | \
 8006062:	431a      	orrs	r2, r3
														lcp_dataframe.data[2] << 8  |
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3302      	adds	r3, #2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	021b      	lsls	r3, r3, #8
														lcp_dataframe.data[1] << 16 | \
 800606c:	4313      	orrs	r3, r2
														lcp_dataframe.data[3];
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	3203      	adds	r2, #3
 8006072:	7812      	ldrb	r2, [r2, #0]
														lcp_dataframe.data[2] << 8  |
 8006074:	4313      	orrs	r3, r2
 8006076:	461a      	mov	r2, r3
				lcp_obj->realTime = lcp_dataframe.data[0] << 24 | \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
				goto DROP;
 800607c:	e103      	b.n	8006286 <Lcp_nProcess+0x356>
			}
			else if(lcp_dataframe.head.param.flag.byte & LCP_ACK)
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <Lcp_nProcess+0x160>
			{
				lcp_obj->ListConn->timetolive = 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	719a      	strb	r2, [r3, #6]
			}

		}
	}

	if(lcp_obj->ListConn->Flag.bit.SYN == 1 && lcp_obj->ListConn->state == CLOSE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d024      	beq.n	80060ea <Lcp_nProcess+0x1ba>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	7a5b      	ldrb	r3, [r3, #9]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11f      	bne.n	80060ea <Lcp_nProcess+0x1ba>
	{
		lcp_obj->ListConn->state = SEND;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2202      	movs	r2, #2
 80060b0:	725a      	strb	r2, [r3, #9]
		lcp_obj->ListConn->Flag.bit.SYN = 0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	7813      	ldrb	r3, [r2, #0]
 80060b8:	f36f 0341 	bfc	r3, #1, #1
 80060bc:	7013      	strb	r3, [r2, #0]
		lcp_obj->ListConn->timetolive = 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	719a      	strb	r2, [r3, #6]
			lcp_dataframe.head.param.flag.byte = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
			lcp_dataframe.head.param.flag.bit.SYN = 1;
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	73fb      	strb	r3, [r7, #15]
			if(lcp_dataframe.data != NULL)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d070      	beq.n	80061ba <Lcp_nProcess+0x28a>
			{
				free(lcp_dataframe.data);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fbf8 	bl	80068d0 <free>
				lcp_dataframe.data = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
				lenData = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	837b      	strh	r3, [r7, #26]
			}
			goto Node_SEND;
 80060e8:	e067      	b.n	80061ba <Lcp_nProcess+0x28a>
	}
	if(lcp_obj->ListConn->state == ESTABLISHED && (lcp_obj->ListConn->timeCircle > 0))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	7a5b      	ldrb	r3, [r3, #9]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d14a      	bne.n	800618a <Lcp_nProcess+0x25a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	79db      	ldrb	r3, [r3, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d045      	beq.n	800618a <Lcp_nProcess+0x25a>
	{
		if( lcp_obj->ListConn->Flag.bit.PSH == 1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d03d      	beq.n	800618a <Lcp_nProcess+0x25a>
		{
			lenData = Fifo_GetSizeData(lcp_obj->ListConn->txBuff);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fe18 	bl	8004d4a <Fifo_GetSizeData>
 800611a:	4603      	mov	r3, r0
 800611c:	837b      	strh	r3, [r7, #26]
			if(lcp_obj->Lcp_sendmessage != NULL && lenData == 0)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <Lcp_nProcess+0x20a>
 8006126:	8b7b      	ldrh	r3, [r7, #26]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <Lcp_nProcess+0x20a>
			{
				lcp_obj->Lcp_sendmessage(lcp_obj->ListConn, 1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68d2      	ldr	r2, [r2, #12]
 8006134:	2101      	movs	r1, #1
 8006136:	4610      	mov	r0, r2
 8006138:	4798      	blx	r3
			}
			lenData = Fifo_GetSizeData(lcp_obj->ListConn->txBuff);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fe02 	bl	8004d4a <Fifo_GetSizeData>
 8006146:	4603      	mov	r3, r0
 8006148:	837b      	strh	r3, [r7, #26]
			if(lenData > 0)
 800614a:	8b7b      	ldrh	r3, [r7, #26]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01c      	beq.n	800618a <Lcp_nProcess+0x25a>
			{
				lcp_dataframe.data = (uint8_t *)malloc(lenData * sizeof(uint8_t));
 8006150:	8b7b      	ldrh	r3, [r7, #26]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fbb4 	bl	80068c0 <malloc>
 8006158:	4603      	mov	r3, r0
 800615a:	613b      	str	r3, [r7, #16]
				if(Fifo_GetData(lcp_obj->ListConn->txBuff, lcp_dataframe.data, &lenData) == BUFF_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	6939      	ldr	r1, [r7, #16]
 8006164:	f107 021a 	add.w	r2, r7, #26
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fe02 	bl	8004d72 <Fifo_GetData>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <Lcp_nProcess+0x25a>
				{
					lcp_dataframe.head.param.flag.bit.PSH = 1;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	f043 0304 	orr.w	r3, r3, #4
 800617a:	73fb      	strb	r3, [r7, #15]
					lcp_obj->ListConn->Flag.bit.PSH = 0;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	7813      	ldrb	r3, [r2, #0]
 8006182:	f36f 0382 	bfc	r3, #2, #1
 8006186:	7013      	strb	r3, [r2, #0]
					goto Node_SEND;
 8006188:	e018      	b.n	80061bc <Lcp_nProcess+0x28c>
				}
			}
		}
	}

	if(lcp_obj->ListConn->Flag.bit.FIN == 1 && lcp_obj->ListConn->state == ESTABLISHED)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d074      	beq.n	8006284 <Lcp_nProcess+0x354>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	7a5b      	ldrb	r3, [r3, #9]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d16f      	bne.n	8006284 <Lcp_nProcess+0x354>
	{
		lcp_dataframe.head.param.flag.bit.FIN = 1;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
		lcp_obj->ListConn->Flag.bit.FIN = 0;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	7813      	ldrb	r3, [r2, #0]
 80061b2:	f36f 0300 	bfc	r3, #0, #1
 80061b6:	7013      	strb	r3, [r2, #0]
		goto Node_SEND;
 80061b8:	e000      	b.n	80061bc <Lcp_nProcess+0x28c>
			goto Node_SEND;
 80061ba:	bf00      	nop

	goto DROP;

	Node_SEND:

	lcp_dataframe.head.param.version      	= 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	723b      	strb	r3, [r7, #8]
	lcp_dataframe.head.param.id_scr 		= lcp_obj->ListConn->src.addr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	737b      	strb	r3, [r7, #13]
	lcp_dataframe.head.param.id_des   		= lcp_obj->ListConn->des.addr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	889b      	ldrh	r3, [r3, #4]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	73bb      	strb	r3, [r7, #14]
	lcp_dataframe.head.param.cirle_time 	= lcp_obj->ListConn->timeCircle;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	79db      	ldrb	r3, [r3, #7]
 80061da:	72fb      	strb	r3, [r7, #11]
	lcp_dataframe.head.param.ofset_time		= lcp_obj->ListConn->timeOffset;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	7a1b      	ldrb	r3, [r3, #8]
 80061e2:	733b      	strb	r3, [r7, #12]
	lcp_dataframe.head.param.syn_time		= lcp_obj->realTime;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	72bb      	strb	r3, [r7, #10]
	lcp_dataframe.head.param.length 		= LENGTH_OF_HEAD + lenData;
 80061ec:	8b7b      	ldrh	r3, [r7, #26]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	330a      	adds	r3, #10
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	727b      	strb	r3, [r7, #9]

		Buffer *BuffRespond = newBuffer();
 80061f6:	f7fe f80f 	bl	8004218 <newBuffer>
 80061fa:	61f8      	str	r0, [r7, #28]
		Buffer_AddData(BuffRespond, lcp_dataframe.head.rawdata, LENGTH_OF_HEAD);
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	220a      	movs	r2, #10
 8006202:	4619      	mov	r1, r3
 8006204:	69f8      	ldr	r0, [r7, #28]
 8006206:	f7fe f820 	bl	800424a <Buffer_AddData>
		if(lcp_dataframe.data != NULL)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d019      	beq.n	8006244 <Lcp_nProcess+0x314>
		{

			Buffer_AppendData(BuffRespond,0, lcp_dataframe.data, lenData);
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	2100      	movs	r1, #0
 8006216:	69f8      	ldr	r0, [r7, #28]
 8006218:	f7fe f89c 	bl	8004354 <Buffer_AppendData>
			lcp_dataframe.crc = Crc8_CalCcit(BuffRespond->data, BuffRespond->length);
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	889b      	ldrh	r3, [r3, #4]
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7ff f8a4 	bl	8005374 <Crc8_CalCcit>
 800622c:	4603      	mov	r3, r0
 800622e:	753b      	strb	r3, [r7, #20]

			Buffer_AppendData(BuffRespond, 0, &lcp_dataframe.crc, 1);
 8006230:	f107 0308 	add.w	r3, r7, #8
 8006234:	f103 020c 	add.w	r2, r3, #12
 8006238:	2301      	movs	r3, #1
 800623a:	2100      	movs	r1, #0
 800623c:	69f8      	ldr	r0, [r7, #28]
 800623e:	f7fe f889 	bl	8004354 <Buffer_AppendData>
 8006242:	e010      	b.n	8006266 <Lcp_nProcess+0x336>
		}
		else
		{
			lcp_dataframe.crc = Crc8_CalCcit(lcp_dataframe.head.rawdata, 10);
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	210a      	movs	r1, #10
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f892 	bl	8005374 <Crc8_CalCcit>
 8006250:	4603      	mov	r3, r0
 8006252:	753b      	strb	r3, [r7, #20]
			Buffer_AppendData(BuffRespond, 0, &lcp_dataframe.crc, 1);
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	f103 020c 	add.w	r2, r3, #12
 800625c:	2301      	movs	r3, #1
 800625e:	2100      	movs	r1, #0
 8006260:	69f8      	ldr	r0, [r7, #28]
 8006262:	f7fe f877 	bl	8004354 <Buffer_AppendData>
		}

		Fifo_AddData(lcp_obj->fifo_send, BuffRespond->data, BuffRespond->length);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6958      	ldr	r0, [r3, #20]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	889b      	ldrh	r3, [r3, #4]
 8006272:	461a      	mov	r2, r3
 8006274:	f7fe fcef 	bl	8004c56 <Fifo_AddData>

		Buffer_Dispose(BuffRespond);
 8006278:	69f8      	ldr	r0, [r7, #28]
 800627a:	f7fe f9a8 	bl	80045ce <Buffer_Dispose>
 800627e:	e002      	b.n	8006286 <Lcp_nProcess+0x356>
				goto DROP;
 8006280:	bf00      	nop
 8006282:	e000      	b.n	8006286 <Lcp_nProcess+0x356>
	goto DROP;
 8006284:	bf00      	nop

DROP:
	if( ++ countTime == countTimecycle)
 8006286:	4b18      	ldr	r3, [pc, #96]	@ (80062e8 <Lcp_nProcess+0x3b8>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4b16      	ldr	r3, [pc, #88]	@ (80062e8 <Lcp_nProcess+0x3b8>)
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <Lcp_nProcess+0x3b8>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800629a:	429a      	cmp	r2, r3
 800629c:	d10f      	bne.n	80062be <Lcp_nProcess+0x38e>
	{
		countTime = 0;
 800629e:	4b12      	ldr	r3, [pc, #72]	@ (80062e8 <Lcp_nProcess+0x3b8>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
		if( ++ timetolive == 255)
 80062a4:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <Lcp_nProcess+0x3bc>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <Lcp_nProcess+0x3bc>)
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	4b0e      	ldr	r3, [pc, #56]	@ (80062ec <Lcp_nProcess+0x3bc>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2bff      	cmp	r3, #255	@ 0xff
 80062b6:	d102      	bne.n	80062be <Lcp_nProcess+0x38e>
		{
			timetolive = 0;
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <Lcp_nProcess+0x3bc>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
		}
	}
	if(data != NULL)
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <Lcp_nProcess+0x39e>
	{
		free(data);
 80062c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c6:	f000 fb03 	bl	80068d0 <free>
		data = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(lcp_dataframe.data != NULL)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <Lcp_nProcess+0x3b0>
	{
		free(lcp_dataframe.data);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fafa 	bl	80068d0 <free>
		lcp_dataframe.data = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
	}


}
 80062e0:	bf00      	nop
 80062e2:	372c      	adds	r7, #44	@ 0x2c
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}
 80062e8:	2000023a 	.word	0x2000023a
 80062ec:	2000023b 	.word	0x2000023b

080062f0 <Lcp_EventSendMessage>:
{
	lcp_obj->Lcp_connected = notify;
}

void Lcp_EventSendMessage(lcp_t *lcp_obj, lcp_notify_sendmessage notify)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	lcp_obj->Lcp_sendmessage = notify;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	61da      	str	r2, [r3, #28]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
	...

0800630c <uart_init>:
uart_CR1_t	USART_CR1[3] 	= {0};
uart_CR2_t 	USART_CR2[3] 	= {0};
uart_BBR_t 	USART_BBR[3] 	= {0};

void uart_init(uart_cf_t UartConFig)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	463c      	mov	r4, r7
 8006314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uart_portInit(UartConFig);
 8006318:	463b      	mov	r3, r7
 800631a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800631c:	f000 f94c 	bl	80065b8 <uart_portInit>

	UART_SR[UartConFig.ModulUart] = (uart_SR_t *)&USART[UartConFig.ModulUart]->SR;
 8006320:	783b      	ldrb	r3, [r7, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4b5e      	ldr	r3, [pc, #376]	@ (80064a0 <uart_init+0x194>)
 8006326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632a:	783a      	ldrb	r2, [r7, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	4b5d      	ldr	r3, [pc, #372]	@ (80064a4 <uart_init+0x198>)
 8006330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	USART_BBR[UartConFig.ModulUart].bit.DIV_mantisa 	= (UART_CLK / Psc_Uart[UartConFig.ModulUart]) / (UartConFig.baudrate * 16);
 8006334:	783b      	ldrb	r3, [r7, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	4b5b      	ldr	r3, [pc, #364]	@ (80064a8 <uart_init+0x19c>)
 800633a:	5c9b      	ldrb	r3, [r3, r2]
 800633c:	461a      	mov	r2, r3
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <uart_init+0x1a0>)
 8006340:	fb93 f3f2 	sdiv	r3, r3, r2
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	783a      	ldrb	r2, [r7, #0]
 8006350:	4611      	mov	r1, r2
 8006352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006356:	b298      	uxth	r0, r3
 8006358:	4a55      	ldr	r2, [pc, #340]	@ (80064b0 <uart_init+0x1a4>)
 800635a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800635e:	f360 130f 	bfi	r3, r0, #4, #12
 8006362:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
	USART_BBR[UartConFig.ModulUart].bit.DIV_fraction = (uint32_t)(UART_CLK % (UartConFig.baudrate * 16)) / UartConFig.baudrate;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	4a50      	ldr	r2, [pc, #320]	@ (80064ac <uart_init+0x1a0>)
 800636c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	783a      	ldrb	r2, [r7, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	b2d8      	uxtb	r0, r3
 8006386:	4a4a      	ldr	r2, [pc, #296]	@ (80064b0 <uart_init+0x1a4>)
 8006388:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 800638c:	f360 0303 	bfi	r3, r0, #0, #4
 8006390:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
	USART[UartConFig.ModulUart]->BRR = USART_BBR[UartConFig.ModulUart].byte;
 8006394:	783b      	ldrb	r3, [r7, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	783b      	ldrb	r3, [r7, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	4b40      	ldr	r3, [pc, #256]	@ (80064a0 <uart_init+0x194>)
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	4a43      	ldr	r2, [pc, #268]	@ (80064b0 <uart_init+0x1a4>)
 80063a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80063a8:	609a      	str	r2, [r3, #8]

	USART_CR2[UartConFig.ModulUart].bit.STOP = UartConFig.StopBit;
 80063aa:	7afa      	ldrb	r2, [r7, #11]
 80063ac:	783b      	ldrb	r3, [r7, #0]
 80063ae:	f002 0203 	and.w	r2, r2, #3
 80063b2:	b2d1      	uxtb	r1, r2
 80063b4:	4a3f      	ldr	r2, [pc, #252]	@ (80064b4 <uart_init+0x1a8>)
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	785a      	ldrb	r2, [r3, #1]
 80063bc:	f361 1205 	bfi	r2, r1, #4, #2
 80063c0:	705a      	strb	r2, [r3, #1]
	USART[UartConFig.ModulUart]->CR2 = USART_CR2[UartConFig.ModulUart].Byte;
 80063c2:	783b      	ldrb	r3, [r7, #0]
 80063c4:	4619      	mov	r1, r3
 80063c6:	783b      	ldrb	r3, [r7, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b35      	ldr	r3, [pc, #212]	@ (80064a0 <uart_init+0x194>)
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	4a38      	ldr	r2, [pc, #224]	@ (80064b4 <uart_init+0x1a8>)
 80063d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80063d6:	611a      	str	r2, [r3, #16]

	USART_CR1[UartConFig.ModulUart].bit.RE 	= ENABLE;
 80063d8:	783b      	ldrb	r3, [r7, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	4a36      	ldr	r2, [pc, #216]	@ (80064b8 <uart_init+0x1ac>)
 80063de:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
	USART_CR1[UartConFig.ModulUart].bit.TE 	= ENABLE;
 80063ea:	783b      	ldrb	r3, [r7, #0]
 80063ec:	4619      	mov	r1, r3
 80063ee:	4a32      	ldr	r2, [pc, #200]	@ (80064b8 <uart_init+0x1ac>)
 80063f0:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
	USART_CR1[UartConFig.ModulUart].bit.UE 	= ENABLE;
 80063fc:	783b      	ldrb	r3, [r7, #0]
 80063fe:	4a2e      	ldr	r2, [pc, #184]	@ (80064b8 <uart_init+0x1ac>)
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	785a      	ldrb	r2, [r3, #1]
 8006406:	f042 0220 	orr.w	r2, r2, #32
 800640a:	705a      	strb	r2, [r3, #1]

	USART_CR1[UartConFig.ModulUart].bit.IDLEIE 	= ENABLE;
 800640c:	783b      	ldrb	r3, [r7, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4a29      	ldr	r2, [pc, #164]	@ (80064b8 <uart_init+0x1ac>)
 8006412:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 8006416:	f043 0310 	orr.w	r3, r3, #16
 800641a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
	USART_CR1[UartConFig.ModulUart].bit.RXNEIE 	= UartConFig.INT_mode;
 800641e:	7b3b      	ldrb	r3, [r7, #12]
 8006420:	783a      	ldrb	r2, [r7, #0]
 8006422:	4611      	mov	r1, r2
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	b2d8      	uxtb	r0, r3
 800642a:	4a23      	ldr	r2, [pc, #140]	@ (80064b8 <uart_init+0x1ac>)
 800642c:	f812 3021 	ldrb.w	r3, [r2, r1, lsl #2]
 8006430:	f360 1345 	bfi	r3, r0, #5, #1
 8006434:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
	USART_CR1[UartConFig.ModulUart].bit.M 		= UartConFig.WordLength;
 8006438:	7a3a      	ldrb	r2, [r7, #8]
 800643a:	783b      	ldrb	r3, [r7, #0]
 800643c:	f002 0201 	and.w	r2, r2, #1
 8006440:	b2d1      	uxtb	r1, r2
 8006442:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <uart_init+0x1ac>)
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	785a      	ldrb	r2, [r3, #1]
 800644a:	f361 1204 	bfi	r2, r1, #4, #1
 800644e:	705a      	strb	r2, [r3, #1]
	USART_CR1[UartConFig.ModulUart].bit.PCE 	= UartConFig.Parity.PC;
 8006450:	7a7a      	ldrb	r2, [r7, #9]
 8006452:	783b      	ldrb	r3, [r7, #0]
 8006454:	f002 0201 	and.w	r2, r2, #1
 8006458:	b2d1      	uxtb	r1, r2
 800645a:	4a17      	ldr	r2, [pc, #92]	@ (80064b8 <uart_init+0x1ac>)
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	785a      	ldrb	r2, [r3, #1]
 8006462:	f361 0282 	bfi	r2, r1, #2, #1
 8006466:	705a      	strb	r2, [r3, #1]
	USART_CR1[UartConFig.ModulUart].bit.PS 		= UartConFig.Parity.PS;
 8006468:	7aba      	ldrb	r2, [r7, #10]
 800646a:	783b      	ldrb	r3, [r7, #0]
 800646c:	f002 0201 	and.w	r2, r2, #1
 8006470:	b2d1      	uxtb	r1, r2
 8006472:	4a11      	ldr	r2, [pc, #68]	@ (80064b8 <uart_init+0x1ac>)
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	785a      	ldrb	r2, [r3, #1]
 800647a:	f361 0241 	bfi	r2, r1, #1, #1
 800647e:	705a      	strb	r2, [r3, #1]

	USART[UartConFig.ModulUart]->CR1 = USART_CR1[UartConFig.ModulUart].Byte;
 8006480:	783b      	ldrb	r3, [r7, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	783b      	ldrb	r3, [r7, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <uart_init+0x194>)
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	4a0a      	ldr	r2, [pc, #40]	@ (80064b8 <uart_init+0x1ac>)
 8006490:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006494:	60da      	str	r2, [r3, #12]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000014 	.word	0x20000014
 80064a4:	20000240 	.word	0x20000240
 80064a8:	2000002c 	.word	0x2000002c
 80064ac:	03d09000 	.word	0x03d09000
 80064b0:	20000264 	.word	0x20000264
 80064b4:	20000258 	.word	0x20000258
 80064b8:	2000024c 	.word	0x2000024c

080064bc <uart_WriteData>:


void uart_WriteData(Modul_uart_t UartNumb,uint8_t *data, uint16_t length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80bb      	strh	r3, [r7, #4]

	uint8_t byte_rec = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73bb      	strb	r3, [r7, #14]
//	UART_SR[UartConFig.ModulUart]->Byte = USART[UartNumb]->SR;

	if(UART_SR[UartNumb]->bit.ORE == 1)				// if(USART1_SR.bit.ORE == 1)
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <uart_WriteData+0x94>)
 80064d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d111      	bne.n	8006508 <uart_WriteData+0x4c>
	{
		byte_rec = USART[UartNumb]->DR;
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <uart_WriteData+0x98>)
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	73bb      	strb	r3, [r7, #14]
		byte_rec = USART[UartNumb]->DR;
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	4a18      	ldr	r2, [pc, #96]	@ (8006554 <uart_WriteData+0x98>)
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	73bb      	strb	r3, [r7, #14]
		USART[UartNumb]->SR   =   0x00;
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <uart_WriteData+0x98>)
 8006500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
	}
	for(uint8_t count = 0; count < length; count ++)
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
 800650c:	e00b      	b.n	8006526 <uart_WriteData+0x6a>
	{
		uart_writebyte(UartNumb, data[count]);
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	4413      	add	r3, r2
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f82a 	bl	8006574 <uart_writebyte>
	for(uint8_t count = 0; count < length; count ++)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	3301      	adds	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	b29b      	uxth	r3, r3
 800652a:	88ba      	ldrh	r2, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d8ee      	bhi.n	800650e <uart_WriteData+0x52>
	}
//    while((USART[UartNumb]->SR & USART_STATR_TC)!= USART_STATR_TC){}
	while(UART_SR[UartNumb]->bit.TC == 0){}
 8006530:	bf00      	nop
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	4a06      	ldr	r2, [pc, #24]	@ (8006550 <uart_WriteData+0x94>)
 8006536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f5      	beq.n	8006532 <uart_WriteData+0x76>
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000240 	.word	0x20000240
 8006554:	20000014 	.word	0x20000014

08006558 <uart_recive_add_callback>:


void uart_recive_add_callback(UartFunctCallBack_t CallBack)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	UartRecieveByte = CallBack;
 8006560:	4a03      	ldr	r2, [pc, #12]	@ (8006570 <uart_recive_add_callback+0x18>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6013      	str	r3, [r2, #0]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	2000023c 	.word	0x2000023c

08006574 <uart_writebyte>:




void uart_writebyte(Modul_uart_t UartNumb, uint8_t byte)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	460a      	mov	r2, r1
 800657e:	71fb      	strb	r3, [r7, #7]
 8006580:	4613      	mov	r3, r2
 8006582:	71bb      	strb	r3, [r7, #6]
//    while((USART[UartNumb]->SR & USART_STATR_TXE)!= USART_STATR_TXE){}

	 while(UART_SR[UartNumb]->bit.TXE == 0){}
 8006584:	bf00      	nop
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <uart_writebyte+0x3c>)
 800658a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f5      	beq.n	8006586 <uart_writebyte+0x12>
    USART[UartNumb]->DR = byte;
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	4a05      	ldr	r2, [pc, #20]	@ (80065b4 <uart_writebyte+0x40>)
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a2:	79ba      	ldrb	r2, [r7, #6]
 80065a4:	605a      	str	r2, [r3, #4]
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr
 80065b0:	20000240 	.word	0x20000240
 80065b4:	20000014 	.word	0x20000014

080065b8 <uart_portInit>:

void uart_portInit(uart_cf_t UartConFig)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b08f      	sub	sp, #60	@ 0x3c
 80065bc:	af00      	add	r7, sp, #0
 80065be:	463c      	mov	r4, r7
 80065c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	60da      	str	r2, [r3, #12]

	    /* Peripheral clock enable */
	  switch(UartConFig.ModulUart)
 80065d2:	783b      	ldrb	r3, [r7, #0]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d071      	beq.n	80066bc <uart_portInit+0x104>
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f300 809f 	bgt.w	800671c <uart_portInit+0x164>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <uart_portInit+0x30>
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d03b      	beq.n	800665e <uart_portInit+0xa6>

	    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
	    HAL_NVIC_EnableIRQ(USART3_IRQn);
		break;
	  default :
		  break;
 80065e6:	e099      	b.n	800671c <uart_portInit+0x164>
	    __HAL_RCC_USART1_CLK_ENABLE();
 80065e8:	4b4f      	ldr	r3, [pc, #316]	@ (8006728 <uart_portInit+0x170>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4a4e      	ldr	r2, [pc, #312]	@ (8006728 <uart_portInit+0x170>)
 80065ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065f2:	6193      	str	r3, [r2, #24]
 80065f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006728 <uart_portInit+0x170>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006600:	4b49      	ldr	r3, [pc, #292]	@ (8006728 <uart_portInit+0x170>)
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	4a48      	ldr	r2, [pc, #288]	@ (8006728 <uart_portInit+0x170>)
 8006606:	f043 0304 	orr.w	r3, r3, #4
 800660a:	6193      	str	r3, [r2, #24]
 800660c:	4b46      	ldr	r3, [pc, #280]	@ (8006728 <uart_portInit+0x170>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	623b      	str	r3, [r7, #32]
 8006616:	6a3b      	ldr	r3, [r7, #32]
	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006622:	2303      	movs	r3, #3
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800662a:	4619      	mov	r1, r3
 800662c:	483f      	ldr	r0, [pc, #252]	@ (800672c <uart_portInit+0x174>)
 800662e:	f7fc f985 	bl	800293c <HAL_GPIO_Init>
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006638:	2300      	movs	r3, #0
 800663a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663c:	2300      	movs	r3, #0
 800663e:	633b      	str	r3, [r7, #48]	@ 0x30
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006644:	4619      	mov	r1, r3
 8006646:	4839      	ldr	r0, [pc, #228]	@ (800672c <uart_portInit+0x174>)
 8006648:	f7fc f978 	bl	800293c <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800664c:	2200      	movs	r2, #0
 800664e:	2101      	movs	r1, #1
 8006650:	2025      	movs	r0, #37	@ 0x25
 8006652:	f7fc f93c 	bl	80028ce <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006656:	2025      	movs	r0, #37	@ 0x25
 8006658:	f7fc f955 	bl	8002906 <HAL_NVIC_EnableIRQ>
	    break;
 800665c:	e05f      	b.n	800671e <uart_portInit+0x166>
		__HAL_RCC_USART2_CLK_ENABLE();
 800665e:	4b32      	ldr	r3, [pc, #200]	@ (8006728 <uart_portInit+0x170>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4a31      	ldr	r2, [pc, #196]	@ (8006728 <uart_portInit+0x170>)
 8006664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006668:	61d3      	str	r3, [r2, #28]
 800666a:	4b2f      	ldr	r3, [pc, #188]	@ (8006728 <uart_portInit+0x170>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8006676:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <uart_portInit+0x170>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	4a2b      	ldr	r2, [pc, #172]	@ (8006728 <uart_portInit+0x170>)
 800667c:	f043 0304 	orr.w	r3, r3, #4
 8006680:	6193      	str	r3, [r2, #24]
 8006682:	4b29      	ldr	r3, [pc, #164]	@ (8006728 <uart_portInit+0x170>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	69bb      	ldr	r3, [r7, #24]
	    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800668e:	230c      	movs	r3, #12
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006692:	2302      	movs	r3, #2
 8006694:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006696:	2300      	movs	r3, #0
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800669a:	2303      	movs	r3, #3
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80066a2:	4619      	mov	r1, r3
 80066a4:	4821      	ldr	r0, [pc, #132]	@ (800672c <uart_portInit+0x174>)
 80066a6:	f7fc f949 	bl	800293c <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2101      	movs	r1, #1
 80066ae:	2026      	movs	r0, #38	@ 0x26
 80066b0:	f7fc f90d 	bl	80028ce <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80066b4:	2026      	movs	r0, #38	@ 0x26
 80066b6:	f7fc f926 	bl	8002906 <HAL_NVIC_EnableIRQ>
		break;
 80066ba:	e030      	b.n	800671e <uart_portInit+0x166>
		__HAL_RCC_USART3_CLK_ENABLE();
 80066bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <uart_portInit+0x170>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <uart_portInit+0x170>)
 80066c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066c6:	61d3      	str	r3, [r2, #28]
 80066c8:	4b17      	ldr	r3, [pc, #92]	@ (8006728 <uart_portInit+0x170>)
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80066d4:	4b14      	ldr	r3, [pc, #80]	@ (8006728 <uart_portInit+0x170>)
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	4a13      	ldr	r2, [pc, #76]	@ (8006728 <uart_portInit+0x170>)
 80066da:	f043 0308 	orr.w	r3, r3, #8
 80066de:	6193      	str	r3, [r2, #24]
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <uart_portInit+0x170>)
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	693b      	ldr	r3, [r7, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80066ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f2:	2302      	movs	r3, #2
 80066f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066fa:	2303      	movs	r3, #3
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006702:	4619      	mov	r1, r3
 8006704:	480a      	ldr	r0, [pc, #40]	@ (8006730 <uart_portInit+0x178>)
 8006706:	f7fc f919 	bl	800293c <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800670a:	2200      	movs	r2, #0
 800670c:	2101      	movs	r1, #1
 800670e:	2027      	movs	r0, #39	@ 0x27
 8006710:	f7fc f8dd 	bl	80028ce <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006714:	2027      	movs	r0, #39	@ 0x27
 8006716:	f7fc f8f6 	bl	8002906 <HAL_NVIC_EnableIRQ>
		break;
 800671a:	e000      	b.n	800671e <uart_portInit+0x166>
		  break;
 800671c:	bf00      	nop
	  }

}
 800671e:	bf00      	nop
 8006720:	373c      	adds	r7, #60	@ 0x3c
 8006722:	46bd      	mov	sp, r7
 8006724:	bd90      	pop	{r4, r7, pc}
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	40010800 	.word	0x40010800
 8006730:	40010c00 	.word	0x40010c00

08006734 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	71fb      	strb	r3, [r7, #7]
	uart_SR_t  USART1_SR;
	USART1_SR.Byte = USART[0]->SR;
 800673e:	4b1c      	ldr	r3, [pc, #112]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	603b      	str	r3, [r7, #0]
	if(USART1_SR.bit.RXNE == 1)
 8006746:	783b      	ldrb	r3, [r7, #0]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <USART1_IRQHandler+0x3a>
	{
		data = USART[0]->DR & 0x00FF;
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	71fb      	strb	r3, [r7, #7]
	    if(UartRecieveByte != NULL)
 800675a:	4b16      	ldr	r3, [pc, #88]	@ (80067b4 <USART1_IRQHandler+0x80>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d022      	beq.n	80067a8 <USART1_IRQHandler+0x74>
	    {
	        UartRecieveByte(data);
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <USART1_IRQHandler+0x80>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	79fa      	ldrb	r2, [r7, #7]
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
    }
    else if(USART1_SR.bit.IDLE == 1)
    {
    	data = USART[0]->DR;
    }
}
 800676c:	e01c      	b.n	80067a8 <USART1_IRQHandler+0x74>
    else if(USART1_SR.bit.ORE == 1)
 800676e:	783b      	ldrb	r3, [r7, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <USART1_IRQHandler+0x60>
    	data = USART[0]->DR;
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	71fb      	strb	r3, [r7, #7]
    	data = USART[0]->DR;
 8006782:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	71fb      	strb	r3, [r7, #7]
    	USART[0]->SR   =   0x00;
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
}
 8006792:	e009      	b.n	80067a8 <USART1_IRQHandler+0x74>
    else if(USART1_SR.bit.IDLE == 1)
 8006794:	783b      	ldrb	r3, [r7, #0]
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <USART1_IRQHandler+0x74>
    	data = USART[0]->DR;
 80067a0:	4b03      	ldr	r3, [pc, #12]	@ (80067b0 <USART1_IRQHandler+0x7c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	71fb      	strb	r3, [r7, #7]
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000014 	.word	0x20000014
 80067b4:	2000023c 	.word	0x2000023c

080067b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	71fb      	strb	r3, [r7, #7]
	uart_SR_t  USART1_SR;
	USART1_SR.Byte = USART[1]->SR;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006834 <USART2_IRQHandler+0x7c>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	603b      	str	r3, [r7, #0]
	if(USART1_SR.bit.RXNE == 1)
 80067ca:	783b      	ldrb	r3, [r7, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00d      	beq.n	80067f2 <USART2_IRQHandler+0x3a>
	{
		data = USART[1]->DR & 0x00FF;
 80067d6:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <USART2_IRQHandler+0x7c>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	71fb      	strb	r3, [r7, #7]
	    if(UartRecieveByte != NULL)
 80067de:	4b16      	ldr	r3, [pc, #88]	@ (8006838 <USART2_IRQHandler+0x80>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d022      	beq.n	800682c <USART2_IRQHandler+0x74>
	    {
	        UartRecieveByte(data);
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <USART2_IRQHandler+0x80>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	79fa      	ldrb	r2, [r7, #7]
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
    }
    else if(USART1_SR.bit.IDLE == 1)
    {
    	data = USART[1]->DR;
    }
}
 80067f0:	e01c      	b.n	800682c <USART2_IRQHandler+0x74>
    else if(USART1_SR.bit.ORE == 1)
 80067f2:	783b      	ldrb	r3, [r7, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00c      	beq.n	8006818 <USART2_IRQHandler+0x60>
    	data = USART[1]->DR;
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <USART2_IRQHandler+0x7c>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	71fb      	strb	r3, [r7, #7]
    	data = USART[1]->DR;
 8006806:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <USART2_IRQHandler+0x7c>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	71fb      	strb	r3, [r7, #7]
    	USART[1]->SR   =   0x00;
 800680e:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <USART2_IRQHandler+0x7c>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	e009      	b.n	800682c <USART2_IRQHandler+0x74>
    else if(USART1_SR.bit.IDLE == 1)
 8006818:	783b      	ldrb	r3, [r7, #0]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <USART2_IRQHandler+0x74>
    	data = USART[1]->DR;
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <USART2_IRQHandler+0x7c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	71fb      	strb	r3, [r7, #7]
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000014 	.word	0x20000014
 8006838:	2000023c 	.word	0x2000023c

0800683c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	71fb      	strb	r3, [r7, #7]
	uart_SR_t  USART1_SR;
	USART1_SR.Byte = USART[2]->SR;
 8006846:	4b1c      	ldr	r3, [pc, #112]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	603b      	str	r3, [r7, #0]
	if(USART1_SR.bit.RXNE == 1)
 800684e:	783b      	ldrb	r3, [r7, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <USART3_IRQHandler+0x3a>
	{
		data = USART[2]->DR & 0x00FF;
 800685a:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	71fb      	strb	r3, [r7, #7]
	    if(UartRecieveByte != NULL)
 8006862:	4b16      	ldr	r3, [pc, #88]	@ (80068bc <USART3_IRQHandler+0x80>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d022      	beq.n	80068b0 <USART3_IRQHandler+0x74>
	    {
	        UartRecieveByte(data);
 800686a:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <USART3_IRQHandler+0x80>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	79fa      	ldrb	r2, [r7, #7]
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
    }
    else if(USART1_SR.bit.IDLE == 1)
    {
    	data = USART[2]->DR;
    }
}
 8006874:	e01c      	b.n	80068b0 <USART3_IRQHandler+0x74>
    else if(USART1_SR.bit.ORE == 1)
 8006876:	783b      	ldrb	r3, [r7, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00c      	beq.n	800689c <USART3_IRQHandler+0x60>
    	data = USART[2]->DR;
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	71fb      	strb	r3, [r7, #7]
    	data = USART[2]->DR;
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	71fb      	strb	r3, [r7, #7]
    	USART[2]->SR   =   0x00;
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	e009      	b.n	80068b0 <USART3_IRQHandler+0x74>
    else if(USART1_SR.bit.IDLE == 1)
 800689c:	783b      	ldrb	r3, [r7, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <USART3_IRQHandler+0x74>
    	data = USART[2]->DR;
 80068a8:	4b03      	ldr	r3, [pc, #12]	@ (80068b8 <USART3_IRQHandler+0x7c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	71fb      	strb	r3, [r7, #7]
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20000014 	.word	0x20000014
 80068bc:	2000023c 	.word	0x2000023c

080068c0 <malloc>:
 80068c0:	4b02      	ldr	r3, [pc, #8]	@ (80068cc <malloc+0xc>)
 80068c2:	4601      	mov	r1, r0
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	f000 b82d 	b.w	8006924 <_malloc_r>
 80068ca:	bf00      	nop
 80068cc:	20000030 	.word	0x20000030

080068d0 <free>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	@ (80068dc <free+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 b939 	b.w	8006b4c <_free_r>
 80068da:	bf00      	nop
 80068dc:	20000030 	.word	0x20000030

080068e0 <sbrk_aligned>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006920 <sbrk_aligned+0x40>)
 80068e4:	460c      	mov	r4, r1
 80068e6:	6831      	ldr	r1, [r6, #0]
 80068e8:	4605      	mov	r5, r0
 80068ea:	b911      	cbnz	r1, 80068f2 <sbrk_aligned+0x12>
 80068ec:	f000 f8e4 	bl	8006ab8 <_sbrk_r>
 80068f0:	6030      	str	r0, [r6, #0]
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f8df 	bl	8006ab8 <_sbrk_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d103      	bne.n	8006906 <sbrk_aligned+0x26>
 80068fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006902:	4620      	mov	r0, r4
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	1cc4      	adds	r4, r0, #3
 8006908:	f024 0403 	bic.w	r4, r4, #3
 800690c:	42a0      	cmp	r0, r4
 800690e:	d0f8      	beq.n	8006902 <sbrk_aligned+0x22>
 8006910:	1a21      	subs	r1, r4, r0
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f8d0 	bl	8006ab8 <_sbrk_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d1f2      	bne.n	8006902 <sbrk_aligned+0x22>
 800691c:	e7ef      	b.n	80068fe <sbrk_aligned+0x1e>
 800691e:	bf00      	nop
 8006920:	20000270 	.word	0x20000270

08006924 <_malloc_r>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	1ccd      	adds	r5, r1, #3
 800692a:	f025 0503 	bic.w	r5, r5, #3
 800692e:	3508      	adds	r5, #8
 8006930:	2d0c      	cmp	r5, #12
 8006932:	bf38      	it	cc
 8006934:	250c      	movcc	r5, #12
 8006936:	2d00      	cmp	r5, #0
 8006938:	4606      	mov	r6, r0
 800693a:	db01      	blt.n	8006940 <_malloc_r+0x1c>
 800693c:	42a9      	cmp	r1, r5
 800693e:	d904      	bls.n	800694a <_malloc_r+0x26>
 8006940:	230c      	movs	r3, #12
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	2000      	movs	r0, #0
 8006946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a20 <_malloc_r+0xfc>
 800694e:	f000 f869 	bl	8006a24 <__malloc_lock>
 8006952:	f8d8 3000 	ldr.w	r3, [r8]
 8006956:	461c      	mov	r4, r3
 8006958:	bb44      	cbnz	r4, 80069ac <_malloc_r+0x88>
 800695a:	4629      	mov	r1, r5
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff ffbf 	bl	80068e0 <sbrk_aligned>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	4604      	mov	r4, r0
 8006966:	d158      	bne.n	8006a1a <_malloc_r+0xf6>
 8006968:	f8d8 4000 	ldr.w	r4, [r8]
 800696c:	4627      	mov	r7, r4
 800696e:	2f00      	cmp	r7, #0
 8006970:	d143      	bne.n	80069fa <_malloc_r+0xd6>
 8006972:	2c00      	cmp	r4, #0
 8006974:	d04b      	beq.n	8006a0e <_malloc_r+0xea>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	4639      	mov	r1, r7
 800697a:	4630      	mov	r0, r6
 800697c:	eb04 0903 	add.w	r9, r4, r3
 8006980:	f000 f89a 	bl	8006ab8 <_sbrk_r>
 8006984:	4581      	cmp	r9, r0
 8006986:	d142      	bne.n	8006a0e <_malloc_r+0xea>
 8006988:	6821      	ldr	r1, [r4, #0]
 800698a:	4630      	mov	r0, r6
 800698c:	1a6d      	subs	r5, r5, r1
 800698e:	4629      	mov	r1, r5
 8006990:	f7ff ffa6 	bl	80068e0 <sbrk_aligned>
 8006994:	3001      	adds	r0, #1
 8006996:	d03a      	beq.n	8006a0e <_malloc_r+0xea>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	442b      	add	r3, r5
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	f8d8 3000 	ldr.w	r3, [r8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	bb62      	cbnz	r2, 8006a00 <_malloc_r+0xdc>
 80069a6:	f8c8 7000 	str.w	r7, [r8]
 80069aa:	e00f      	b.n	80069cc <_malloc_r+0xa8>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	1b52      	subs	r2, r2, r5
 80069b0:	d420      	bmi.n	80069f4 <_malloc_r+0xd0>
 80069b2:	2a0b      	cmp	r2, #11
 80069b4:	d917      	bls.n	80069e6 <_malloc_r+0xc2>
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	bf18      	it	ne
 80069be:	6059      	strne	r1, [r3, #4]
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	bf08      	it	eq
 80069c4:	f8c8 1000 	streq.w	r1, [r8]
 80069c8:	5162      	str	r2, [r4, r5]
 80069ca:	604b      	str	r3, [r1, #4]
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f82f 	bl	8006a30 <__malloc_unlock>
 80069d2:	f104 000b 	add.w	r0, r4, #11
 80069d6:	1d23      	adds	r3, r4, #4
 80069d8:	f020 0007 	bic.w	r0, r0, #7
 80069dc:	1ac2      	subs	r2, r0, r3
 80069de:	bf1c      	itt	ne
 80069e0:	1a1b      	subne	r3, r3, r0
 80069e2:	50a3      	strne	r3, [r4, r2]
 80069e4:	e7af      	b.n	8006946 <_malloc_r+0x22>
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	bf0c      	ite	eq
 80069ec:	f8c8 2000 	streq.w	r2, [r8]
 80069f0:	605a      	strne	r2, [r3, #4]
 80069f2:	e7eb      	b.n	80069cc <_malloc_r+0xa8>
 80069f4:	4623      	mov	r3, r4
 80069f6:	6864      	ldr	r4, [r4, #4]
 80069f8:	e7ae      	b.n	8006958 <_malloc_r+0x34>
 80069fa:	463c      	mov	r4, r7
 80069fc:	687f      	ldr	r7, [r7, #4]
 80069fe:	e7b6      	b.n	800696e <_malloc_r+0x4a>
 8006a00:	461a      	mov	r2, r3
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d1fb      	bne.n	8006a00 <_malloc_r+0xdc>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6053      	str	r3, [r2, #4]
 8006a0c:	e7de      	b.n	80069cc <_malloc_r+0xa8>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	4630      	mov	r0, r6
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	f000 f80c 	bl	8006a30 <__malloc_unlock>
 8006a18:	e794      	b.n	8006944 <_malloc_r+0x20>
 8006a1a:	6005      	str	r5, [r0, #0]
 8006a1c:	e7d6      	b.n	80069cc <_malloc_r+0xa8>
 8006a1e:	bf00      	nop
 8006a20:	20000274 	.word	0x20000274

08006a24 <__malloc_lock>:
 8006a24:	4801      	ldr	r0, [pc, #4]	@ (8006a2c <__malloc_lock+0x8>)
 8006a26:	f000 b881 	b.w	8006b2c <__retarget_lock_acquire_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	200003b4 	.word	0x200003b4

08006a30 <__malloc_unlock>:
 8006a30:	4801      	ldr	r0, [pc, #4]	@ (8006a38 <__malloc_unlock+0x8>)
 8006a32:	f000 b87c 	b.w	8006b2e <__retarget_lock_release_recursive>
 8006a36:	bf00      	nop
 8006a38:	200003b4 	.word	0x200003b4

08006a3c <realloc>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	@ (8006a48 <realloc+0xc>)
 8006a3e:	460a      	mov	r2, r1
 8006a40:	4601      	mov	r1, r0
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	f000 b802 	b.w	8006a4c <_realloc_r>
 8006a48:	20000030 	.word	0x20000030

08006a4c <_realloc_r>:
 8006a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a50:	4680      	mov	r8, r0
 8006a52:	4615      	mov	r5, r2
 8006a54:	460c      	mov	r4, r1
 8006a56:	b921      	cbnz	r1, 8006a62 <_realloc_r+0x16>
 8006a58:	4611      	mov	r1, r2
 8006a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	f7ff bf61 	b.w	8006924 <_malloc_r>
 8006a62:	b92a      	cbnz	r2, 8006a70 <_realloc_r+0x24>
 8006a64:	f000 f872 	bl	8006b4c <_free_r>
 8006a68:	2400      	movs	r4, #0
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	f000 f8b4 	bl	8006bdc <_malloc_usable_size_r>
 8006a74:	4285      	cmp	r5, r0
 8006a76:	4606      	mov	r6, r0
 8006a78:	d802      	bhi.n	8006a80 <_realloc_r+0x34>
 8006a7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a7e:	d8f4      	bhi.n	8006a6a <_realloc_r+0x1e>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4640      	mov	r0, r8
 8006a84:	f7ff ff4e 	bl	8006924 <_malloc_r>
 8006a88:	4607      	mov	r7, r0
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0ec      	beq.n	8006a68 <_realloc_r+0x1c>
 8006a8e:	42b5      	cmp	r5, r6
 8006a90:	462a      	mov	r2, r5
 8006a92:	4621      	mov	r1, r4
 8006a94:	bf28      	it	cs
 8006a96:	4632      	movcs	r2, r6
 8006a98:	f000 f84a 	bl	8006b30 <memcpy>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f000 f854 	bl	8006b4c <_free_r>
 8006aa4:	463c      	mov	r4, r7
 8006aa6:	e7e0      	b.n	8006a6a <_realloc_r+0x1e>

08006aa8 <memset>:
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4402      	add	r2, r0
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d100      	bne.n	8006ab2 <memset+0xa>
 8006ab0:	4770      	bx	lr
 8006ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab6:	e7f9      	b.n	8006aac <memset+0x4>

08006ab8 <_sbrk_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	2300      	movs	r3, #0
 8006abc:	4d05      	ldr	r5, [pc, #20]	@ (8006ad4 <_sbrk_r+0x1c>)
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fb f8ec 	bl	8001ca0 <_sbrk>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_sbrk_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_sbrk_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200003b0 	.word	0x200003b0

08006ad8 <__errno>:
 8006ad8:	4b01      	ldr	r3, [pc, #4]	@ (8006ae0 <__errno+0x8>)
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000030 	.word	0x20000030

08006ae4 <__libc_init_array>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	4d0c      	ldr	r5, [pc, #48]	@ (8006b1c <__libc_init_array+0x38>)
 8006aea:	4c0d      	ldr	r4, [pc, #52]	@ (8006b20 <__libc_init_array+0x3c>)
 8006aec:	1b64      	subs	r4, r4, r5
 8006aee:	10a4      	asrs	r4, r4, #2
 8006af0:	42a6      	cmp	r6, r4
 8006af2:	d109      	bne.n	8006b08 <__libc_init_array+0x24>
 8006af4:	f000 ff88 	bl	8007a08 <_init>
 8006af8:	2600      	movs	r6, #0
 8006afa:	4d0a      	ldr	r5, [pc, #40]	@ (8006b24 <__libc_init_array+0x40>)
 8006afc:	4c0a      	ldr	r4, [pc, #40]	@ (8006b28 <__libc_init_array+0x44>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	42a6      	cmp	r6, r4
 8006b04:	d105      	bne.n	8006b12 <__libc_init_array+0x2e>
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0c:	4798      	blx	r3
 8006b0e:	3601      	adds	r6, #1
 8006b10:	e7ee      	b.n	8006af0 <__libc_init_array+0xc>
 8006b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b16:	4798      	blx	r3
 8006b18:	3601      	adds	r6, #1
 8006b1a:	e7f2      	b.n	8006b02 <__libc_init_array+0x1e>
 8006b1c:	08007a90 	.word	0x08007a90
 8006b20:	08007a90 	.word	0x08007a90
 8006b24:	08007a90 	.word	0x08007a90
 8006b28:	08007a94 	.word	0x08007a94

08006b2c <__retarget_lock_acquire_recursive>:
 8006b2c:	4770      	bx	lr

08006b2e <__retarget_lock_release_recursive>:
 8006b2e:	4770      	bx	lr

08006b30 <memcpy>:
 8006b30:	440a      	add	r2, r1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	4770      	bx	lr
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b42:	4291      	cmp	r1, r2
 8006b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b48:	d1f9      	bne.n	8006b3e <memcpy+0xe>
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <_free_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4605      	mov	r5, r0
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d040      	beq.n	8006bd6 <_free_r+0x8a>
 8006b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b58:	1f0c      	subs	r4, r1, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bfb8      	it	lt
 8006b5e:	18e4      	addlt	r4, r4, r3
 8006b60:	f7ff ff60 	bl	8006a24 <__malloc_lock>
 8006b64:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <_free_r+0x8c>)
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	b933      	cbnz	r3, 8006b78 <_free_r+0x2c>
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	6014      	str	r4, [r2, #0]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b74:	f7ff bf5c 	b.w	8006a30 <__malloc_unlock>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d908      	bls.n	8006b8e <_free_r+0x42>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	1821      	adds	r1, r4, r0
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf01      	itttt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	1809      	addeq	r1, r1, r0
 8006b8a:	6021      	streq	r1, [r4, #0]
 8006b8c:	e7ed      	b.n	8006b6a <_free_r+0x1e>
 8006b8e:	461a      	mov	r2, r3
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b10b      	cbz	r3, 8006b98 <_free_r+0x4c>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d9fa      	bls.n	8006b8e <_free_r+0x42>
 8006b98:	6811      	ldr	r1, [r2, #0]
 8006b9a:	1850      	adds	r0, r2, r1
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d10b      	bne.n	8006bb8 <_free_r+0x6c>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	1850      	adds	r0, r2, r1
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	d1e0      	bne.n	8006b6e <_free_r+0x22>
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4408      	add	r0, r1
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	e7da      	b.n	8006b6e <_free_r+0x22>
 8006bb8:	d902      	bls.n	8006bc0 <_free_r+0x74>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	e7d6      	b.n	8006b6e <_free_r+0x22>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	1821      	adds	r1, r4, r0
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1809      	addeq	r1, r1, r0
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	6054      	str	r4, [r2, #4]
 8006bd4:	e7cb      	b.n	8006b6e <_free_r+0x22>
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000274 	.word	0x20000274

08006bdc <_malloc_usable_size_r>:
 8006bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be0:	1f18      	subs	r0, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfbc      	itt	lt
 8006be6:	580b      	ldrlt	r3, [r1, r0]
 8006be8:	18c0      	addlt	r0, r0, r3
 8006bea:	4770      	bx	lr

08006bec <pow>:
 8006bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	4689      	mov	r9, r1
 8006bf8:	f000 f866 	bl	8006cc8 <__ieee754_pow>
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460f      	mov	r7, r1
 8006c02:	462b      	mov	r3, r5
 8006c04:	4620      	mov	r0, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 fef8 	bl	80009fc <__aeabi_dcmpun>
 8006c0c:	bbc8      	cbnz	r0, 8006c82 <pow+0x96>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2300      	movs	r3, #0
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 febf 	bl	8000998 <__aeabi_dcmpeq>
 8006c1a:	b1b8      	cbz	r0, 8006c4c <pow+0x60>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4620      	mov	r0, r4
 8006c22:	4629      	mov	r1, r5
 8006c24:	f7f9 feb8 	bl	8000998 <__aeabi_dcmpeq>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d141      	bne.n	8006cb0 <pow+0xc4>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f000 f844 	bl	8006cbc <finite>
 8006c34:	b328      	cbz	r0, 8006c82 <pow+0x96>
 8006c36:	2200      	movs	r2, #0
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7f9 feb5 	bl	80009ac <__aeabi_dcmplt>
 8006c42:	b1f0      	cbz	r0, 8006c82 <pow+0x96>
 8006c44:	f7ff ff48 	bl	8006ad8 <__errno>
 8006c48:	2322      	movs	r3, #34	@ 0x22
 8006c4a:	e019      	b.n	8006c80 <pow+0x94>
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f000 f834 	bl	8006cbc <finite>
 8006c54:	b9c8      	cbnz	r0, 8006c8a <pow+0x9e>
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f000 f82f 	bl	8006cbc <finite>
 8006c5e:	b1a0      	cbz	r0, 8006c8a <pow+0x9e>
 8006c60:	4620      	mov	r0, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	f000 f82a 	bl	8006cbc <finite>
 8006c68:	b178      	cbz	r0, 8006c8a <pow+0x9e>
 8006c6a:	4632      	mov	r2, r6
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 fec3 	bl	80009fc <__aeabi_dcmpun>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d0e4      	beq.n	8006c44 <pow+0x58>
 8006c7a:	f7ff ff2d 	bl	8006ad8 <__errno>
 8006c7e:	2321      	movs	r3, #33	@ 0x21
 8006c80:	6003      	str	r3, [r0, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	4639      	mov	r1, r7
 8006c92:	f7f9 fe81 	bl	8000998 <__aeabi_dcmpeq>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0f3      	beq.n	8006c82 <pow+0x96>
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f000 f80d 	bl	8006cbc <finite>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d0ed      	beq.n	8006c82 <pow+0x96>
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f000 f807 	bl	8006cbc <finite>
 8006cae:	e7c8      	b.n	8006c42 <pow+0x56>
 8006cb0:	2600      	movs	r6, #0
 8006cb2:	4f01      	ldr	r7, [pc, #4]	@ (8006cb8 <pow+0xcc>)
 8006cb4:	e7e5      	b.n	8006c82 <pow+0x96>
 8006cb6:	bf00      	nop
 8006cb8:	3ff00000 	.word	0x3ff00000

08006cbc <finite>:
 8006cbc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006cc0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006cc4:	0fc0      	lsrs	r0, r0, #31
 8006cc6:	4770      	bx	lr

08006cc8 <__ieee754_pow>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b091      	sub	sp, #68	@ 0x44
 8006cce:	e9cd 2300 	strd	r2, r3, [sp]
 8006cd2:	468b      	mov	fp, r1
 8006cd4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006cd8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8006cdc:	4682      	mov	sl, r0
 8006cde:	ea57 0001 	orrs.w	r0, r7, r1
 8006ce2:	d112      	bne.n	8006d0a <__ieee754_pow+0x42>
 8006ce4:	4653      	mov	r3, sl
 8006ce6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8006cea:	18db      	adds	r3, r3, r3
 8006cec:	4152      	adcs	r2, r2
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	4b91      	ldr	r3, [pc, #580]	@ (8006f38 <__ieee754_pow+0x270>)
 8006cf2:	4193      	sbcs	r3, r2
 8006cf4:	f080 84ce 	bcs.w	8007694 <__ieee754_pow+0x9cc>
 8006cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	4659      	mov	r1, fp
 8006d00:	f7f9 fa2c 	bl	800015c <__adddf3>
 8006d04:	b011      	add	sp, #68	@ 0x44
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	4b8c      	ldr	r3, [pc, #560]	@ (8006f3c <__ieee754_pow+0x274>)
 8006d0c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006d10:	429e      	cmp	r6, r3
 8006d12:	465d      	mov	r5, fp
 8006d14:	46d1      	mov	r9, sl
 8006d16:	d807      	bhi.n	8006d28 <__ieee754_pow+0x60>
 8006d18:	d102      	bne.n	8006d20 <__ieee754_pow+0x58>
 8006d1a:	f1ba 0f00 	cmp.w	sl, #0
 8006d1e:	d1eb      	bne.n	8006cf8 <__ieee754_pow+0x30>
 8006d20:	429f      	cmp	r7, r3
 8006d22:	d801      	bhi.n	8006d28 <__ieee754_pow+0x60>
 8006d24:	d10f      	bne.n	8006d46 <__ieee754_pow+0x7e>
 8006d26:	b171      	cbz	r1, 8006d46 <__ieee754_pow+0x7e>
 8006d28:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006d2c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006d30:	ea55 0509 	orrs.w	r5, r5, r9
 8006d34:	d1e0      	bne.n	8006cf8 <__ieee754_pow+0x30>
 8006d36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d3a:	18db      	adds	r3, r3, r3
 8006d3c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006d40:	4152      	adcs	r2, r2
 8006d42:	429d      	cmp	r5, r3
 8006d44:	e7d4      	b.n	8006cf0 <__ieee754_pow+0x28>
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	4633      	mov	r3, r6
 8006d4a:	da39      	bge.n	8006dc0 <__ieee754_pow+0xf8>
 8006d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8006f40 <__ieee754_pow+0x278>)
 8006d4e:	4297      	cmp	r7, r2
 8006d50:	d84e      	bhi.n	8006df0 <__ieee754_pow+0x128>
 8006d52:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006d56:	4297      	cmp	r7, r2
 8006d58:	f240 84ab 	bls.w	80076b2 <__ieee754_pow+0x9ea>
 8006d5c:	153a      	asrs	r2, r7, #20
 8006d5e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006d62:	2a14      	cmp	r2, #20
 8006d64:	dd0f      	ble.n	8006d86 <__ieee754_pow+0xbe>
 8006d66:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006d6a:	fa21 f402 	lsr.w	r4, r1, r2
 8006d6e:	fa04 f202 	lsl.w	r2, r4, r2
 8006d72:	428a      	cmp	r2, r1
 8006d74:	f040 849d 	bne.w	80076b2 <__ieee754_pow+0x9ea>
 8006d78:	f004 0401 	and.w	r4, r4, #1
 8006d7c:	f1c4 0402 	rsb	r4, r4, #2
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d15a      	bne.n	8006e3a <__ieee754_pow+0x172>
 8006d84:	e00e      	b.n	8006da4 <__ieee754_pow+0xdc>
 8006d86:	2900      	cmp	r1, #0
 8006d88:	d156      	bne.n	8006e38 <__ieee754_pow+0x170>
 8006d8a:	f1c2 0214 	rsb	r2, r2, #20
 8006d8e:	fa47 f402 	asr.w	r4, r7, r2
 8006d92:	fa04 f202 	lsl.w	r2, r4, r2
 8006d96:	42ba      	cmp	r2, r7
 8006d98:	f040 8488 	bne.w	80076ac <__ieee754_pow+0x9e4>
 8006d9c:	f004 0401 	and.w	r4, r4, #1
 8006da0:	f1c4 0402 	rsb	r4, r4, #2
 8006da4:	4a67      	ldr	r2, [pc, #412]	@ (8006f44 <__ieee754_pow+0x27c>)
 8006da6:	4297      	cmp	r7, r2
 8006da8:	d130      	bne.n	8006e0c <__ieee754_pow+0x144>
 8006daa:	f1b8 0f00 	cmp.w	r8, #0
 8006dae:	f280 8479 	bge.w	80076a4 <__ieee754_pow+0x9dc>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	2000      	movs	r0, #0
 8006db8:	4962      	ldr	r1, [pc, #392]	@ (8006f44 <__ieee754_pow+0x27c>)
 8006dba:	f7f9 fcaf 	bl	800071c <__aeabi_ddiv>
 8006dbe:	e7a1      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006dc0:	2400      	movs	r4, #0
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d139      	bne.n	8006e3a <__ieee754_pow+0x172>
 8006dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8006f3c <__ieee754_pow+0x274>)
 8006dc8:	4297      	cmp	r7, r2
 8006dca:	d1eb      	bne.n	8006da4 <__ieee754_pow+0xdc>
 8006dcc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006dd0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006dd4:	ea53 0309 	orrs.w	r3, r3, r9
 8006dd8:	f000 845c 	beq.w	8007694 <__ieee754_pow+0x9cc>
 8006ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8006f48 <__ieee754_pow+0x280>)
 8006dde:	429e      	cmp	r6, r3
 8006de0:	d908      	bls.n	8006df4 <__ieee754_pow+0x12c>
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	f2c0 8459 	blt.w	800769c <__ieee754_pow+0x9d4>
 8006dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dee:	e789      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006df0:	2402      	movs	r4, #2
 8006df2:	e7e6      	b.n	8006dc2 <__ieee754_pow+0xfa>
 8006df4:	f1b8 0f00 	cmp.w	r8, #0
 8006df8:	f04f 0000 	mov.w	r0, #0
 8006dfc:	f04f 0100 	mov.w	r1, #0
 8006e00:	da80      	bge.n	8006d04 <__ieee754_pow+0x3c>
 8006e02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e06:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006e0a:	e77b      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006e0c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006e10:	d106      	bne.n	8006e20 <__ieee754_pow+0x158>
 8006e12:	4652      	mov	r2, sl
 8006e14:	465b      	mov	r3, fp
 8006e16:	4650      	mov	r0, sl
 8006e18:	4659      	mov	r1, fp
 8006e1a:	f7f9 fb55 	bl	80004c8 <__aeabi_dmul>
 8006e1e:	e771      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006e20:	4a4a      	ldr	r2, [pc, #296]	@ (8006f4c <__ieee754_pow+0x284>)
 8006e22:	4590      	cmp	r8, r2
 8006e24:	d109      	bne.n	8006e3a <__ieee754_pow+0x172>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	db07      	blt.n	8006e3a <__ieee754_pow+0x172>
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	b011      	add	sp, #68	@ 0x44
 8006e30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	f000 bd12 	b.w	800785c <__ieee754_sqrt>
 8006e38:	2400      	movs	r4, #0
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	4659      	mov	r1, fp
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	f000 fc6a 	bl	8007718 <fabs>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	d127      	bne.n	8006e9c <__ieee754_pow+0x1d4>
 8006e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8006f44 <__ieee754_pow+0x27c>)
 8006e4e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8006e52:	4594      	cmp	ip, r2
 8006e54:	d000      	beq.n	8006e58 <__ieee754_pow+0x190>
 8006e56:	bb0e      	cbnz	r6, 8006e9c <__ieee754_pow+0x1d4>
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	da05      	bge.n	8006e6a <__ieee754_pow+0x1a2>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	2000      	movs	r0, #0
 8006e64:	4937      	ldr	r1, [pc, #220]	@ (8006f44 <__ieee754_pow+0x27c>)
 8006e66:	f7f9 fc59 	bl	800071c <__aeabi_ddiv>
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	f6bf af4a 	bge.w	8006d04 <__ieee754_pow+0x3c>
 8006e70:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8006e74:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006e78:	4326      	orrs	r6, r4
 8006e7a:	d108      	bne.n	8006e8e <__ieee754_pow+0x1c6>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4610      	mov	r0, r2
 8006e82:	4619      	mov	r1, r3
 8006e84:	f7f9 f968 	bl	8000158 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e795      	b.n	8006dba <__ieee754_pow+0xf2>
 8006e8e:	2c01      	cmp	r4, #1
 8006e90:	f47f af38 	bne.w	8006d04 <__ieee754_pow+0x3c>
 8006e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e98:	4619      	mov	r1, r3
 8006e9a:	e733      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006e9c:	0fea      	lsrs	r2, r5, #31
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	ea52 0c04 	orrs.w	ip, r2, r4
 8006ea4:	d102      	bne.n	8006eac <__ieee754_pow+0x1e4>
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	465b      	mov	r3, fp
 8006eaa:	e7e9      	b.n	8006e80 <__ieee754_pow+0x1b8>
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	3c01      	subs	r4, #1
 8006eb2:	4314      	orrs	r4, r2
 8006eb4:	bf14      	ite	ne
 8006eb6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006f44 <__ieee754_pow+0x27c>
 8006eba:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006f50 <__ieee754_pow+0x288>
 8006ebe:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8006ec2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8006ec6:	f240 8107 	bls.w	80070d8 <__ieee754_pow+0x410>
 8006eca:	4b22      	ldr	r3, [pc, #136]	@ (8006f54 <__ieee754_pow+0x28c>)
 8006ecc:	429f      	cmp	r7, r3
 8006ece:	4b1e      	ldr	r3, [pc, #120]	@ (8006f48 <__ieee754_pow+0x280>)
 8006ed0:	d913      	bls.n	8006efa <__ieee754_pow+0x232>
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	d808      	bhi.n	8006ee8 <__ieee754_pow+0x220>
 8006ed6:	f1b8 0f00 	cmp.w	r8, #0
 8006eda:	da08      	bge.n	8006eee <__ieee754_pow+0x226>
 8006edc:	2000      	movs	r0, #0
 8006ede:	b011      	add	sp, #68	@ 0x44
 8006ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	f000 bcb4 	b.w	8007850 <__math_oflow>
 8006ee8:	f1b8 0f00 	cmp.w	r8, #0
 8006eec:	dcf6      	bgt.n	8006edc <__ieee754_pow+0x214>
 8006eee:	2000      	movs	r0, #0
 8006ef0:	b011      	add	sp, #68	@ 0x44
 8006ef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	f000 bca6 	b.w	8007846 <__math_uflow>
 8006efa:	429e      	cmp	r6, r3
 8006efc:	d20c      	bcs.n	8006f18 <__ieee754_pow+0x250>
 8006efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	f7f9 fd51 	bl	80009ac <__aeabi_dcmplt>
 8006f0a:	3800      	subs	r0, #0
 8006f0c:	bf18      	it	ne
 8006f0e:	2001      	movne	r0, #1
 8006f10:	f1b8 0f00 	cmp.w	r8, #0
 8006f14:	daec      	bge.n	8006ef0 <__ieee754_pow+0x228>
 8006f16:	e7e2      	b.n	8006ede <__ieee754_pow+0x216>
 8006f18:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <__ieee754_pow+0x27c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	429e      	cmp	r6, r3
 8006f1e:	d91b      	bls.n	8006f58 <__ieee754_pow+0x290>
 8006f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f24:	2300      	movs	r3, #0
 8006f26:	f7f9 fd41 	bl	80009ac <__aeabi_dcmplt>
 8006f2a:	3800      	subs	r0, #0
 8006f2c:	bf18      	it	ne
 8006f2e:	2001      	movne	r0, #1
 8006f30:	f1b8 0f00 	cmp.w	r8, #0
 8006f34:	dcd3      	bgt.n	8006ede <__ieee754_pow+0x216>
 8006f36:	e7db      	b.n	8006ef0 <__ieee754_pow+0x228>
 8006f38:	fff00000 	.word	0xfff00000
 8006f3c:	7ff00000 	.word	0x7ff00000
 8006f40:	433fffff 	.word	0x433fffff
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	3fefffff 	.word	0x3fefffff
 8006f4c:	3fe00000 	.word	0x3fe00000
 8006f50:	bff00000 	.word	0xbff00000
 8006f54:	43f00000 	.word	0x43f00000
 8006f58:	4b5b      	ldr	r3, [pc, #364]	@ (80070c8 <__ieee754_pow+0x400>)
 8006f5a:	f7f9 f8fd 	bl	8000158 <__aeabi_dsub>
 8006f5e:	a352      	add	r3, pc, #328	@ (adr r3, 80070a8 <__ieee754_pow+0x3e0>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	f7f9 faae 	bl	80004c8 <__aeabi_dmul>
 8006f6c:	a350      	add	r3, pc, #320	@ (adr r3, 80070b0 <__ieee754_pow+0x3e8>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	4606      	mov	r6, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 faa5 	bl	80004c8 <__aeabi_dmul>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4682      	mov	sl, r0
 8006f82:	468b      	mov	fp, r1
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	4b50      	ldr	r3, [pc, #320]	@ (80070cc <__ieee754_pow+0x404>)
 8006f8a:	f7f9 fa9d 	bl	80004c8 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	a149      	add	r1, pc, #292	@ (adr r1, 80070b8 <__ieee754_pow+0x3f0>)
 8006f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f98:	f7f9 f8de 	bl	8000158 <__aeabi_dsub>
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	f7f9 fa92 	bl	80004c8 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4949      	ldr	r1, [pc, #292]	@ (80070d0 <__ieee754_pow+0x408>)
 8006fac:	f7f9 f8d4 	bl	8000158 <__aeabi_dsub>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7f9 fa84 	bl	80004c8 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	f7f9 fa7e 	bl	80004c8 <__aeabi_dmul>
 8006fcc:	a33c      	add	r3, pc, #240	@ (adr r3, 80070c0 <__ieee754_pow+0x3f8>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 fa79 	bl	80004c8 <__aeabi_dmul>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4650      	mov	r0, sl
 8006fdc:	4659      	mov	r1, fp
 8006fde:	f7f9 f8bb 	bl	8000158 <__aeabi_dsub>
 8006fe2:	2400      	movs	r4, #0
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4689      	mov	r9, r1
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 f8b4 	bl	800015c <__adddf3>
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f7f9 f8ac 	bl	8000158 <__aeabi_dsub>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 f8a6 	bl	8000158 <__aeabi_dsub>
 800700c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007014:	2300      	movs	r3, #0
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007024:	4652      	mov	r2, sl
 8007026:	465b      	mov	r3, fp
 8007028:	f7f9 f896 	bl	8000158 <__aeabi_dsub>
 800702c:	4622      	mov	r2, r4
 800702e:	462b      	mov	r3, r5
 8007030:	f7f9 fa4a 	bl	80004c8 <__aeabi_dmul>
 8007034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007038:	4680      	mov	r8, r0
 800703a:	4689      	mov	r9, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fa42 	bl	80004c8 <__aeabi_dmul>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 f886 	bl	800015c <__adddf3>
 8007050:	4652      	mov	r2, sl
 8007052:	465b      	mov	r3, fp
 8007054:	4606      	mov	r6, r0
 8007056:	460f      	mov	r7, r1
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	f7f9 fa34 	bl	80004c8 <__aeabi_dmul>
 8007060:	460b      	mov	r3, r1
 8007062:	4602      	mov	r2, r0
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 f876 	bl	800015c <__adddf3>
 8007070:	4b18      	ldr	r3, [pc, #96]	@ (80070d4 <__ieee754_pow+0x40c>)
 8007072:	4604      	mov	r4, r0
 8007074:	4299      	cmp	r1, r3
 8007076:	460d      	mov	r5, r1
 8007078:	468a      	mov	sl, r1
 800707a:	468b      	mov	fp, r1
 800707c:	f340 82e0 	ble.w	8007640 <__ieee754_pow+0x978>
 8007080:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007084:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007088:	4303      	orrs	r3, r0
 800708a:	f000 81df 	beq.w	800744c <__ieee754_pow+0x784>
 800708e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	f7f9 fc89 	bl	80009ac <__aeabi_dcmplt>
 800709a:	3800      	subs	r0, #0
 800709c:	bf18      	it	ne
 800709e:	2001      	movne	r0, #1
 80070a0:	e71d      	b.n	8006ede <__ieee754_pow+0x216>
 80070a2:	bf00      	nop
 80070a4:	f3af 8000 	nop.w
 80070a8:	60000000 	.word	0x60000000
 80070ac:	3ff71547 	.word	0x3ff71547
 80070b0:	f85ddf44 	.word	0xf85ddf44
 80070b4:	3e54ae0b 	.word	0x3e54ae0b
 80070b8:	55555555 	.word	0x55555555
 80070bc:	3fd55555 	.word	0x3fd55555
 80070c0:	652b82fe 	.word	0x652b82fe
 80070c4:	3ff71547 	.word	0x3ff71547
 80070c8:	3ff00000 	.word	0x3ff00000
 80070cc:	3fd00000 	.word	0x3fd00000
 80070d0:	3fe00000 	.word	0x3fe00000
 80070d4:	408fffff 	.word	0x408fffff
 80070d8:	4ad3      	ldr	r2, [pc, #844]	@ (8007428 <__ieee754_pow+0x760>)
 80070da:	402a      	ands	r2, r5
 80070dc:	2a00      	cmp	r2, #0
 80070de:	f040 817a 	bne.w	80073d6 <__ieee754_pow+0x70e>
 80070e2:	4bd2      	ldr	r3, [pc, #840]	@ (800742c <__ieee754_pow+0x764>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	f7f9 f9ef 	bl	80004c8 <__aeabi_dmul>
 80070ea:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80070ee:	460b      	mov	r3, r1
 80070f0:	151a      	asrs	r2, r3, #20
 80070f2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80070f6:	4422      	add	r2, r4
 80070f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80070fa:	4acd      	ldr	r2, [pc, #820]	@ (8007430 <__ieee754_pow+0x768>)
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007104:	4293      	cmp	r3, r2
 8007106:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800710a:	dd08      	ble.n	800711e <__ieee754_pow+0x456>
 800710c:	4ac9      	ldr	r2, [pc, #804]	@ (8007434 <__ieee754_pow+0x76c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	f340 8163 	ble.w	80073da <__ieee754_pow+0x712>
 8007114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007116:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800711a:	3301      	adds	r3, #1
 800711c:	930a      	str	r3, [sp, #40]	@ 0x28
 800711e:	2600      	movs	r6, #0
 8007120:	00f3      	lsls	r3, r6, #3
 8007122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007124:	4bc4      	ldr	r3, [pc, #784]	@ (8007438 <__ieee754_pow+0x770>)
 8007126:	4629      	mov	r1, r5
 8007128:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800712c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007130:	461a      	mov	r2, r3
 8007132:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007136:	4623      	mov	r3, r4
 8007138:	4682      	mov	sl, r0
 800713a:	f7f9 f80d 	bl	8000158 <__aeabi_dsub>
 800713e:	4652      	mov	r2, sl
 8007140:	462b      	mov	r3, r5
 8007142:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800714a:	f7f9 f807 	bl	800015c <__adddf3>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	2000      	movs	r0, #0
 8007154:	49b9      	ldr	r1, [pc, #740]	@ (800743c <__ieee754_pow+0x774>)
 8007156:	f7f9 fae1 	bl	800071c <__aeabi_ddiv>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007166:	f7f9 f9af 	bl	80004c8 <__aeabi_dmul>
 800716a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800716e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007176:	2300      	movs	r3, #0
 8007178:	2200      	movs	r2, #0
 800717a:	46ab      	mov	fp, r5
 800717c:	106d      	asrs	r5, r5, #1
 800717e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007188:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800718c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007190:	4640      	mov	r0, r8
 8007192:	4649      	mov	r1, r9
 8007194:	4614      	mov	r4, r2
 8007196:	461d      	mov	r5, r3
 8007198:	f7f9 f996 	bl	80004c8 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a4:	f7f8 ffd8 	bl	8000158 <__aeabi_dsub>
 80071a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071ac:	4606      	mov	r6, r0
 80071ae:	460f      	mov	r7, r1
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f8 ffd0 	bl	8000158 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4650      	mov	r0, sl
 80071be:	4659      	mov	r1, fp
 80071c0:	f7f8 ffca 	bl	8000158 <__aeabi_dsub>
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	f7f9 f97e 	bl	80004c8 <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f8 ffc0 	bl	8000158 <__aeabi_dsub>
 80071d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071dc:	f7f9 f974 	bl	80004c8 <__aeabi_dmul>
 80071e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071e8:	4610      	mov	r0, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	f7f9 f96c 	bl	80004c8 <__aeabi_dmul>
 80071f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80073e0 <__ieee754_pow+0x718>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	f7f9 f965 	bl	80004c8 <__aeabi_dmul>
 80071fe:	a37a      	add	r3, pc, #488	@ (adr r3, 80073e8 <__ieee754_pow+0x720>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f8 ffaa 	bl	800015c <__adddf3>
 8007208:	4622      	mov	r2, r4
 800720a:	462b      	mov	r3, r5
 800720c:	f7f9 f95c 	bl	80004c8 <__aeabi_dmul>
 8007210:	a377      	add	r3, pc, #476	@ (adr r3, 80073f0 <__ieee754_pow+0x728>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f8 ffa1 	bl	800015c <__adddf3>
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	f7f9 f953 	bl	80004c8 <__aeabi_dmul>
 8007222:	a375      	add	r3, pc, #468	@ (adr r3, 80073f8 <__ieee754_pow+0x730>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 ff98 	bl	800015c <__adddf3>
 800722c:	4622      	mov	r2, r4
 800722e:	462b      	mov	r3, r5
 8007230:	f7f9 f94a 	bl	80004c8 <__aeabi_dmul>
 8007234:	a372      	add	r3, pc, #456	@ (adr r3, 8007400 <__ieee754_pow+0x738>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ff8f 	bl	800015c <__adddf3>
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	f7f9 f941 	bl	80004c8 <__aeabi_dmul>
 8007246:	a370      	add	r3, pc, #448	@ (adr r3, 8007408 <__ieee754_pow+0x740>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f8 ff86 	bl	800015c <__adddf3>
 8007250:	4622      	mov	r2, r4
 8007252:	4606      	mov	r6, r0
 8007254:	460f      	mov	r7, r1
 8007256:	462b      	mov	r3, r5
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f934 	bl	80004c8 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f9 f92e 	bl	80004c8 <__aeabi_dmul>
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007274:	4642      	mov	r2, r8
 8007276:	464b      	mov	r3, r9
 8007278:	f7f8 ff70 	bl	800015c <__adddf3>
 800727c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007280:	f7f9 f922 	bl	80004c8 <__aeabi_dmul>
 8007284:	4622      	mov	r2, r4
 8007286:	462b      	mov	r3, r5
 8007288:	f7f8 ff68 	bl	800015c <__adddf3>
 800728c:	4642      	mov	r2, r8
 800728e:	4682      	mov	sl, r0
 8007290:	468b      	mov	fp, r1
 8007292:	464b      	mov	r3, r9
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f9 f916 	bl	80004c8 <__aeabi_dmul>
 800729c:	2200      	movs	r2, #0
 800729e:	4b68      	ldr	r3, [pc, #416]	@ (8007440 <__ieee754_pow+0x778>)
 80072a0:	4606      	mov	r6, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	f7f8 ff5a 	bl	800015c <__adddf3>
 80072a8:	4652      	mov	r2, sl
 80072aa:	465b      	mov	r3, fp
 80072ac:	f7f8 ff56 	bl	800015c <__adddf3>
 80072b0:	2400      	movs	r4, #0
 80072b2:	460d      	mov	r5, r1
 80072b4:	4622      	mov	r2, r4
 80072b6:	460b      	mov	r3, r1
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f9 f904 	bl	80004c8 <__aeabi_dmul>
 80072c0:	2200      	movs	r2, #0
 80072c2:	4680      	mov	r8, r0
 80072c4:	4689      	mov	r9, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007440 <__ieee754_pow+0x778>)
 80072cc:	f7f8 ff44 	bl	8000158 <__aeabi_dsub>
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	f7f8 ff40 	bl	8000158 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	f7f8 ff3a 	bl	8000158 <__aeabi_dsub>
 80072e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072e8:	f7f9 f8ee 	bl	80004c8 <__aeabi_dmul>
 80072ec:	4622      	mov	r2, r4
 80072ee:	4606      	mov	r6, r0
 80072f0:	460f      	mov	r7, r1
 80072f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072f6:	462b      	mov	r3, r5
 80072f8:	f7f9 f8e6 	bl	80004c8 <__aeabi_dmul>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ff2a 	bl	800015c <__adddf3>
 8007308:	2400      	movs	r4, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f8 ff21 	bl	800015c <__adddf3>
 800731a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007410 <__ieee754_pow+0x748>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4620      	mov	r0, r4
 8007322:	460d      	mov	r5, r1
 8007324:	f7f9 f8d0 	bl	80004c8 <__aeabi_dmul>
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f8 ff10 	bl	8000158 <__aeabi_dsub>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4630      	mov	r0, r6
 800733e:	4639      	mov	r1, r7
 8007340:	f7f8 ff0a 	bl	8000158 <__aeabi_dsub>
 8007344:	a334      	add	r3, pc, #208	@ (adr r3, 8007418 <__ieee754_pow+0x750>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f9 f8bd 	bl	80004c8 <__aeabi_dmul>
 800734e:	a334      	add	r3, pc, #208	@ (adr r3, 8007420 <__ieee754_pow+0x758>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	4620      	mov	r0, r4
 800735a:	4629      	mov	r1, r5
 800735c:	f7f9 f8b4 	bl	80004c8 <__aeabi_dmul>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4630      	mov	r0, r6
 8007366:	4639      	mov	r1, r7
 8007368:	f7f8 fef8 	bl	800015c <__adddf3>
 800736c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800736e:	4b35      	ldr	r3, [pc, #212]	@ (8007444 <__ieee754_pow+0x77c>)
 8007370:	2400      	movs	r4, #0
 8007372:	4413      	add	r3, r2
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 fef0 	bl	800015c <__adddf3>
 800737c:	4682      	mov	sl, r0
 800737e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007380:	468b      	mov	fp, r1
 8007382:	f7f9 f837 	bl	80003f4 <__aeabi_i2d>
 8007386:	4606      	mov	r6, r0
 8007388:	460f      	mov	r7, r1
 800738a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800738c:	4b2e      	ldr	r3, [pc, #184]	@ (8007448 <__ieee754_pow+0x780>)
 800738e:	4413      	add	r3, r2
 8007390:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007394:	4652      	mov	r2, sl
 8007396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739a:	465b      	mov	r3, fp
 800739c:	f7f8 fede 	bl	800015c <__adddf3>
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	f7f8 feda 	bl	800015c <__adddf3>
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	f7f8 fed6 	bl	800015c <__adddf3>
 80073b0:	4632      	mov	r2, r6
 80073b2:	463b      	mov	r3, r7
 80073b4:	4620      	mov	r0, r4
 80073b6:	460d      	mov	r5, r1
 80073b8:	f7f8 fece 	bl	8000158 <__aeabi_dsub>
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	f7f8 feca 	bl	8000158 <__aeabi_dsub>
 80073c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073c8:	f7f8 fec6 	bl	8000158 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	e618      	b.n	8007008 <__ieee754_pow+0x340>
 80073d6:	2400      	movs	r4, #0
 80073d8:	e68a      	b.n	80070f0 <__ieee754_pow+0x428>
 80073da:	2601      	movs	r6, #1
 80073dc:	e6a0      	b.n	8007120 <__ieee754_pow+0x458>
 80073de:	bf00      	nop
 80073e0:	4a454eef 	.word	0x4a454eef
 80073e4:	3fca7e28 	.word	0x3fca7e28
 80073e8:	93c9db65 	.word	0x93c9db65
 80073ec:	3fcd864a 	.word	0x3fcd864a
 80073f0:	a91d4101 	.word	0xa91d4101
 80073f4:	3fd17460 	.word	0x3fd17460
 80073f8:	518f264d 	.word	0x518f264d
 80073fc:	3fd55555 	.word	0x3fd55555
 8007400:	db6fabff 	.word	0xdb6fabff
 8007404:	3fdb6db6 	.word	0x3fdb6db6
 8007408:	33333303 	.word	0x33333303
 800740c:	3fe33333 	.word	0x3fe33333
 8007410:	e0000000 	.word	0xe0000000
 8007414:	3feec709 	.word	0x3feec709
 8007418:	dc3a03fd 	.word	0xdc3a03fd
 800741c:	3feec709 	.word	0x3feec709
 8007420:	145b01f5 	.word	0x145b01f5
 8007424:	be3e2fe0 	.word	0xbe3e2fe0
 8007428:	7ff00000 	.word	0x7ff00000
 800742c:	43400000 	.word	0x43400000
 8007430:	0003988e 	.word	0x0003988e
 8007434:	000bb679 	.word	0x000bb679
 8007438:	08007a80 	.word	0x08007a80
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	40080000 	.word	0x40080000
 8007444:	08007a60 	.word	0x08007a60
 8007448:	08007a70 	.word	0x08007a70
 800744c:	a39a      	add	r3, pc, #616	@ (adr r3, 80076b8 <__ieee754_pow+0x9f0>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	f7f8 fe81 	bl	800015c <__adddf3>
 800745a:	4642      	mov	r2, r8
 800745c:	e9cd 0100 	strd	r0, r1, [sp]
 8007460:	464b      	mov	r3, r9
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f8 fe77 	bl	8000158 <__aeabi_dsub>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007472:	f7f9 fab9 	bl	80009e8 <__aeabi_dcmpgt>
 8007476:	2800      	cmp	r0, #0
 8007478:	f47f ae09 	bne.w	800708e <__ieee754_pow+0x3c6>
 800747c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007480:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007484:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007488:	fa43 fa0a 	asr.w	sl, r3, sl
 800748c:	44da      	add	sl, fp
 800748e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007492:	489b      	ldr	r0, [pc, #620]	@ (8007700 <__ieee754_pow+0xa38>)
 8007494:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007498:	4108      	asrs	r0, r1
 800749a:	ea00 030a 	and.w	r3, r0, sl
 800749e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80074a2:	f1c1 0114 	rsb	r1, r1, #20
 80074a6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80074aa:	4640      	mov	r0, r8
 80074ac:	fa4a fa01 	asr.w	sl, sl, r1
 80074b0:	f1bb 0f00 	cmp.w	fp, #0
 80074b4:	4649      	mov	r1, r9
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	bfb8      	it	lt
 80074bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80074c0:	f7f8 fe4a 	bl	8000158 <__aeabi_dsub>
 80074c4:	4680      	mov	r8, r0
 80074c6:	4689      	mov	r9, r1
 80074c8:	2400      	movs	r4, #0
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f8 fe43 	bl	800015c <__adddf3>
 80074d6:	a37a      	add	r3, pc, #488	@ (adr r3, 80076c0 <__ieee754_pow+0x9f8>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	4620      	mov	r0, r4
 80074de:	460d      	mov	r5, r1
 80074e0:	f7f8 fff2 	bl	80004c8 <__aeabi_dmul>
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	e9cd 0100 	strd	r0, r1, [sp]
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f8 fe32 	bl	8000158 <__aeabi_dsub>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f8 fe2c 	bl	8000158 <__aeabi_dsub>
 8007500:	a371      	add	r3, pc, #452	@ (adr r3, 80076c8 <__ieee754_pow+0xa00>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f8 ffdf 	bl	80004c8 <__aeabi_dmul>
 800750a:	a371      	add	r3, pc, #452	@ (adr r3, 80076d0 <__ieee754_pow+0xa08>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	4680      	mov	r8, r0
 8007512:	4689      	mov	r9, r1
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f7f8 ffd6 	bl	80004c8 <__aeabi_dmul>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4640      	mov	r0, r8
 8007522:	4649      	mov	r1, r9
 8007524:	f7f8 fe1a 	bl	800015c <__adddf3>
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007534:	f7f8 fe12 	bl	800015c <__adddf3>
 8007538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800753c:	4680      	mov	r8, r0
 800753e:	4689      	mov	r9, r1
 8007540:	f7f8 fe0a 	bl	8000158 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4620      	mov	r0, r4
 800754a:	4629      	mov	r1, r5
 800754c:	f7f8 fe04 	bl	8000158 <__aeabi_dsub>
 8007550:	4642      	mov	r2, r8
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	464b      	mov	r3, r9
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f8 ffb4 	bl	80004c8 <__aeabi_dmul>
 8007560:	a35d      	add	r3, pc, #372	@ (adr r3, 80076d8 <__ieee754_pow+0xa10>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	f7f8 ffad 	bl	80004c8 <__aeabi_dmul>
 800756e:	a35c      	add	r3, pc, #368	@ (adr r3, 80076e0 <__ieee754_pow+0xa18>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f8 fdf0 	bl	8000158 <__aeabi_dsub>
 8007578:	4622      	mov	r2, r4
 800757a:	462b      	mov	r3, r5
 800757c:	f7f8 ffa4 	bl	80004c8 <__aeabi_dmul>
 8007580:	a359      	add	r3, pc, #356	@ (adr r3, 80076e8 <__ieee754_pow+0xa20>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fde9 	bl	800015c <__adddf3>
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f8 ff9b 	bl	80004c8 <__aeabi_dmul>
 8007592:	a357      	add	r3, pc, #348	@ (adr r3, 80076f0 <__ieee754_pow+0xa28>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fdde 	bl	8000158 <__aeabi_dsub>
 800759c:	4622      	mov	r2, r4
 800759e:	462b      	mov	r3, r5
 80075a0:	f7f8 ff92 	bl	80004c8 <__aeabi_dmul>
 80075a4:	a354      	add	r3, pc, #336	@ (adr r3, 80076f8 <__ieee754_pow+0xa30>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fdd7 	bl	800015c <__adddf3>
 80075ae:	4622      	mov	r2, r4
 80075b0:	462b      	mov	r3, r5
 80075b2:	f7f8 ff89 	bl	80004c8 <__aeabi_dmul>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	f7f8 fdcb 	bl	8000158 <__aeabi_dsub>
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f8 ff7b 	bl	80004c8 <__aeabi_dmul>
 80075d2:	2200      	movs	r2, #0
 80075d4:	e9cd 0100 	strd	r0, r1, [sp]
 80075d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fdba 	bl	8000158 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ec:	f7f9 f896 	bl	800071c <__aeabi_ddiv>
 80075f0:	4632      	mov	r2, r6
 80075f2:	4604      	mov	r4, r0
 80075f4:	460d      	mov	r5, r1
 80075f6:	463b      	mov	r3, r7
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f8 ff64 	bl	80004c8 <__aeabi_dmul>
 8007600:	4632      	mov	r2, r6
 8007602:	463b      	mov	r3, r7
 8007604:	f7f8 fdaa 	bl	800015c <__adddf3>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f8 fda2 	bl	8000158 <__aeabi_dsub>
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	f7f8 fd9e 	bl	8000158 <__aeabi_dsub>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	2000      	movs	r0, #0
 8007622:	4938      	ldr	r1, [pc, #224]	@ (8007704 <__ieee754_pow+0xa3c>)
 8007624:	f7f8 fd98 	bl	8000158 <__aeabi_dsub>
 8007628:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800762c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007630:	da2e      	bge.n	8007690 <__ieee754_pow+0x9c8>
 8007632:	4652      	mov	r2, sl
 8007634:	f000 f874 	bl	8007720 <scalbn>
 8007638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800763c:	f7ff bbed 	b.w	8006e1a <__ieee754_pow+0x152>
 8007640:	4c31      	ldr	r4, [pc, #196]	@ (8007708 <__ieee754_pow+0xa40>)
 8007642:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007646:	42a3      	cmp	r3, r4
 8007648:	d91a      	bls.n	8007680 <__ieee754_pow+0x9b8>
 800764a:	4b30      	ldr	r3, [pc, #192]	@ (800770c <__ieee754_pow+0xa44>)
 800764c:	440b      	add	r3, r1
 800764e:	4303      	orrs	r3, r0
 8007650:	d009      	beq.n	8007666 <__ieee754_pow+0x99e>
 8007652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	2300      	movs	r3, #0
 800765a:	f7f9 f9a7 	bl	80009ac <__aeabi_dcmplt>
 800765e:	3800      	subs	r0, #0
 8007660:	bf18      	it	ne
 8007662:	2001      	movne	r0, #1
 8007664:	e444      	b.n	8006ef0 <__ieee754_pow+0x228>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	f7f8 fd75 	bl	8000158 <__aeabi_dsub>
 800766e:	4632      	mov	r2, r6
 8007670:	463b      	mov	r3, r7
 8007672:	f7f9 f9af 	bl	80009d4 <__aeabi_dcmpge>
 8007676:	2800      	cmp	r0, #0
 8007678:	d1eb      	bne.n	8007652 <__ieee754_pow+0x98a>
 800767a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007710 <__ieee754_pow+0xa48>
 800767e:	e6fd      	b.n	800747c <__ieee754_pow+0x7b4>
 8007680:	469a      	mov	sl, r3
 8007682:	4b24      	ldr	r3, [pc, #144]	@ (8007714 <__ieee754_pow+0xa4c>)
 8007684:	459a      	cmp	sl, r3
 8007686:	f63f aef9 	bhi.w	800747c <__ieee754_pow+0x7b4>
 800768a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800768e:	e71b      	b.n	80074c8 <__ieee754_pow+0x800>
 8007690:	4621      	mov	r1, r4
 8007692:	e7d1      	b.n	8007638 <__ieee754_pow+0x970>
 8007694:	2000      	movs	r0, #0
 8007696:	491b      	ldr	r1, [pc, #108]	@ (8007704 <__ieee754_pow+0xa3c>)
 8007698:	f7ff bb34 	b.w	8006d04 <__ieee754_pow+0x3c>
 800769c:	2000      	movs	r0, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	f7ff bb30 	b.w	8006d04 <__ieee754_pow+0x3c>
 80076a4:	4650      	mov	r0, sl
 80076a6:	4659      	mov	r1, fp
 80076a8:	f7ff bb2c 	b.w	8006d04 <__ieee754_pow+0x3c>
 80076ac:	460c      	mov	r4, r1
 80076ae:	f7ff bb79 	b.w	8006da4 <__ieee754_pow+0xdc>
 80076b2:	2400      	movs	r4, #0
 80076b4:	f7ff bb64 	b.w	8006d80 <__ieee754_pow+0xb8>
 80076b8:	652b82fe 	.word	0x652b82fe
 80076bc:	3c971547 	.word	0x3c971547
 80076c0:	00000000 	.word	0x00000000
 80076c4:	3fe62e43 	.word	0x3fe62e43
 80076c8:	fefa39ef 	.word	0xfefa39ef
 80076cc:	3fe62e42 	.word	0x3fe62e42
 80076d0:	0ca86c39 	.word	0x0ca86c39
 80076d4:	be205c61 	.word	0xbe205c61
 80076d8:	72bea4d0 	.word	0x72bea4d0
 80076dc:	3e663769 	.word	0x3e663769
 80076e0:	c5d26bf1 	.word	0xc5d26bf1
 80076e4:	3ebbbd41 	.word	0x3ebbbd41
 80076e8:	af25de2c 	.word	0xaf25de2c
 80076ec:	3f11566a 	.word	0x3f11566a
 80076f0:	16bebd93 	.word	0x16bebd93
 80076f4:	3f66c16c 	.word	0x3f66c16c
 80076f8:	5555553e 	.word	0x5555553e
 80076fc:	3fc55555 	.word	0x3fc55555
 8007700:	fff00000 	.word	0xfff00000
 8007704:	3ff00000 	.word	0x3ff00000
 8007708:	4090cbff 	.word	0x4090cbff
 800770c:	3f6f3400 	.word	0x3f6f3400
 8007710:	4090cc00 	.word	0x4090cc00
 8007714:	3fe00000 	.word	0x3fe00000

08007718 <fabs>:
 8007718:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800771c:	4619      	mov	r1, r3
 800771e:	4770      	bx	lr

08007720 <scalbn>:
 8007720:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007724:	4616      	mov	r6, r2
 8007726:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800772a:	4683      	mov	fp, r0
 800772c:	468c      	mov	ip, r1
 800772e:	460b      	mov	r3, r1
 8007730:	b982      	cbnz	r2, 8007754 <scalbn+0x34>
 8007732:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007736:	4303      	orrs	r3, r0
 8007738:	d039      	beq.n	80077ae <scalbn+0x8e>
 800773a:	4b2f      	ldr	r3, [pc, #188]	@ (80077f8 <scalbn+0xd8>)
 800773c:	2200      	movs	r2, #0
 800773e:	f7f8 fec3 	bl	80004c8 <__aeabi_dmul>
 8007742:	4b2e      	ldr	r3, [pc, #184]	@ (80077fc <scalbn+0xdc>)
 8007744:	4683      	mov	fp, r0
 8007746:	429e      	cmp	r6, r3
 8007748:	468c      	mov	ip, r1
 800774a:	da0d      	bge.n	8007768 <scalbn+0x48>
 800774c:	a326      	add	r3, pc, #152	@ (adr r3, 80077e8 <scalbn+0xc8>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	e01b      	b.n	800778c <scalbn+0x6c>
 8007754:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007758:	42ba      	cmp	r2, r7
 800775a:	d109      	bne.n	8007770 <scalbn+0x50>
 800775c:	4602      	mov	r2, r0
 800775e:	f7f8 fcfd 	bl	800015c <__adddf3>
 8007762:	4683      	mov	fp, r0
 8007764:	468c      	mov	ip, r1
 8007766:	e022      	b.n	80077ae <scalbn+0x8e>
 8007768:	460b      	mov	r3, r1
 800776a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800776e:	3a36      	subs	r2, #54	@ 0x36
 8007770:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007774:	428e      	cmp	r6, r1
 8007776:	dd0c      	ble.n	8007792 <scalbn+0x72>
 8007778:	a31d      	add	r3, pc, #116	@ (adr r3, 80077f0 <scalbn+0xd0>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	461c      	mov	r4, r3
 8007780:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007784:	f361 74df 	bfi	r4, r1, #31, #1
 8007788:	4621      	mov	r1, r4
 800778a:	481d      	ldr	r0, [pc, #116]	@ (8007800 <scalbn+0xe0>)
 800778c:	f7f8 fe9c 	bl	80004c8 <__aeabi_dmul>
 8007790:	e7e7      	b.n	8007762 <scalbn+0x42>
 8007792:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007796:	4432      	add	r2, r6
 8007798:	428a      	cmp	r2, r1
 800779a:	dced      	bgt.n	8007778 <scalbn+0x58>
 800779c:	2a00      	cmp	r2, #0
 800779e:	dd0a      	ble.n	80077b6 <scalbn+0x96>
 80077a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80077a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80077a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80077ac:	46ac      	mov	ip, r5
 80077ae:	4658      	mov	r0, fp
 80077b0:	4661      	mov	r1, ip
 80077b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80077b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80077ba:	da09      	bge.n	80077d0 <scalbn+0xb0>
 80077bc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80077c0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80077c4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80077c8:	480e      	ldr	r0, [pc, #56]	@ (8007804 <scalbn+0xe4>)
 80077ca:	f041 011f 	orr.w	r1, r1, #31
 80077ce:	e7bd      	b.n	800774c <scalbn+0x2c>
 80077d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80077d4:	3236      	adds	r2, #54	@ 0x36
 80077d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80077da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80077de:	4658      	mov	r0, fp
 80077e0:	4629      	mov	r1, r5
 80077e2:	2200      	movs	r2, #0
 80077e4:	4b08      	ldr	r3, [pc, #32]	@ (8007808 <scalbn+0xe8>)
 80077e6:	e7d1      	b.n	800778c <scalbn+0x6c>
 80077e8:	c2f8f359 	.word	0xc2f8f359
 80077ec:	01a56e1f 	.word	0x01a56e1f
 80077f0:	8800759c 	.word	0x8800759c
 80077f4:	7e37e43c 	.word	0x7e37e43c
 80077f8:	43500000 	.word	0x43500000
 80077fc:	ffff3cb0 	.word	0xffff3cb0
 8007800:	8800759c 	.word	0x8800759c
 8007804:	c2f8f359 	.word	0xc2f8f359
 8007808:	3c900000 	.word	0x3c900000

0800780c <with_errno>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	4616      	mov	r6, r2
 8007814:	f7ff f960 	bl	8006ad8 <__errno>
 8007818:	4629      	mov	r1, r5
 800781a:	6006      	str	r6, [r0, #0]
 800781c:	4620      	mov	r0, r4
 800781e:	bd70      	pop	{r4, r5, r6, pc}

08007820 <xflow>:
 8007820:	b513      	push	{r0, r1, r4, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	b10c      	cbz	r4, 800782e <xflow+0xe>
 800782a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800782e:	e9cd 2300 	strd	r2, r3, [sp]
 8007832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007836:	f7f8 fe47 	bl	80004c8 <__aeabi_dmul>
 800783a:	2222      	movs	r2, #34	@ 0x22
 800783c:	b002      	add	sp, #8
 800783e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007842:	f7ff bfe3 	b.w	800780c <with_errno>

08007846 <__math_uflow>:
 8007846:	2200      	movs	r2, #0
 8007848:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800784c:	f7ff bfe8 	b.w	8007820 <xflow>

08007850 <__math_oflow>:
 8007850:	2200      	movs	r2, #0
 8007852:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007856:	f7ff bfe3 	b.w	8007820 <xflow>
	...

0800785c <__ieee754_sqrt>:
 800785c:	4a67      	ldr	r2, [pc, #412]	@ (80079fc <__ieee754_sqrt+0x1a0>)
 800785e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007862:	438a      	bics	r2, r1
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	460b      	mov	r3, r1
 800786a:	4604      	mov	r4, r0
 800786c:	d10e      	bne.n	800788c <__ieee754_sqrt+0x30>
 800786e:	4602      	mov	r2, r0
 8007870:	f7f8 fe2a 	bl	80004c8 <__aeabi_dmul>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fc6e 	bl	800015c <__adddf3>
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788c:	2900      	cmp	r1, #0
 800788e:	dc0c      	bgt.n	80078aa <__ieee754_sqrt+0x4e>
 8007890:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007894:	4302      	orrs	r2, r0
 8007896:	d0f5      	beq.n	8007884 <__ieee754_sqrt+0x28>
 8007898:	b189      	cbz	r1, 80078be <__ieee754_sqrt+0x62>
 800789a:	4602      	mov	r2, r0
 800789c:	f7f8 fc5c 	bl	8000158 <__aeabi_dsub>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	f7f8 ff3a 	bl	800071c <__aeabi_ddiv>
 80078a8:	e7ea      	b.n	8007880 <__ieee754_sqrt+0x24>
 80078aa:	150a      	asrs	r2, r1, #20
 80078ac:	d115      	bne.n	80078da <__ieee754_sqrt+0x7e>
 80078ae:	2100      	movs	r1, #0
 80078b0:	e009      	b.n	80078c6 <__ieee754_sqrt+0x6a>
 80078b2:	0ae3      	lsrs	r3, r4, #11
 80078b4:	3a15      	subs	r2, #21
 80078b6:	0564      	lsls	r4, r4, #21
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0fa      	beq.n	80078b2 <__ieee754_sqrt+0x56>
 80078bc:	e7f7      	b.n	80078ae <__ieee754_sqrt+0x52>
 80078be:	460a      	mov	r2, r1
 80078c0:	e7fa      	b.n	80078b8 <__ieee754_sqrt+0x5c>
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	3101      	adds	r1, #1
 80078c6:	02d8      	lsls	r0, r3, #11
 80078c8:	d5fb      	bpl.n	80078c2 <__ieee754_sqrt+0x66>
 80078ca:	1e48      	subs	r0, r1, #1
 80078cc:	1a12      	subs	r2, r2, r0
 80078ce:	f1c1 0020 	rsb	r0, r1, #32
 80078d2:	fa24 f000 	lsr.w	r0, r4, r0
 80078d6:	4303      	orrs	r3, r0
 80078d8:	408c      	lsls	r4, r1
 80078da:	2600      	movs	r6, #0
 80078dc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80078e0:	2116      	movs	r1, #22
 80078e2:	07d2      	lsls	r2, r2, #31
 80078e4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80078e8:	4632      	mov	r2, r6
 80078ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078f2:	bf5c      	itt	pl
 80078f4:	005b      	lslpl	r3, r3, #1
 80078f6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80078fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078fe:	bf58      	it	pl
 8007900:	0064      	lslpl	r4, r4, #1
 8007902:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007906:	107f      	asrs	r7, r7, #1
 8007908:	0064      	lsls	r4, r4, #1
 800790a:	1815      	adds	r5, r2, r0
 800790c:	429d      	cmp	r5, r3
 800790e:	bfde      	ittt	le
 8007910:	182a      	addle	r2, r5, r0
 8007912:	1b5b      	suble	r3, r3, r5
 8007914:	1836      	addle	r6, r6, r0
 8007916:	0fe5      	lsrs	r5, r4, #31
 8007918:	3901      	subs	r1, #1
 800791a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800791e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007922:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007926:	d1f0      	bne.n	800790a <__ieee754_sqrt+0xae>
 8007928:	460d      	mov	r5, r1
 800792a:	f04f 0a20 	mov.w	sl, #32
 800792e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007932:	429a      	cmp	r2, r3
 8007934:	eb01 0c00 	add.w	ip, r1, r0
 8007938:	db02      	blt.n	8007940 <__ieee754_sqrt+0xe4>
 800793a:	d113      	bne.n	8007964 <__ieee754_sqrt+0x108>
 800793c:	45a4      	cmp	ip, r4
 800793e:	d811      	bhi.n	8007964 <__ieee754_sqrt+0x108>
 8007940:	f1bc 0f00 	cmp.w	ip, #0
 8007944:	eb0c 0100 	add.w	r1, ip, r0
 8007948:	da42      	bge.n	80079d0 <__ieee754_sqrt+0x174>
 800794a:	2900      	cmp	r1, #0
 800794c:	db40      	blt.n	80079d0 <__ieee754_sqrt+0x174>
 800794e:	f102 0e01 	add.w	lr, r2, #1
 8007952:	1a9b      	subs	r3, r3, r2
 8007954:	4672      	mov	r2, lr
 8007956:	45a4      	cmp	ip, r4
 8007958:	bf88      	it	hi
 800795a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800795e:	eba4 040c 	sub.w	r4, r4, ip
 8007962:	4405      	add	r5, r0
 8007964:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007968:	f1ba 0a01 	subs.w	sl, sl, #1
 800796c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007970:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007974:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007978:	d1db      	bne.n	8007932 <__ieee754_sqrt+0xd6>
 800797a:	431c      	orrs	r4, r3
 800797c:	d01a      	beq.n	80079b4 <__ieee754_sqrt+0x158>
 800797e:	4c20      	ldr	r4, [pc, #128]	@ (8007a00 <__ieee754_sqrt+0x1a4>)
 8007980:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007a04 <__ieee754_sqrt+0x1a8>
 8007984:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007988:	e9db 2300 	ldrd	r2, r3, [fp]
 800798c:	f7f8 fbe4 	bl	8000158 <__aeabi_dsub>
 8007990:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f7f9 f810 	bl	80009c0 <__aeabi_dcmple>
 80079a0:	b140      	cbz	r0, 80079b4 <__ieee754_sqrt+0x158>
 80079a2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80079a6:	e9db 2300 	ldrd	r2, r3, [fp]
 80079aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80079ae:	d111      	bne.n	80079d4 <__ieee754_sqrt+0x178>
 80079b0:	4655      	mov	r5, sl
 80079b2:	3601      	adds	r6, #1
 80079b4:	1072      	asrs	r2, r6, #1
 80079b6:	086b      	lsrs	r3, r5, #1
 80079b8:	07f1      	lsls	r1, r6, #31
 80079ba:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80079be:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80079c2:	bf48      	it	mi
 80079c4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80079c8:	4618      	mov	r0, r3
 80079ca:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80079ce:	e757      	b.n	8007880 <__ieee754_sqrt+0x24>
 80079d0:	4696      	mov	lr, r2
 80079d2:	e7be      	b.n	8007952 <__ieee754_sqrt+0xf6>
 80079d4:	f7f8 fbc2 	bl	800015c <__adddf3>
 80079d8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f8 ffe2 	bl	80009ac <__aeabi_dcmplt>
 80079e8:	b120      	cbz	r0, 80079f4 <__ieee754_sqrt+0x198>
 80079ea:	1ca8      	adds	r0, r5, #2
 80079ec:	bf08      	it	eq
 80079ee:	3601      	addeq	r6, #1
 80079f0:	3502      	adds	r5, #2
 80079f2:	e7df      	b.n	80079b4 <__ieee754_sqrt+0x158>
 80079f4:	1c6b      	adds	r3, r5, #1
 80079f6:	f023 0501 	bic.w	r5, r3, #1
 80079fa:	e7db      	b.n	80079b4 <__ieee754_sqrt+0x158>
 80079fc:	7ff00000 	.word	0x7ff00000
 8007a00:	20000088 	.word	0x20000088
 8007a04:	20000080 	.word	0x20000080

08007a08 <_init>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr

08007a14 <_fini>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr
